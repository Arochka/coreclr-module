
#include "natives.h"
#include "../../c-api/data/types.h"
#include "Log.h"

alt::Ref<alt::INative::Context> ctx;

void InitNatives() {
	ctx = alt::ICore::Instance().CreateNativesContext();
}

EXPORT void Native_wait(int32_t _ms) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4EDE34FBADD967A6);
	ctx->Reset();
	ctx->Push(_ms);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native wait call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_startNewScript(const char* _scriptName, int32_t _stackSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE81651AD79516E48);
	ctx->Reset();
	ctx->Push(_scriptName);
	ctx->Push(_stackSize);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startNewScript call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_startNewScriptWithArgs(const char* _scriptName, int32_t& _args, int32_t _argCount, int32_t _stackSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8BA7F44DF1575E1);
	ctx->Reset();
	ctx->Push(_scriptName);
	ctx->Push(_args);
	ctx->Push(_argCount);
	ctx->Push(_stackSize);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startNewScriptWithArgs call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_startNewScriptWithNameHash(int32_t _scriptHash, int32_t _stackSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB1C67C3A5333A92);
	ctx->Reset();
	ctx->Push(_scriptHash);
	ctx->Push(_stackSize);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startNewScriptWithNameHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_startNewScriptWithNameHashAndArgs(int32_t _scriptHash, int32_t& _args, int32_t _argCount, int32_t _stackSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4BB298BD441BE78);
	ctx->Reset();
	ctx->Push(_scriptHash);
	ctx->Push(_args);
	ctx->Push(_argCount);
	ctx->Push(_stackSize);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startNewScriptWithNameHashAndArgs call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_timera() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83666F9FB8FEBD4B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native timera call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_timerb() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9D9444186B5A374);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native timerb call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_settimera(int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1B1E9A034A63A62);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native settimera call failed" << Log::Endl;
	}
}

EXPORT void Native_settimerb(int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AE11BC36633DE4E);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native settimerb call failed" << Log::Endl;
	}
}

EXPORT float Native_timestep() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0000000050597EE2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native timestep call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_sin(float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BADBFA3B172435F);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native sin call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_cos(float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0FFB162F40A139C);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cos call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_sqrt(float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71D93B57D07F9804);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native sqrt call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_pow(float _base, float _exponent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3621CC40F31FE2E);
	ctx->Reset();
	ctx->Push(_base);
	ctx->Push(_exponent);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pow call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_log10(float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE816E655DE37FE20);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native log10 call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_vmag(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x652D2EEEF1D3E62C);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native vmag call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_vmag2(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8CEACB4F35AE058);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native vmag2 call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_vdist(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A488C176D52CCA5);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native vdist call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_vdist2(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7A628320EFF8E47);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native vdist2 call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native_shiftLeft(int32_t _value, int32_t _bitShift) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDD95A39E5544DE8);
	ctx->Reset();
	ctx->Push(_value);
	ctx->Push(_bitShift);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native shiftLeft call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_shiftRight(int32_t _value, int32_t _bitShift) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97EF1E5BCE9DC075);
	ctx->Reset();
	ctx->Push(_value);
	ctx->Push(_bitShift);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native shiftRight call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_floor(float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF34EE736CF047844);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native floor call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_ceil(float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11E019C8F43ACC8A);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ceil call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_round(float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2DB717A73826179);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native round call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT float Native_toFloat(int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBDA792448DB5A89);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native toFloat call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setThreadPriority(int32_t _priority) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42B65DEEF2EDF2A1);
	ctx->Reset();
	ctx->Push(_priority);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setThreadPriority call failed" << Log::Endl;
	}
}

EXPORT bool Native_appDataValid() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x846AA8E7D55EE5B6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appDataValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_appGetInt(const char* _property) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3A58A12C77D9D4B);
	ctx->Reset();
	ctx->Push(_property);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appGetInt call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT float Native_appGetFloat(const char* _property) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1514FB24C02C2322);
	ctx->Reset();
	ctx->Push(_property);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appGetFloat call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT const char* Native_appGetString(const char* _property) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x749B023950D2311C);
	ctx->Reset();
	ctx->Push(_property);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appGetString call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT void Native_appSetInt(const char* _property, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x607E8E3D3E4F9611);
	ctx->Reset();
	ctx->Push(_property);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appSetInt call failed" << Log::Endl;
	}
}

EXPORT void Native_appSetFloat(const char* _property, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25D7687C68E0DAA4);
	ctx->Reset();
	ctx->Push(_property);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appSetFloat call failed" << Log::Endl;
	}
}

EXPORT void Native_appSetString(const char* _property, const char* _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3FF2FCEC4B7721B4);
	ctx->Reset();
	ctx->Push(_property);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appSetString call failed" << Log::Endl;
	}
}

EXPORT void Native_appSetApp(const char* _appName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFD0406ADAF90D2B);
	ctx->Reset();
	ctx->Push(_appName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appSetApp call failed" << Log::Endl;
	}
}

EXPORT void Native_appSetBlock(const char* _blockName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x262AB456A3D21F93);
	ctx->Reset();
	ctx->Push(_blockName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appSetBlock call failed" << Log::Endl;
	}
}

EXPORT void Native_appClearBlock() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FE1DF3342DB7DBA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appClearBlock call failed" << Log::Endl;
	}
}

EXPORT void Native_appCloseApp() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE41C65E07A5F05FC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appCloseApp call failed" << Log::Endl;
	}
}

EXPORT void Native_appCloseBlock() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8E3FCF72EAC0EF8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appCloseBlock call failed" << Log::Endl;
	}
}

EXPORT bool Native_appHasLinkedSocialClubAccount() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71EEE69745088DA0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appHasLinkedSocialClubAccount call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_appHasSyncedData(const char* _appName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA52279A7271517F);
	ctx->Reset();
	ctx->Push(_appName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appHasSyncedData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_appSaveData() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95C5D356CDA6E85F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appSaveData call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_appGetDeletedFileStatus() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9853A2BE3DED1A6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appGetDeletedFileStatus call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_appDeleteAppData(const char* _appName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44151AEA95C8A003);
	ctx->Reset();
	ctx->Push(_appName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native appDeleteAppData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setDebugLinesAndSpheresDrawingActive(bool _enabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x175B6BFC15CDD0C5);
	ctx->Reset();
	ctx->Push(_enabled);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDebugLinesAndSpheresDrawingActive call failed" << Log::Endl;
	}
}

EXPORT void Native_drawDebugLine(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FDFADE676AA3CB0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawDebugLine call failed" << Log::Endl;
	}
}

EXPORT void Native_drawDebugLineWithTwoColours(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _r1, int32_t _g1, int32_t _b1, int32_t _r2, int32_t _g2, int32_t _b2, int32_t _alpha1, int32_t _alpha2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8B9A8AC5608FF94);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_r1);
	ctx->Push(_g1);
	ctx->Push(_b1);
	ctx->Push(_r2);
	ctx->Push(_g2);
	ctx->Push(_b2);
	ctx->Push(_alpha1);
	ctx->Push(_alpha2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawDebugLineWithTwoColours call failed" << Log::Endl;
	}
}

EXPORT void Native_drawDebugSphere(float _x, float _y, float _z, float _radius, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAD68E1AB39DA632);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawDebugSphere call failed" << Log::Endl;
	}
}

EXPORT void Native_drawDebugBox(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x083A2CA4F2E573BD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawDebugBox call failed" << Log::Endl;
	}
}

EXPORT void Native_drawDebugCross(float _x, float _y, float _z, float _size, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73B1189623049839);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_size);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawDebugCross call failed" << Log::Endl;
	}
}

EXPORT void Native_drawDebugText(const char* _text, float _x, float _y, float _z, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3903E216620488E8);
	ctx->Reset();
	ctx->Push(_text);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawDebugText call failed" << Log::Endl;
	}
}

EXPORT void Native_drawDebugText2d(const char* _text, float _x, float _y, float _z, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3BB2E9555C05A8F);
	ctx->Reset();
	ctx->Push(_text);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawDebugText2d call failed" << Log::Endl;
	}
}

EXPORT void Native_drawLine(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B7256074AE34680);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawLine call failed" << Log::Endl;
	}
}

EXPORT void Native_drawPoly(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _x3, float _y3, float _z3, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC26716048436851);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_x3);
	ctx->Push(_y3);
	ctx->Push(_z3);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawPoly call failed" << Log::Endl;
	}
}

EXPORT void Native_drawSpritePoly(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _x3, float _y3, float _z3, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, const char* _textureDict, const char* _textureName, float _u1, float _v1, float _w1, float _u2, float _v2, float _w2, float _u3, float _v3, float _w3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29280002282F1928);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_x3);
	ctx->Push(_y3);
	ctx->Push(_z3);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push(_textureDict);
	ctx->Push(_textureName);
	ctx->Push(_u1);
	ctx->Push(_v1);
	ctx->Push(_w1);
	ctx->Push(_u2);
	ctx->Push(_v2);
	ctx->Push(_w2);
	ctx->Push(_u3);
	ctx->Push(_v3);
	ctx->Push(_w3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawSpritePoly call failed" << Log::Endl;
	}
}

EXPORT void Native_drawSpritePoly2(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _x3, float _y3, float _z3, float _red1, float _green1, float _blue1, int32_t _alpha1, float _red2, float _green2, float _blue2, int32_t _alpha2, float _red3, float _green3, float _blue3, int32_t _alpha3, const char* _textureDict, const char* _textureName, float _u1, float _v1, float _w1, float _u2, float _v2, float _w2, float _u3, float _v3, float _w3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x736D7AA1B750856B);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_x3);
	ctx->Push(_y3);
	ctx->Push(_z3);
	ctx->Push(_red1);
	ctx->Push(_green1);
	ctx->Push(_blue1);
	ctx->Push(_alpha1);
	ctx->Push(_red2);
	ctx->Push(_green2);
	ctx->Push(_blue2);
	ctx->Push(_alpha2);
	ctx->Push(_red3);
	ctx->Push(_green3);
	ctx->Push(_blue3);
	ctx->Push(_alpha3);
	ctx->Push(_textureDict);
	ctx->Push(_textureName);
	ctx->Push(_u1);
	ctx->Push(_v1);
	ctx->Push(_w1);
	ctx->Push(_u2);
	ctx->Push(_v2);
	ctx->Push(_w2);
	ctx->Push(_u3);
	ctx->Push(_v3);
	ctx->Push(_w3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawSpritePoly2 call failed" << Log::Endl;
	}
}

EXPORT void Native_drawBox(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3A9971CADAC7252);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawBox call failed" << Log::Endl;
	}
}

EXPORT void Native_setBackfaceculling(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23BA6B0C2AD7B0D3);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBackfaceculling call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC5C8F970D4EDFF71(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5C8F970D4EDFF71);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC5C8F970D4EDFF71 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_beginTakeMissionCreatorPhoto() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DD2139A9A20DCE8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginTakeMissionCreatorPhoto call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getStatusOfTakeMissionCreatorPhoto() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90A78ECAA4E78453);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getStatusOfTakeMissionCreatorPhoto call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_freeMemoryForMissionCreatorPhoto() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A46AF8A78DC5E0A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native freeMemoryForMissionCreatorPhoto call failed" << Log::Endl;
	}
}

EXPORT bool Native_loadMissionCreatorPhoto(int32_t& _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4862437A486F91B0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native loadMissionCreatorPhoto call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getStatusOfLoadMissionCreatorPhoto(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1670F8D05056F257);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getStatusOfLoadMissionCreatorPhoto call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x7FA5D82B8F58EC06() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FA5D82B8F58EC06);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7FA5D82B8F58EC06 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x5B0316762AFD4A64() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B0316762AFD4A64);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5B0316762AFD4A64 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x346EF3ECAAAB149E() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x346EF3ECAAAB149E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x346EF3ECAAAB149E call failed" << Log::Endl;
	}
}

EXPORT bool Native_beginTakeHighQualityPhoto() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA67C35C56EB1BD9D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginTakeHighQualityPhoto call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getStatusOfTakeHighQualityPhoto() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D6CA79EEEBD8CA3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getStatusOfTakeHighQualityPhoto call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_freeMemoryForHighQualityPhoto() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD801CC02177FA3F1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native freeMemoryForHighQualityPhoto call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1BBC135A4D25EDDE(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1BBC135A4D25EDDE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1BBC135A4D25EDDE call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF3F776ADA161E47D(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3F776ADA161E47D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF3F776ADA161E47D call failed" << Log::Endl;
	}
}

EXPORT bool Native_saveHighQualityPhoto(int32_t _unused) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DEC726C25A11BAC);
	ctx->Reset();
	ctx->Push(_unused);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native saveHighQualityPhoto call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getStatusOfSaveHighQualityPhoto() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C0C4E81E1AC60A0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getStatusOfSaveHighQualityPhoto call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x759650634F07B6B4(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x759650634F07B6B4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x759650634F07B6B4 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xCB82A0BF0E3E3265(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB82A0BF0E3E3265);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCB82A0BF0E3E3265 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_freeMemoryForLowQualityPhoto() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A12D88881435DCA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native freeMemoryForLowQualityPhoto call failed" << Log::Endl;
	}
}

EXPORT void Native_drawLowQualityPhotoToPhone(bool _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1072F115DAB0717E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawLowQualityPhotoToPhone call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getMaximumNumberOfPhotos() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34D23450F028B0BF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMaximumNumberOfPhotos call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getMaximumNumberOfCloudPhotos() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC54A7AF8B3A14EF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMaximumNumberOfCloudPhotos call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getCurrentNumberOfCloudPhotos() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x473151EBC762C6DA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCurrentNumberOfCloudPhotos call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x2A893980E96B659A(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A893980E96B659A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2A893980E96B659A call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getStatusOfSortedListOperation(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5BED327CEA362B1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getStatusOfSortedListOperation call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x4AF92ACD3141D96C() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AF92ACD3141D96C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4AF92ACD3141D96C call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xE791DF1F73ED2C8B(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE791DF1F73ED2C8B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE791DF1F73ED2C8B call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xEC72C258667BE5EA(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC72C258667BE5EA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEC72C258667BE5EA call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_returnTwo(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40AFB081F8ADD4EE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native returnTwo call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_drawLightWithRangeAndShadow(float _x, float _y, float _z, int32_t _r, int32_t _g, int32_t _b, float _range, float _intensity, float _shadow) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF49E9A9716A04595);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_range);
	ctx->Push(_intensity);
	ctx->Push(_shadow);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawLightWithRangeAndShadow call failed" << Log::Endl;
	}
}

EXPORT void Native_drawLightWithRange(float _posX, float _posY, float _posZ, int32_t _colorR, int32_t _colorG, int32_t _colorB, float _range, float _intensity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2A1B2771A01DBD4);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_colorR);
	ctx->Push(_colorG);
	ctx->Push(_colorB);
	ctx->Push(_range);
	ctx->Push(_intensity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawLightWithRange call failed" << Log::Endl;
	}
}

EXPORT void Native_drawSpotLight(float _posX, float _posY, float _posZ, float _dirX, float _dirY, float _dirZ, int32_t _colorR, int32_t _colorG, int32_t _colorB, float _distance, float _brightness, float _hardness, float _radius, float _falloff) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0F64B265C8C8B33);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_dirX);
	ctx->Push(_dirY);
	ctx->Push(_dirZ);
	ctx->Push(_colorR);
	ctx->Push(_colorG);
	ctx->Push(_colorB);
	ctx->Push(_distance);
	ctx->Push(_brightness);
	ctx->Push(_hardness);
	ctx->Push(_radius);
	ctx->Push(_falloff);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawSpotLight call failed" << Log::Endl;
	}
}

EXPORT void Native_drawSpotLightWithShadow(float _posX, float _posY, float _posZ, float _dirX, float _dirY, float _dirZ, int32_t _colorR, int32_t _colorG, int32_t _colorB, float _distance, float _brightness, float _roundness, float _radius, float _falloff, int32_t _shadowId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BCA583A583194DB);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_dirX);
	ctx->Push(_dirY);
	ctx->Push(_dirZ);
	ctx->Push(_colorR);
	ctx->Push(_colorG);
	ctx->Push(_colorB);
	ctx->Push(_distance);
	ctx->Push(_brightness);
	ctx->Push(_roundness);
	ctx->Push(_radius);
	ctx->Push(_falloff);
	ctx->Push(_shadowId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawSpotLightWithShadow call failed" << Log::Endl;
	}
}

EXPORT void Native_fadeUpPedLight(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9B18B4619F48F7B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native fadeUpPedLight call failed" << Log::Endl;
	}
}

EXPORT void Native_updateLightsOnEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEADC0DEDEADC0DE);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native updateLightsOnEntity call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9641588DAB93B4B5(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9641588DAB93B4B5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9641588DAB93B4B5 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x393BD2275CEB7793() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x393BD2275CEB7793);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x393BD2275CEB7793 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_drawMarker(int32_t _type, float _posX, float _posY, float _posZ, float _dirX, float _dirY, float _dirZ, float _rotX, float _rotY, float _rotZ, float _scaleX, float _scaleY, float _scaleZ, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, bool _bobUpAndDown, bool _faceCamera, int32_t _p19, bool _rotate, const char* _textureDict, const char* _textureName, bool _drawOnEnts) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28477EC23D892089);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_dirX);
	ctx->Push(_dirY);
	ctx->Push(_dirZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_scaleX);
	ctx->Push(_scaleY);
	ctx->Push(_scaleZ);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push(_bobUpAndDown);
	ctx->Push(_faceCamera);
	ctx->Push(_p19);
	ctx->Push(_rotate);
	ctx->Push(_textureDict);
	ctx->Push(_textureName);
	ctx->Push(_drawOnEnts);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawMarker call failed" << Log::Endl;
	}
}

EXPORT void Native_drawMarker2(int32_t _type, float _posX, float _posY, float _posZ, float _dirX, float _dirY, float _dirZ, float _rotX, float _rotY, float _rotZ, float _scaleX, float _scaleY, float _scaleZ, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, bool _bobUpAndDown, bool _faceCamera, int32_t _p19, bool _rotate, const char* _textureDict, const char* _textureName, bool _drawOnEnts, bool _p24, bool _p25) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE82728F0DE75D13A);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_dirX);
	ctx->Push(_dirY);
	ctx->Push(_dirZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_scaleX);
	ctx->Push(_scaleY);
	ctx->Push(_scaleZ);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push(_bobUpAndDown);
	ctx->Push(_faceCamera);
	ctx->Push(_p19);
	ctx->Push(_rotate);
	ctx->Push(_textureDict);
	ctx->Push(_textureName);
	ctx->Push(_drawOnEnts);
	ctx->Push(_p24);
	ctx->Push(_p25);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawMarker2 call failed" << Log::Endl;
	}
}

EXPORT void Native_drawSphere(float _x, float _y, float _z, float _radius, int32_t _red, int32_t _green, int32_t _blue, float _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x799017F9E3B10112);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawSphere call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_createCheckpoint(int32_t _type, float _posX1, float _posY1, float _posZ1, float _posX2, float _posY2, float _posZ2, float _diameter, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, int32_t _reserved) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0134F0835AB6BFCB);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_posX1);
	ctx->Push(_posY1);
	ctx->Push(_posZ1);
	ctx->Push(_posX2);
	ctx->Push(_posY2);
	ctx->Push(_posZ2);
	ctx->Push(_diameter);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push(_reserved);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createCheckpoint call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setCheckpointScale(int32_t _checkpoint, float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B5B4DA5D79F1943);
	ctx->Reset();
	ctx->Push(_checkpoint);
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCheckpointScale call failed" << Log::Endl;
	}
}

EXPORT void Native_setCheckpointIconScale(int32_t _checkpoint, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44621483FF966526);
	ctx->Reset();
	ctx->Push(_checkpoint);
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCheckpointIconScale call failed" << Log::Endl;
	}
}

EXPORT void Native_setCheckpointCylinderHeight(int32_t _checkpoint, float _nearHeight, float _farHeight, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2707AAE9D9297D89);
	ctx->Reset();
	ctx->Push(_checkpoint);
	ctx->Push(_nearHeight);
	ctx->Push(_farHeight);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCheckpointCylinderHeight call failed" << Log::Endl;
	}
}

EXPORT void Native_setCheckpointRgba(int32_t _checkpoint, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7167371E8AD747F7);
	ctx->Reset();
	ctx->Push(_checkpoint);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCheckpointRgba call failed" << Log::Endl;
	}
}

EXPORT void Native_setCheckpointRgba2(int32_t _checkpoint, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9EA40907C680580);
	ctx->Reset();
	ctx->Push(_checkpoint);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCheckpointRgba2 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF51D36185993515D(int32_t _checkpoint, float _posX, float _posY, float _posZ, float _unkX, float _unkY, float _unkZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF51D36185993515D);
	ctx->Reset();
	ctx->Push(_checkpoint);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_unkX);
	ctx->Push(_unkY);
	ctx->Push(_unkZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF51D36185993515D call failed" << Log::Endl;
	}
}

EXPORT void Native__0xFCF6788FC4860CD4(int32_t _checkpoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCF6788FC4860CD4);
	ctx->Reset();
	ctx->Push(_checkpoint);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFCF6788FC4860CD4 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x615D3925E87A3B26(int32_t _checkpoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x615D3925E87A3B26);
	ctx->Reset();
	ctx->Push(_checkpoint);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x615D3925E87A3B26 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xDB1EA9411C8911EC(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB1EA9411C8911EC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDB1EA9411C8911EC call failed" << Log::Endl;
	}
}

EXPORT void Native__0x3C788E7F6438754D(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C788E7F6438754D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3C788E7F6438754D call failed" << Log::Endl;
	}
}

EXPORT void Native_deleteCheckpoint(int32_t _checkpoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5ED37F54CD4D52E);
	ctx->Reset();
	ctx->Push(_checkpoint);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native deleteCheckpoint call failed" << Log::Endl;
	}
}

EXPORT void Native_dontRenderInGameUi(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22A249A53034450A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dontRenderInGameUi call failed" << Log::Endl;
	}
}

EXPORT void Native_forceRenderInGameUi(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC459CFA0CCE245B);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceRenderInGameUi call failed" << Log::Endl;
	}
}

EXPORT void Native_requestStreamedTextureDict(const char* _textureDict, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFA2EF8E04127DD5);
	ctx->Reset();
	ctx->Push(_textureDict);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestStreamedTextureDict call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasStreamedTextureDictLoaded(const char* _textureDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0145F696AAAAD2E4);
	ctx->Reset();
	ctx->Push(_textureDict);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasStreamedTextureDictLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setStreamedTextureDictAsNoLongerNeeded(const char* _textureDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE2CACCF5A8AA805);
	ctx->Reset();
	ctx->Push(_textureDict);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setStreamedTextureDictAsNoLongerNeeded call failed" << Log::Endl;
	}
}


const std::thread::id MAIN_THREAD_ID = std::this_thread::get_id();

EXPORT void Native_drawRect(float _x, float _y, float _width, float _height, int32_t _r, int32_t _g, int32_t _b, int32_t _a, bool _p8) {
    static auto native = alt::ICore::Instance().GetNativeByHash(0x3A618A217E5154F0);
    Log::Info << "executing on thread " << std::this_thread::get_id() << " main thread is " << MAIN_THREAD_ID << " is on main thread " << (MAIN_THREAD_ID == std::this_thread::get_id()) << Log::Endl;

    if (!native->IsValid()) {
        Log::Error << "Native drawRect is invalid" << Log::Endl;
        return;
    }

    Log::Info << "arguments: " << Log::Endl;
    auto types = native->GetArgTypes();
    for(auto type : types) {
        Log::Info << "type: " << (int) type << Log::Endl;
    }

    ctx->Reset();
    ctx->Push(_x);
    ctx->Push(_y);
    ctx->Push(_width);
    ctx->Push(_height);
    ctx->Push(_r);
    ctx->Push(_g);
    ctx->Push(_b);
    ctx->Push(_a);
    ctx->Push(_p8);
    Log::Info << "_p8 value was " << _p8 << Log::Endl;

    auto res = native->Invoke(ctx);
    if (!res) {
        Log::Error << "Native drawRect call failed" << Log::Endl;
    }

    Log::Info << "invoke result was " << res << Log::Endl;
}

EXPORT void Native_setScriptGfxDrawBehindPausemenu(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6372ECD45D73BCD);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScriptGfxDrawBehindPausemenu call failed" << Log::Endl;
	}
}

EXPORT void Native_setScriptGfxDrawOrder(int32_t _drawOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61BB1D9B3A95D802);
	ctx->Reset();
	ctx->Push(_drawOrder);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScriptGfxDrawOrder call failed" << Log::Endl;
	}
}

EXPORT void Native_setScriptGfxAlign(int32_t _horizontalAlign, int32_t _verticalAlign) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8A850F20A067EB6);
	ctx->Reset();
	ctx->Push(_horizontalAlign);
	ctx->Push(_verticalAlign);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScriptGfxAlign call failed" << Log::Endl;
	}
}

EXPORT void Native_resetScriptGfxAlign() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3A3DB414A373DAB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetScriptGfxAlign call failed" << Log::Endl;
	}
}

EXPORT void Native_setScriptGfxAlignParams(float _x, float _y, float _w, float _h) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5A2C681787E579D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_w);
	ctx->Push(_h);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScriptGfxAlignParams call failed" << Log::Endl;
	}
}

EXPORT void Native_getScriptGfxPosition(float _x, float _y, float& _calculatedX, float& _calculatedY) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6DD8F5AA635EB4B2);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_calculatedX);
	ctx->Push(_calculatedY);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getScriptGfxPosition call failed" << Log::Endl;
	}
}

EXPORT float Native_getSafeZoneSize() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAF107B6BB2C97F0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getSafeZoneSize call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_drawSprite(const char* _textureDict, const char* _textureName, float _screenX, float _screenY, float _width, float _height, float _heading, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, bool _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7FFAE5EBF23D890);
	ctx->Reset();
	ctx->Push(_textureDict);
	ctx->Push(_textureName);
	ctx->Push(_screenX);
	ctx->Push(_screenY);
	ctx->Push(_width);
	ctx->Push(_height);
	ctx->Push(_heading);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawSprite call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2D3B147AFAD49DE0(const char* _textureDict, const char* _textureName, float _x, float _y, float _width, float _height, float _p6, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, int32_t _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D3B147AFAD49DE0);
	ctx->Reset();
	ctx->Push(_textureDict);
	ctx->Push(_textureName);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_width);
	ctx->Push(_height);
	ctx->Push(_p6);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2D3B147AFAD49DE0 call failed" << Log::Endl;
	}
}

EXPORT void Native_drawInteractiveSprite(const char* _textureDict, const char* _textureName, float _screenX, float _screenY, float _width, float _height, float _heading, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2BC54A8188768488);
	ctx->Reset();
	ctx->Push(_textureDict);
	ctx->Push(_textureName);
	ctx->Push(_screenX);
	ctx->Push(_screenY);
	ctx->Push(_width);
	ctx->Push(_height);
	ctx->Push(_heading);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawInteractiveSprite call failed" << Log::Endl;
	}
}

EXPORT void Native_drawSpriteUv(const char* _textureDict, const char* _textureName, float _x, float _y, float _width, float _height, float _u1, float _v1, float _u2, float _v2, float _heading, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95812F9B26074726);
	ctx->Reset();
	ctx->Push(_textureDict);
	ctx->Push(_textureName);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_width);
	ctx->Push(_height);
	ctx->Push(_u1);
	ctx->Push(_v1);
	ctx->Push(_u2);
	ctx->Push(_v2);
	ctx->Push(_heading);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawSpriteUv call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_addEntityIcon(int32_t _entity, const char* _icon) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9CD43EEE12BF4DD0);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_icon);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addEntityIcon call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setEntityIconVisibility(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0E8BEECCA96BA31);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityIconVisibility call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityIconColor(int32_t _entity, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D5F595CCAE2E238);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityIconColor call failed" << Log::Endl;
	}
}

EXPORT void Native_setDrawOrigin(float _x, float _y, float _z, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA0008F3BBB8F416);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDrawOrigin call failed" << Log::Endl;
	}
}

EXPORT void Native_clearDrawOrigin() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF0B610F6BE0D7AF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearDrawOrigin call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_setBinkMovie(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x338D9F609FD632DB);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBinkMovie call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_playBinkMovie(int32_t _binkMovie) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70D2CC8A542A973C);
	ctx->Reset();
	ctx->Push(_binkMovie);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playBinkMovie call failed" << Log::Endl;
	}
}

EXPORT void Native_stopBinkMovie(int32_t _binkMovie) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63606A61DE68898A);
	ctx->Reset();
	ctx->Push(_binkMovie);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopBinkMovie call failed" << Log::Endl;
	}
}

EXPORT void Native_releaseBinkMovie(int32_t _binkMovie) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04D950EEFA4EED8C);
	ctx->Reset();
	ctx->Push(_binkMovie);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native releaseBinkMovie call failed" << Log::Endl;
	}
}

EXPORT void Native_drawBinkMovie(int32_t _binkMovie, float _p1, float _p2, float _p3, float _p4, float _p5, int32_t _r, int32_t _g, int32_t _b, int32_t _a) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7118E83EEB9F7238);
	ctx->Reset();
	ctx->Push(_binkMovie);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_a);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawBinkMovie call failed" << Log::Endl;
	}
}

EXPORT void Native_setBinkMovieTime(int32_t _binkMovie, float _progress) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CB6B3446855B57A);
	ctx->Reset();
	ctx->Push(_binkMovie);
	ctx->Push(_progress);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBinkMovieTime call failed" << Log::Endl;
	}
}

EXPORT float Native_getBinkMovieTime(int32_t _binkMovie) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E17DDD6B9D5BF29);
	ctx->Reset();
	ctx->Push(_binkMovie);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBinkMovieTime call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setBinkMovieVolume(int32_t _binkMovie, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFF33B1178172223);
	ctx->Reset();
	ctx->Push(_binkMovie);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBinkMovieVolume call failed" << Log::Endl;
	}
}

EXPORT void Native_attachTvAudioToEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x845BAD77CC770633);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachTvAudioToEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_setBinkMovieUnk2(int32_t _binkMovie, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF816F2933752322D);
	ctx->Reset();
	ctx->Push(_binkMovie);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBinkMovieUnk2 call failed" << Log::Endl;
	}
}

EXPORT void Native_setTvAudioFrontend(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x113D2C5DC57E1774);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTvAudioFrontend call failed" << Log::Endl;
	}
}

EXPORT void Native_setBinkShouldSkip(int32_t _binkMovie, bool _bShouldSkip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6805D58CAA427B72);
	ctx->Reset();
	ctx->Push(_binkMovie);
	ctx->Push(_bShouldSkip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBinkShouldSkip call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_loadMovieMeshSet(const char* _movieMeshSetName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB66064452270E8F1);
	ctx->Reset();
	ctx->Push(_movieMeshSetName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native loadMovieMeshSet call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_releaseMovieMeshSet(int32_t _movieMeshSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB119AA014E89183);
	ctx->Reset();
	ctx->Push(_movieMeshSet);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native releaseMovieMeshSet call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_queryMovieMeshSetState(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B6E70C5CEEF4EEB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native queryMovieMeshSetState call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_getScreenResolution(int32_t& _x, int32_t& _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x888D57E407E63624);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getScreenResolution call failed" << Log::Endl;
	}
}

EXPORT void Native_getActiveScreenResolution(int32_t& _x, int32_t& _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x873C9F3104101DD3);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getActiveScreenResolution call failed" << Log::Endl;
	}
}

EXPORT float Native_getAspectRatio(bool _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1307EF624A80D87);
	ctx->Reset();
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getAspectRatio call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native__0xB2EBE8CBC58B90E9() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2EBE8CBC58B90E9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB2EBE8CBC58B90E9 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getIsWidescreen() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30CF4BDA4FCB1905);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsWidescreen call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getIsHidef() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84ED31191CC5D2C9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsHidef call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xEFABC7722293DA7C() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFABC7722293DA7C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEFABC7722293DA7C call failed" << Log::Endl;
	}
}

EXPORT void Native_setNightvision(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x18F621F7A5B1F85D);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNightvision call failed" << Log::Endl;
	}
}

EXPORT bool Native_getRequestingnightvision() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35FB78DC42B7BD21);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRequestingnightvision call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getUsingnightvision() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2202A3F42C8E5F79);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getUsingnightvision call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xEF398BEEE4EF45F9(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF398BEEE4EF45F9);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEF398BEEE4EF45F9 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x814AF7DCAACC597B(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x814AF7DCAACC597B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x814AF7DCAACC597B call failed" << Log::Endl;
	}
}

EXPORT void Native__0x43FA7CBE20DAB219(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43FA7CBE20DAB219);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x43FA7CBE20DAB219 call failed" << Log::Endl;
	}
}

EXPORT void Native_setNoiseoveride(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE787BF1C5CF823C9);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNoiseoveride call failed" << Log::Endl;
	}
}

EXPORT void Native_setNoisinessoveride(float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB6A7C3BB17A0C67);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNoisinessoveride call failed" << Log::Endl;
	}
}

EXPORT bool Native_getScreenCoordFromWorldCoord(float _worldX, float _worldY, float _worldZ, float& _screenX, float& _screenY) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34E82F05DF2974F5);
	ctx->Reset();
	ctx->Push(_worldX);
	ctx->Push(_worldY);
	ctx->Push(_worldZ);
	ctx->Push(_screenX);
	ctx->Push(_screenY);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getScreenCoordFromWorldCoord call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT vector3_t Native_getTextureResolution(const char* _textureDict, const char* _textureName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35736EE65BD00C11);
	ctx->Reset();
	ctx->Push(_textureDict);
	ctx->Push(_textureName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTextureResolution call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT bool Native_overridePedBadgeTexture(int32_t _ped, const char* _txd, const char* _txn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95EB5E34F821BABE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_txd);
	ctx->Push(_txn);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native overridePedBadgeTexture call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xE2892E7E55D7073A(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2892E7E55D7073A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE2892E7E55D7073A call failed" << Log::Endl;
	}
}

EXPORT void Native_setFlash(float _p0, float _p1, float _fadeIn, float _duration, float _fadeOut) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AB84296FED9CFC6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_fadeIn);
	ctx->Push(_duration);
	ctx->Push(_fadeOut);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFlash call failed" << Log::Endl;
	}
}

EXPORT void Native_disableOcclusionThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3669F1B198DCAA4F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableOcclusionThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setArtificialLightsState(bool _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1268615ACE24D504);
	ctx->Reset();
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setArtificialLightsState call failed" << Log::Endl;
	}
}

EXPORT void Native_setArtificialLightsStateAffectsVehicles(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2B187C0939B3D32);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setArtificialLightsStateAffectsVehicles call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC35A6D07C93802B2() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC35A6D07C93802B2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC35A6D07C93802B2 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_createTrackedPoint() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2C9439ED45DEA60);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createTrackedPoint call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setTrackedPointInfo(int32_t _point, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x164ECBB3CF750CB0);
	ctx->Reset();
	ctx->Push(_point);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTrackedPointInfo call failed" << Log::Endl;
	}
}

EXPORT bool Native_isTrackedPointVisible(int32_t _point) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC45CCDAAC9221CA8);
	ctx->Reset();
	ctx->Push(_point);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isTrackedPointVisible call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_destroyTrackedPoint(int32_t _point) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB25DC90BAD56CA42);
	ctx->Reset();
	ctx->Push(_point);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native destroyTrackedPoint call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xBE197EAA669238F4(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE197EAA669238F4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBE197EAA669238F4 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x61F95E5BB3E0A8C6(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61F95E5BB3E0A8C6);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x61F95E5BB3E0A8C6 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xAE51BC858F32BA66(int32_t _p0, float _p1, float _p2, float _p3, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE51BC858F32BA66);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAE51BC858F32BA66 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x649C97D52332341A(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x649C97D52332341A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x649C97D52332341A call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x2C42340F916C5930(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C42340F916C5930);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2C42340F916C5930 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x14FC5833464340A8() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14FC5833464340A8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x14FC5833464340A8 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0218BA067D249DEA() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0218BA067D249DEA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0218BA067D249DEA call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1612C45F9E3E0D44() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1612C45F9E3E0D44);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1612C45F9E3E0D44 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5DEBD9C4DC995692() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DEBD9C4DC995692);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5DEBD9C4DC995692 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xAAE9BE70EC7C69AB(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAE9BE70EC7C69AB);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAAE9BE70EC7C69AB call failed" << Log::Endl;
	}
}

EXPORT void Native_grassLodShrinkScriptAreas(float _x, float _y, float _z, float _radius, float _p4, float _p5, float _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D955F6A9E0295B1);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native grassLodShrinkScriptAreas call failed" << Log::Endl;
	}
}

EXPORT void Native_grassLodResetScriptAreas() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x302C91AB2D477F7E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native grassLodResetScriptAreas call failed" << Log::Endl;
	}
}

EXPORT void Native_cascadeShadowsInitSession() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03FC694AE06C5A20);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cascadeShadowsInitSession call failed" << Log::Endl;
	}
}

EXPORT void Native_cascadeShadowsSetCascadeBounds(int32_t _p0, bool _p1, float _p2, float _p3, float _p4, float _p5, bool _p6, float _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2936CAB8B58FCBD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cascadeShadowsSetCascadeBounds call failed" << Log::Endl;
	}
}

EXPORT void Native_cascadeShadowsSetCascadeBoundsScale(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F0F3F56635809EF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cascadeShadowsSetCascadeBoundsScale call failed" << Log::Endl;
	}
}

EXPORT void Native_cascadeShadowsSetEntityTrackerScale(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E9DAF5A20F15908);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cascadeShadowsSetEntityTrackerScale call failed" << Log::Endl;
	}
}

EXPORT void Native__0x36F6626459D91457(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36F6626459D91457);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x36F6626459D91457 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x259BA6D4E6F808F1(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x259BA6D4E6F808F1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x259BA6D4E6F808F1 call failed" << Log::Endl;
	}
}

EXPORT void Native_cascadeShadowsEnableEntityTracker(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80ECBC0C856D3B0B);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cascadeShadowsEnableEntityTracker call failed" << Log::Endl;
	}
}

EXPORT void Native__0x25FC3E33A31AD0C9(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25FC3E33A31AD0C9);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x25FC3E33A31AD0C9 call failed" << Log::Endl;
	}
}

EXPORT void Native_cascadeShadowsSetShadowSampleType(const char* _type) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB11D94BC55F41932);
	ctx->Reset();
	ctx->Push(_type);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cascadeShadowsSetShadowSampleType call failed" << Log::Endl;
	}
}

EXPORT void Native_cascadeShadowsClearShadowSampleType() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27CB772218215325);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cascadeShadowsClearShadowSampleType call failed" << Log::Endl;
	}
}

EXPORT void Native_cascadeShadowsSetAircraftMode(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6DDBF9DFFC4AC080);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cascadeShadowsSetAircraftMode call failed" << Log::Endl;
	}
}

EXPORT void Native_cascadeShadowsSetDynamicDepthMode(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD39D13C9FEBF0511);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cascadeShadowsSetDynamicDepthMode call failed" << Log::Endl;
	}
}

EXPORT void Native_cascadeShadowsSetDynamicDepthValue(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02AC28F3A01FA04A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cascadeShadowsSetDynamicDepthValue call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0AE73D8DF3A762B2(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AE73D8DF3A762B2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0AE73D8DF3A762B2 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCA465D9CC0D231BA(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA465D9CC0D231BA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCA465D9CC0D231BA call failed" << Log::Endl;
	}
}

EXPORT void Native_golfTrailSetEnabled(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA51C4B86B71652AE);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native golfTrailSetEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native_golfTrailSetPath(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, bool _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x312342E1A4874F3F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native golfTrailSetPath call failed" << Log::Endl;
	}
}

EXPORT void Native_golfTrailSetRadius(float _p0, float _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2485D34E50A22E84);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native golfTrailSetRadius call failed" << Log::Endl;
	}
}

EXPORT void Native_golfTrailSetColour(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9, int32_t _p10, int32_t _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12995F2E53FFA601);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native golfTrailSetColour call failed" << Log::Endl;
	}
}

EXPORT void Native_golfTrailSetTessellation(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBAA5EC848BA2D46);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native golfTrailSetTessellation call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC0416B061F2B7E5E(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0416B061F2B7E5E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC0416B061F2B7E5E call failed" << Log::Endl;
	}
}

EXPORT void Native_golfTrailSetFixedControlPoint(int32_t _type, float _xPos, float _yPos, float _zPos, float _p4, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1BB03742917A5D6);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_p4);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native golfTrailSetFixedControlPoint call failed" << Log::Endl;
	}
}

EXPORT void Native_golfTrailSetShaderParams(float _p0, float _p1, float _p2, float _p3, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9CFDD90B2B844BF7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native golfTrailSetShaderParams call failed" << Log::Endl;
	}
}

EXPORT void Native_golfTrailSetFacing(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06F761EA47C1D3ED);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native golfTrailSetFacing call failed" << Log::Endl;
	}
}

EXPORT float Native_golfTrailGetMaxHeight() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4819F5E23E2FFAD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native golfTrailGetMaxHeight call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT vector3_t Native_golfTrailGetVisualControlPoint(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4664972A9B8F8BA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native golfTrailGetVisualControlPoint call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT void Native_setSeethrough(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E08924259E08CE0);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSeethrough call failed" << Log::Endl;
	}
}

EXPORT bool Native_getUsingseethrough() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44B80ABAB9D80BD3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getUsingseethrough call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_seethroughReset() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70A64C0234EF522C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native seethroughReset call failed" << Log::Endl;
	}
}

EXPORT void Native_seethroughSetFadeStartDistance(float _distance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA78DE25577300BA1);
	ctx->Reset();
	ctx->Push(_distance);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native seethroughSetFadeStartDistance call failed" << Log::Endl;
	}
}

EXPORT void Native_seethroughSetFadeEndDistance(float _distance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D75795B9DC6EBBF);
	ctx->Reset();
	ctx->Push(_distance);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native seethroughSetFadeEndDistance call failed" << Log::Endl;
	}
}

EXPORT float Native_seethroughGetMaxThickness() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43DBAE39626CE83F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native seethroughGetMaxThickness call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_seethroughSetMaxThickness(float _thickness) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C8FAC83902A62DF);
	ctx->Reset();
	ctx->Push(_thickness);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native seethroughSetMaxThickness call failed" << Log::Endl;
	}
}

EXPORT void Native_seethroughSetNoiseAmountMin(float _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF5992E1C9E65D05);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native seethroughSetNoiseAmountMin call failed" << Log::Endl;
	}
}

EXPORT void Native_seethroughSetNoiseAmountMax(float _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEBFBFDFB66039DE);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native seethroughSetNoiseAmountMax call failed" << Log::Endl;
	}
}

EXPORT void Native_seethroughSetHiLightIntensity(float _intensity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19E50EB6E33E1D28);
	ctx->Reset();
	ctx->Push(_intensity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native seethroughSetHiLightIntensity call failed" << Log::Endl;
	}
}

EXPORT void Native_seethroughSetHiLightNoise(float _noise) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1636D7FC127B10D2);
	ctx->Reset();
	ctx->Push(_noise);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native seethroughSetHiLightNoise call failed" << Log::Endl;
	}
}

EXPORT void Native_seethroughSetHeatscale(int32_t _index, float _heatScale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7D0B00177485411);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_heatScale);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native seethroughSetHeatscale call failed" << Log::Endl;
	}
}

EXPORT void Native_seethroughSetColorNear(int32_t _red, int32_t _green, int32_t _blue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1086127B3A63505E);
	ctx->Reset();
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native seethroughSetColorNear call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB3C641F3630BF6DA(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3C641F3630BF6DA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB3C641F3630BF6DA call failed" << Log::Endl;
	}
}

EXPORT float Native__0xE59343E9E96529E7() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE59343E9E96529E7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE59343E9E96529E7 call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native__0x6A51F78772175A51(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A51F78772175A51);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6A51F78772175A51 call failed" << Log::Endl;
	}
}

EXPORT void Native_togglePlayerDamageOverlay(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE63D7C6EECECB66B);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native togglePlayerDamageOverlay call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE3E2C1B4C59DBC77(int32_t _unk) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3E2C1B4C59DBC77);
	ctx->Reset();
	ctx->Push(_unk);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE3E2C1B4C59DBC77 call failed" << Log::Endl;
	}
}

EXPORT bool Native_triggerScreenblurFadeIn(float _transitionTime) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA328A24AAA6B7FDC);
	ctx->Reset();
	ctx->Push(_transitionTime);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native triggerScreenblurFadeIn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_triggerScreenblurFadeOut(float _transitionTime) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFACC8AEF94430D5);
	ctx->Reset();
	ctx->Push(_transitionTime);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native triggerScreenblurFadeOut call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_disableScreenblurFade() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE81239437E8C5A8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableScreenblurFade call failed" << Log::Endl;
	}
}

EXPORT float Native_getScreenblurFadeCurrentTime() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CCABFFCA31DDE33);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getScreenblurFadeCurrentTime call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT bool Native_isScreenblurFadeRunning() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B226C785A52A0A9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScreenblurFadeRunning call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_togglePausedRenderphases(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFC252D8A3E15AB7);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native togglePausedRenderphases call failed" << Log::Endl;
	}
}

EXPORT bool Native_getTogglePausedRenderphasesStatus() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB3DAC2C86001E5E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTogglePausedRenderphasesStatus call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_resetPausedRenderphases() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1C8709406F2C41C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetPausedRenderphases call failed" << Log::Endl;
	}
}

EXPORT void Native__0x851CD923176EBA7C() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x851CD923176EBA7C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x851CD923176EBA7C call failed" << Log::Endl;
	}
}

EXPORT void Native_setHidofEnvBlurParams(bool _p0, bool _p1, float _nearplaneOut, float _nearplaneIn, float _farplaneOut, float _farplaneIn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA3D65906822BED5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_nearplaneOut);
	ctx->Push(_nearplaneIn);
	ctx->Push(_farplaneOut);
	ctx->Push(_farplaneIn);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHidofEnvBlurParams call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB569F41F3E7E83A4(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB569F41F3E7E83A4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB569F41F3E7E83A4 call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x7AC24EAB6D74118D(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7AC24EAB6D74118D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7AC24EAB6D74118D call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xBCEDB009461DA156() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCEDB009461DA156);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBCEDB009461DA156 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x27FEB5254759CDE3(const char* _textureDict, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27FEB5254759CDE3);
	ctx->Reset();
	ctx->Push(_textureDict);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x27FEB5254759CDE3 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_startParticleFxNonLoopedAtCoord(const char* _effectName, float _xPos, float _yPos, float _zPos, float _xRot, float _yRot, float _zRot, float _scale, bool _xAxis, bool _yAxis, bool _zAxis) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25129531F77B9ED3);
	ctx->Reset();
	ctx->Push(_effectName);
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_scale);
	ctx->Push(_xAxis);
	ctx->Push(_yAxis);
	ctx->Push(_zAxis);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startParticleFxNonLoopedAtCoord call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_startNetworkedParticleFxNonLoopedAtCoord(const char* _effectName, float _xPos, float _yPos, float _zPos, float _xRot, float _yRot, float _zRot, float _scale, bool _xAxis, bool _yAxis, bool _zAxis, bool _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF56B8137DF10135D);
	ctx->Reset();
	ctx->Push(_effectName);
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_scale);
	ctx->Push(_xAxis);
	ctx->Push(_yAxis);
	ctx->Push(_zAxis);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startNetworkedParticleFxNonLoopedAtCoord call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_startParticleFxNonLoopedOnPedBone(const char* _effectName, int32_t _ped, float _offsetX, float _offsetY, float _offsetZ, float _rotX, float _rotY, float _rotZ, int32_t _boneIndex, float _scale, bool _axisX, bool _axisY, bool _axisZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E7E72961BA18619);
	ctx->Reset();
	ctx->Push(_effectName);
	ctx->Push(_ped);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_boneIndex);
	ctx->Push(_scale);
	ctx->Push(_axisX);
	ctx->Push(_axisY);
	ctx->Push(_axisZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startParticleFxNonLoopedOnPedBone call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_startNetworkedParticleFxNonLoopedOnPedBone(const char* _effectName, int32_t _ped, float _offsetX, float _offsetY, float _offsetZ, float _rotX, float _rotY, float _rotZ, int32_t _boneIndex, float _scale, bool _axisX, bool _axisY, bool _axisZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA41B6A43642AC2CF);
	ctx->Reset();
	ctx->Push(_effectName);
	ctx->Push(_ped);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_boneIndex);
	ctx->Push(_scale);
	ctx->Push(_axisX);
	ctx->Push(_axisY);
	ctx->Push(_axisZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startNetworkedParticleFxNonLoopedOnPedBone call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_startParticleFxNonLoopedOnEntity(const char* _effectName, int32_t _entity, float _offsetX, float _offsetY, float _offsetZ, float _rotX, float _rotY, float _rotZ, float _scale, bool _axisX, bool _axisY, bool _axisZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D53A3B8DA0809D2);
	ctx->Reset();
	ctx->Push(_effectName);
	ctx->Push(_entity);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_scale);
	ctx->Push(_axisX);
	ctx->Push(_axisY);
	ctx->Push(_axisZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startParticleFxNonLoopedOnEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_startNetworkedParticleFxNonLoopedOnEntity(const char* _effectName, int32_t _entity, float _offsetX, float _offsetY, float _offsetZ, float _rotX, float _rotY, float _rotZ, float _scale, bool _axisX, bool _axisY, bool _axisZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC95EB1DB6E92113D);
	ctx->Reset();
	ctx->Push(_effectName);
	ctx->Push(_entity);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_scale);
	ctx->Push(_axisX);
	ctx->Push(_axisY);
	ctx->Push(_axisZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startNetworkedParticleFxNonLoopedOnEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_startNetworkedParticleFxNonLoopedOnEntityBone(const char* _effectName, int32_t _entity, float _offsetX, float _offsetY, float _offsetZ, float _rotX, float _rotY, float _rotZ, int32_t _boneIndex, float _scale, bool _axisX, bool _axisY, bool _axisZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02B1F2A72E0F5325);
	ctx->Reset();
	ctx->Push(_effectName);
	ctx->Push(_entity);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_boneIndex);
	ctx->Push(_scale);
	ctx->Push(_axisX);
	ctx->Push(_axisY);
	ctx->Push(_axisZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startNetworkedParticleFxNonLoopedOnEntityBone call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setParticleFxNonLoopedColour(float _r, float _g, float _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26143A59EF48B262);
	ctx->Reset();
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setParticleFxNonLoopedColour call failed" << Log::Endl;
	}
}

EXPORT void Native_setParticleFxNonLoopedAlpha(float _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77168D722C58B2FC);
	ctx->Reset();
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setParticleFxNonLoopedAlpha call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8CDE909A0370BB3A(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8CDE909A0370BB3A);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8CDE909A0370BB3A call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_startParticleFxLoopedAtCoord(const char* _effectName, float _x, float _y, float _z, float _xRot, float _yRot, float _zRot, float _scale, bool _xAxis, bool _yAxis, bool _zAxis, bool _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE184F4F0DC5910E7);
	ctx->Reset();
	ctx->Push(_effectName);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_scale);
	ctx->Push(_xAxis);
	ctx->Push(_yAxis);
	ctx->Push(_zAxis);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startParticleFxLoopedAtCoord call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_startParticleFxLoopedOnPedBone(const char* _effectName, int32_t _ped, float _xOffset, float _yOffset, float _zOffset, float _xRot, float _yRot, float _zRot, int32_t _boneIndex, float _scale, bool _xAxis, bool _yAxis, bool _zAxis) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF28DA9F38CD1787C);
	ctx->Reset();
	ctx->Push(_effectName);
	ctx->Push(_ped);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_boneIndex);
	ctx->Push(_scale);
	ctx->Push(_xAxis);
	ctx->Push(_yAxis);
	ctx->Push(_zAxis);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startParticleFxLoopedOnPedBone call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_startParticleFxLoopedOnEntity(const char* _effectName, int32_t _entity, float _xOffset, float _yOffset, float _zOffset, float _xRot, float _yRot, float _zRot, float _scale, bool _xAxis, bool _yAxis, bool _zAxis) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1AE42C1660FD6517);
	ctx->Reset();
	ctx->Push(_effectName);
	ctx->Push(_entity);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_scale);
	ctx->Push(_xAxis);
	ctx->Push(_yAxis);
	ctx->Push(_zAxis);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startParticleFxLoopedOnEntity call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_startParticleFxLoopedOnEntityBone(const char* _effectName, int32_t _entity, float _xOffset, float _yOffset, float _zOffset, float _xRot, float _yRot, float _zRot, int32_t _boneIndex, float _scale, bool _xAxis, bool _yAxis, bool _zAxis) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6EB449E33977F0B);
	ctx->Reset();
	ctx->Push(_effectName);
	ctx->Push(_entity);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_boneIndex);
	ctx->Push(_scale);
	ctx->Push(_xAxis);
	ctx->Push(_yAxis);
	ctx->Push(_zAxis);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startParticleFxLoopedOnEntityBone call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_startNetworkedParticleFxLoopedOnEntity(const char* _effectName, int32_t _entity, float _xOffset, float _yOffset, float _zOffset, float _xRot, float _yRot, float _zRot, float _scale, bool _xAxis, bool _yAxis, bool _zAxis, int32_t _p12, int32_t _p13, int32_t _p14, int32_t _p15) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F60E89A7B64EE1D);
	ctx->Reset();
	ctx->Push(_effectName);
	ctx->Push(_entity);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_scale);
	ctx->Push(_xAxis);
	ctx->Push(_yAxis);
	ctx->Push(_zAxis);
	ctx->Push(_p12);
	ctx->Push(_p13);
	ctx->Push(_p14);
	ctx->Push(_p15);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startNetworkedParticleFxLoopedOnEntity call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_startNetworkedParticleFxLoopedOnEntityBone(const char* _effectName, int32_t _entity, float _xOffset, float _yOffset, float _zOffset, float _xRot, float _yRot, float _zRot, int32_t _boneIndex, float _scale, bool _xAxis, bool _yAxis, bool _zAxis, int32_t _p13, int32_t _p14, int32_t _p15, int32_t _p16) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDDE23F30CC5A0F03);
	ctx->Reset();
	ctx->Push(_effectName);
	ctx->Push(_entity);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_boneIndex);
	ctx->Push(_scale);
	ctx->Push(_xAxis);
	ctx->Push(_yAxis);
	ctx->Push(_zAxis);
	ctx->Push(_p13);
	ctx->Push(_p14);
	ctx->Push(_p15);
	ctx->Push(_p16);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startNetworkedParticleFxLoopedOnEntityBone call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_stopParticleFxLooped(int32_t _ptfxHandle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F75998877616996);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopParticleFxLooped call failed" << Log::Endl;
	}
}

EXPORT void Native_removeParticleFx(int32_t _ptfxHandle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC401503DFE8D53CF);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeParticleFx call failed" << Log::Endl;
	}
}

EXPORT void Native_removeParticleFxFromEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8FEAEEBCC127425);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeParticleFxFromEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_removeParticleFxInRange(float _X, float _Y, float _Z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD19FA1C6D657305);
	ctx->Reset();
	ctx->Push(_X);
	ctx->Push(_Y);
	ctx->Push(_Z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeParticleFxInRange call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBA0127DA25FD54C9(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA0127DA25FD54C9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBA0127DA25FD54C9 call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesParticleFxLoopedExist(int32_t _ptfxHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74AFEF0D2E1E409B);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesParticleFxLoopedExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setParticleFxLoopedOffsets(int32_t _ptfxHandle, float _x, float _y, float _z, float _rotX, float _rotY, float _rotZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7DDEBEC43483C43);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setParticleFxLoopedOffsets call failed" << Log::Endl;
	}
}

EXPORT void Native_setParticleFxLoopedEvolution(int32_t _ptfxHandle, const char* _propertyName, float _amount, bool _noNetwork) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F0C4B5B1C393BE2);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	ctx->Push(_propertyName);
	ctx->Push(_amount);
	ctx->Push(_noNetwork);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setParticleFxLoopedEvolution call failed" << Log::Endl;
	}
}

EXPORT void Native_setParticleFxLoopedColour(int32_t _ptfxHandle, float _r, float _g, float _b, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F8F65877F88783B);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setParticleFxLoopedColour call failed" << Log::Endl;
	}
}

EXPORT void Native_setParticleFxLoopedAlpha(int32_t _ptfxHandle, float _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x726845132380142E);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setParticleFxLoopedAlpha call failed" << Log::Endl;
	}
}

EXPORT void Native_setParticleFxLoopedScale(int32_t _ptfxHandle, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB44250AAA456492D);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setParticleFxLoopedScale call failed" << Log::Endl;
	}
}

EXPORT void Native_setParticleFxLoopedFarClipDist(int32_t _ptfxHandle, float _range) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCB194B85EF7B541);
	ctx->Reset();
	ctx->Push(_ptfxHandle);
	ctx->Push(_range);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setParticleFxLoopedFarClipDist call failed" << Log::Endl;
	}
}

EXPORT void Native_setParticleFxCamInsideVehicle(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEC4047028426510);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setParticleFxCamInsideVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setParticleFxCamInsideNonplayerVehicle(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xACEE6F360FC1F6B6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setParticleFxCamInsideNonplayerVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setParticleFxShootoutBoat(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x96EF97DAEB89BEF5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setParticleFxShootoutBoat call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2A251AA48B2B46DB() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A251AA48B2B46DB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2A251AA48B2B46DB call failed" << Log::Endl;
	}
}

EXPORT void Native__0x908311265D42A820(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x908311265D42A820);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x908311265D42A820 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCFD16F0DB5A3535C(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFD16F0DB5A3535C);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCFD16F0DB5A3535C call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5F6DF3D92271E8A1(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F6DF3D92271E8A1);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5F6DF3D92271E8A1 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2B40A97646381508(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B40A97646381508);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2B40A97646381508 call failed" << Log::Endl;
	}
}

EXPORT void Native_enableClownBloodVfx(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD821490579791273);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableClownBloodVfx call failed" << Log::Endl;
	}
}

EXPORT void Native_enableAlienBloodVfx(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DCE1F0F78260875);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableAlienBloodVfx call failed" << Log::Endl;
	}
}

EXPORT void Native_setParticleFxBulletImpactScale(float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27E32866E9A5C416);
	ctx->Reset();
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setParticleFxBulletImpactScale call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBB90E12CAC1DAB25(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB90E12CAC1DAB25);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBB90E12CAC1DAB25 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCA4AE345A153D573(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA4AE345A153D573);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCA4AE345A153D573 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x54E22EA2C1956A8D(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54E22EA2C1956A8D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x54E22EA2C1956A8D call failed" << Log::Endl;
	}
}

EXPORT void Native__0x949F397A288B28B3(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x949F397A288B28B3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x949F397A288B28B3 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBA3D194057C79A7B(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA3D194057C79A7B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBA3D194057C79A7B call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5DBF05DB5926D089(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DBF05DB5926D089);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5DBF05DB5926D089 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9B079E5221D984D3(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B079E5221D984D3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9B079E5221D984D3 call failed" << Log::Endl;
	}
}

EXPORT void Native_useParticleFxAsset(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C38AF3693A69A91);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native useParticleFxAsset call failed" << Log::Endl;
	}
}

EXPORT void Native_setParticleFxOverride(const char* _oldAsset, const char* _newAsset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA1E2D93F6F75ED9);
	ctx->Reset();
	ctx->Push(_oldAsset);
	ctx->Push(_newAsset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setParticleFxOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_resetParticleFxOverride(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89C8553DD3274AAE);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetParticleFxOverride call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA46B73FAA3460AE1(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA46B73FAA3460AE1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA46B73FAA3460AE1 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF78B803082D4386F(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF78B803082D4386F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF78B803082D4386F call failed" << Log::Endl;
	}
}

EXPORT void Native_washDecalsInRange(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C30613D50A6ADEF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native washDecalsInRange call failed" << Log::Endl;
	}
}

EXPORT void Native_washDecalsFromVehicle(int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B712761429DBC14);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native washDecalsFromVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_fadeDecalsInRange(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD77EDADB0420E6E0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native fadeDecalsInRange call failed" << Log::Endl;
	}
}

EXPORT void Native_removeDecalsInRange(float _x, float _y, float _z, float _range) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D6B2D4830A67C62);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_range);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeDecalsInRange call failed" << Log::Endl;
	}
}

EXPORT void Native_removeDecalsFromObject(int32_t _obj) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCF71CBDDF5B6CB9);
	ctx->Reset();
	ctx->Push(_obj);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeDecalsFromObject call failed" << Log::Endl;
	}
}

EXPORT void Native_removeDecalsFromObjectFacing(int32_t _obj, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6F6F70FDC6D144C);
	ctx->Reset();
	ctx->Push(_obj);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeDecalsFromObjectFacing call failed" << Log::Endl;
	}
}

EXPORT void Native_removeDecalsFromVehicle(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE91F1B65F2B48D57);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeDecalsFromVehicle call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_addDecal(int32_t _decalType, float _posX, float _posY, float _posZ, float _p4, float _p5, float _p6, float _p7, float _p8, float _p9, float _width, float _height, float _rCoef, float _gCoef, float _bCoef, float _opacity, float _timeout, bool _p17, bool _p18, bool _p19) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB302244A1839BDAD);
	ctx->Reset();
	ctx->Push(_decalType);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_width);
	ctx->Push(_height);
	ctx->Push(_rCoef);
	ctx->Push(_gCoef);
	ctx->Push(_bCoef);
	ctx->Push(_opacity);
	ctx->Push(_timeout);
	ctx->Push(_p17);
	ctx->Push(_p18);
	ctx->Push(_p19);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addDecal call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_addPetrolDecal(float _x, float _y, float _z, float _groundLvl, float _width, float _transparency) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F5212C7AD880DF8);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_groundLvl);
	ctx->Push(_width);
	ctx->Push(_transparency);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addPetrolDecal call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_startPetrolTrailDecals(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99AC7F0D8B9C893D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startPetrolTrailDecals call failed" << Log::Endl;
	}
}

EXPORT void Native_addPetrolTrailDecalInfo(float _x, float _y, float _z, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x967278682CB6967A);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addPetrolTrailDecalInfo call failed" << Log::Endl;
	}
}

EXPORT void Native_endPetrolTrailDecals() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A123435A26C36CD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endPetrolTrailDecals call failed" << Log::Endl;
	}
}

EXPORT void Native_removeDecal(int32_t _decal) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED3F346429CCD659);
	ctx->Reset();
	ctx->Push(_decal);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeDecal call failed" << Log::Endl;
	}
}

EXPORT bool Native_isDecalAlive(int32_t _decal) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC694D74949CAFD0C);
	ctx->Reset();
	ctx->Push(_decal);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isDecalAlive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT float Native_getDecalWashLevel(int32_t _decal) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x323F647679A09103);
	ctx->Reset();
	ctx->Push(_decal);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDecalWashLevel call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native__0xD9454B5752C857DC() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9454B5752C857DC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD9454B5752C857DC call failed" << Log::Endl;
	}
}

EXPORT void Native__0x27CFB1B1E078CB2D() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27CFB1B1E078CB2D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x27CFB1B1E078CB2D call failed" << Log::Endl;
	}
}

EXPORT void Native_setDisableDecalRenderingThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B5CFC83122DF602);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDisableDecalRenderingThisFrame call failed" << Log::Endl;
	}
}

EXPORT bool Native_getIsPetrolDecalInRange(float _xCoord, float _yCoord, float _zCoord, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F09F7976C512404);
	ctx->Reset();
	ctx->Push(_xCoord);
	ctx->Push(_yCoord);
	ctx->Push(_zCoord);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsPetrolDecalInRange call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_patchDecalDiffuseMap(int32_t _decalType, const char* _textureDict, const char* _textureName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A35C742130C6080);
	ctx->Reset();
	ctx->Push(_decalType);
	ctx->Push(_textureDict);
	ctx->Push(_textureName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native patchDecalDiffuseMap call failed" << Log::Endl;
	}
}

EXPORT void Native_unpatchDecalDiffuseMap(int32_t _decalType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7ED70C49521A61D);
	ctx->Reset();
	ctx->Push(_decalType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native unpatchDecalDiffuseMap call failed" << Log::Endl;
	}
}

EXPORT void Native_moveVehicleDecals(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84C8D7C2D30D3280);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native moveVehicleDecals call failed" << Log::Endl;
	}
}

EXPORT bool Native_addVehicleCrewEmblem(int32_t _vehicle, int32_t _ped, int32_t _boneIndex, float _x1, float _x2, float _x3, float _y1, float _y2, float _y3, float _z1, float _z2, float _z3, float _scale, int32_t _p13, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x428BDCB9DA58DA53);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_ped);
	ctx->Push(_boneIndex);
	ctx->Push(_x1);
	ctx->Push(_x2);
	ctx->Push(_x3);
	ctx->Push(_y1);
	ctx->Push(_y2);
	ctx->Push(_y3);
	ctx->Push(_z1);
	ctx->Push(_z2);
	ctx->Push(_z3);
	ctx->Push(_scale);
	ctx->Push(_p13);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addVehicleCrewEmblem call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x82ACC484FFA3B05F(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82ACC484FFA3B05F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x82ACC484FFA3B05F call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_removeVehicleCrewEmblem(int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2300034310557E4);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeVehicleCrewEmblem call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehicleCrewEmblemRequestState(int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE26117A5841B2FF);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleCrewEmblemRequestState call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_doesVehicleHaveCrewEmblem(int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x060D935D3981A275);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesVehicleHaveCrewEmblem call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x0E4299C549F0D1F1(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E4299C549F0D1F1);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0E4299C549F0D1F1 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x02369D5C8A51FDCF(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02369D5C8A51FDCF);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x02369D5C8A51FDCF call failed" << Log::Endl;
	}
}

EXPORT void Native__0x46D1A61A21F566FC(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46D1A61A21F566FC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x46D1A61A21F566FC call failed" << Log::Endl;
	}
}

EXPORT void Native_overrideInteriorSmokeName(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A2A52824DB96700);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native overrideInteriorSmokeName call failed" << Log::Endl;
	}
}

EXPORT void Native_overrideInteriorSmokeLevel(float _level) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1600FD8CF72EBC12);
	ctx->Reset();
	ctx->Push(_level);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native overrideInteriorSmokeLevel call failed" << Log::Endl;
	}
}

EXPORT void Native_overrideInteriorSmokeEnd() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFB55E7C25D3B3BE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native overrideInteriorSmokeEnd call failed" << Log::Endl;
	}
}

EXPORT void Native_registerNoirScreenEffectThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA44FF770DFBC5DAE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerNoirScreenEffectThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_disableVehicleDistantlights(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9F98AC1884E73A2);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableVehicleDistantlights call failed" << Log::Endl;
	}
}

EXPORT void Native__0x03300B57FCAC6DDB(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03300B57FCAC6DDB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x03300B57FCAC6DDB call failed" << Log::Endl;
	}
}

EXPORT void Native__0x98EDF76A7271E4F2() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98EDF76A7271E4F2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x98EDF76A7271E4F2 call failed" << Log::Endl;
	}
}

EXPORT void Native_setForcePedFootstepsTracks(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAEEDAD1420C65CC0);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setForcePedFootstepsTracks call failed" << Log::Endl;
	}
}

EXPORT void Native_setForceVehicleTrails(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4CC7F0FEA5283FE0);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setForceVehicleTrails call failed" << Log::Endl;
	}
}

EXPORT void Native_disableScriptAmbientEffects(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFD97FF47B745B8D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableScriptAmbientEffects call failed" << Log::Endl;
	}
}

EXPORT void Native_presetInteriorAmbientCache(const char* _timecycleModifierName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7021272EB0A451E);
	ctx->Reset();
	ctx->Push(_timecycleModifierName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native presetInteriorAmbientCache call failed" << Log::Endl;
	}
}

EXPORT void Native_setTimecycleModifier(const char* _modifierName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C933ABF17A1DF41);
	ctx->Reset();
	ctx->Push(_modifierName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTimecycleModifier call failed" << Log::Endl;
	}
}

EXPORT void Native_setTimecycleModifierStrength(float _strength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82E7FFCD5B2326B3);
	ctx->Reset();
	ctx->Push(_strength);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTimecycleModifierStrength call failed" << Log::Endl;
	}
}

EXPORT void Native_setTransitionTimecycleModifier(const char* _modifierName, float _transition) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BCF567485E1971C);
	ctx->Reset();
	ctx->Push(_modifierName);
	ctx->Push(_transition);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTransitionTimecycleModifier call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1CBA05AE7BD7EE05(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CBA05AE7BD7EE05);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1CBA05AE7BD7EE05 call failed" << Log::Endl;
	}
}

EXPORT void Native_clearTimecycleModifier() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F07E7745A236711);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearTimecycleModifier call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getTimecycleModifierIndex() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDF3D97C674AFB66);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTimecycleModifierIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getTimecycleTransitionModifierIndex() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x459FD2C8D0AB78BC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTimecycleTransitionModifierIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x98D18905BF723B99() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98D18905BF723B99);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x98D18905BF723B99 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_pushTimecycleModifier() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58F735290861E6B4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pushTimecycleModifier call failed" << Log::Endl;
	}
}

EXPORT void Native_popTimecycleModifier() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C8938D7D872211E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native popTimecycleModifier call failed" << Log::Endl;
	}
}

EXPORT void Native_setCurrentPlayerTcmodifier(const char* _modifierName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBF327DED94E4DEB);
	ctx->Reset();
	ctx->Push(_modifierName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCurrentPlayerTcmodifier call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerTcmodifierTransition(float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBDEB86F4D5809204);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerTcmodifierTransition call failed" << Log::Endl;
	}
}

EXPORT void Native_setNextPlayerTcmodifier(const char* _modifierName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF59707B3E5ED531);
	ctx->Reset();
	ctx->Push(_modifierName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNextPlayerTcmodifier call failed" << Log::Endl;
	}
}

EXPORT void Native_addTcmodifierOverride(const char* _modifierName1, const char* _modifierName2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A8E2C8B9CF4549C);
	ctx->Reset();
	ctx->Push(_modifierName1);
	ctx->Push(_modifierName2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addTcmodifierOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_removeTcmodifierOverride(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15E33297C3E8DC60);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeTcmodifierOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_setExtraTimecycleModifier(const char* _modifierName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5096FD9CCB49056D);
	ctx->Reset();
	ctx->Push(_modifierName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setExtraTimecycleModifier call failed" << Log::Endl;
	}
}

EXPORT void Native_clearExtraTimecycleModifier() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92CCC17A7A2285DA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearExtraTimecycleModifier call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getExtraTimecycleModifierIndex() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB0527EC6341496D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getExtraTimecycleModifierIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setExtraTimecycleModifierStrength(float _strength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C328AF17210F009);
	ctx->Reset();
	ctx->Push(_strength);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setExtraTimecycleModifierStrength call failed" << Log::Endl;
	}
}

EXPORT void Native_resetExtraTimecycleModifierStrength() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2BF72AD5B41AA739);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetExtraTimecycleModifierStrength call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_requestScaleformMovie(const char* _scaleformName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11FE353CF9733E6F);
	ctx->Reset();
	ctx->Push(_scaleformName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestScaleformMovie call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_requestScaleformMovieInstance(const char* _scaleformName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC514489CFB8AF806);
	ctx->Reset();
	ctx->Push(_scaleformName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestScaleformMovieInstance call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_requestScaleformMovieInteractive(const char* _scaleformName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD06C611BB9048C2);
	ctx->Reset();
	ctx->Push(_scaleformName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestScaleformMovieInteractive call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_hasScaleformMovieLoaded(int32_t _scaleformHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85F01B8D5B90570E);
	ctx->Reset();
	ctx->Push(_scaleformHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasScaleformMovieLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x2FCB133CA50A49EB(int32_t _val) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FCB133CA50A49EB);
	ctx->Reset();
	ctx->Push(_val);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2FCB133CA50A49EB call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x86255B1FC929E33E(int32_t _val) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x86255B1FC929E33E);
	ctx->Reset();
	ctx->Push(_val);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x86255B1FC929E33E call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasScaleformMovieFilenameLoaded(const char* _scaleformName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C1C5D756FB5F337);
	ctx->Reset();
	ctx->Push(_scaleformName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasScaleformMovieFilenameLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasScaleformContainerMovieLoadedIntoParent(int32_t _scaleformHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8217150E1217EBFD);
	ctx->Reset();
	ctx->Push(_scaleformHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasScaleformContainerMovieLoadedIntoParent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setScaleformMovieAsNoLongerNeeded(int32_t& _scaleformHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D132D614DD86811);
	ctx->Reset();
	ctx->Push(_scaleformHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScaleformMovieAsNoLongerNeeded call failed" << Log::Endl;
	}
}

EXPORT void Native_setScaleformMovieToUseSystemTime(int32_t _scaleform, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D8EB211944DCE08);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScaleformMovieToUseSystemTime call failed" << Log::Endl;
	}
}

EXPORT void Native__0x32F34FF7F617643B(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32F34FF7F617643B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x32F34FF7F617643B call failed" << Log::Endl;
	}
}

EXPORT void Native_setScaleformFitRendertarget(int32_t _scaleformHandle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6A9F00D4240B519);
	ctx->Reset();
	ctx->Push(_scaleformHandle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScaleformFitRendertarget call failed" << Log::Endl;
	}
}

EXPORT void Native_drawScaleformMovie(int32_t _scaleformHandle, float _x, float _y, float _width, float _height, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, int32_t _unk) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54972ADAF0294A93);
	ctx->Reset();
	ctx->Push(_scaleformHandle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_width);
	ctx->Push(_height);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push(_unk);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawScaleformMovie call failed" << Log::Endl;
	}
}

EXPORT void Native_drawScaleformMovieFullscreen(int32_t _scaleform, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha, int32_t _unk) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0DF606929C105BE1);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	ctx->Push(_unk);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawScaleformMovieFullscreen call failed" << Log::Endl;
	}
}

EXPORT void Native_drawScaleformMovieFullscreenMasked(int32_t _scaleform1, int32_t _scaleform2, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF537FDE4FBD4CE5);
	ctx->Reset();
	ctx->Push(_scaleform1);
	ctx->Push(_scaleform2);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawScaleformMovieFullscreenMasked call failed" << Log::Endl;
	}
}

EXPORT void Native_drawScaleformMovie3d(int32_t _scaleform, float _posX, float _posY, float _posZ, float _rotX, float _rotY, float _rotZ, float _p7, float _p8, float _p9, float _scaleX, float _scaleY, float _scaleZ, int32_t _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87D51D72255D4E78);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_scaleX);
	ctx->Push(_scaleY);
	ctx->Push(_scaleZ);
	ctx->Push(_p13);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawScaleformMovie3d call failed" << Log::Endl;
	}
}

EXPORT void Native_drawScaleformMovie3dSolid(int32_t _scaleform, float _posX, float _posY, float _posZ, float _rotX, float _rotY, float _rotZ, float _p7, float _p8, float _p9, float _scaleX, float _scaleY, float _scaleZ, int32_t _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CE592FDC749D6F5);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_scaleX);
	ctx->Push(_scaleY);
	ctx->Push(_scaleZ);
	ctx->Push(_p13);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawScaleformMovie3dSolid call failed" << Log::Endl;
	}
}

EXPORT void Native_callScaleformMovieMethod(int32_t _scaleform, const char* _method) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFBD96D87AC96D533);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(_method);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native callScaleformMovieMethod call failed" << Log::Endl;
	}
}

EXPORT void Native_callScaleformMovieMethodWithNumber(int32_t _scaleform, const char* _methodName, float _param1, float _param2, float _param3, float _param4, float _param5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0837058AE2E4BEE);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(_methodName);
	ctx->Push(_param1);
	ctx->Push(_param2);
	ctx->Push(_param3);
	ctx->Push(_param4);
	ctx->Push(_param5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native callScaleformMovieMethodWithNumber call failed" << Log::Endl;
	}
}

EXPORT void Native_callScaleformMovieMethodWithString(int32_t _scaleform, const char* _methodName, const char* _param1, const char* _param2, const char* _param3, const char* _param4, const char* _param5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51BC1ED3CC44E8F7);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(_methodName);
	ctx->Push(_param1);
	ctx->Push(_param2);
	ctx->Push(_param3);
	ctx->Push(_param4);
	ctx->Push(_param5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native callScaleformMovieMethodWithString call failed" << Log::Endl;
	}
}

EXPORT void Native_callScaleformMovieMethodWithNumberAndString(int32_t _scaleform, const char* _methodName, float _floatParam1, float _floatParam2, float _floatParam3, float _floatParam4, float _floatParam5, const char* _stringParam1, const char* _stringParam2, const char* _stringParam3, const char* _stringParam4, const char* _stringParam5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF662D8D57E290B1);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(_methodName);
	ctx->Push(_floatParam1);
	ctx->Push(_floatParam2);
	ctx->Push(_floatParam3);
	ctx->Push(_floatParam4);
	ctx->Push(_floatParam5);
	ctx->Push(_stringParam1);
	ctx->Push(_stringParam2);
	ctx->Push(_stringParam3);
	ctx->Push(_stringParam4);
	ctx->Push(_stringParam5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native callScaleformMovieMethodWithNumberAndString call failed" << Log::Endl;
	}
}

EXPORT bool Native_beginScaleformScriptHudMovieMethod(int32_t _hudComponent, const char* _methodName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98C494FD5BDFBFD5);
	ctx->Reset();
	ctx->Push(_hudComponent);
	ctx->Push(_methodName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginScaleformScriptHudMovieMethod call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_beginScaleformMovieMethod(int32_t _scaleform, const char* _methodName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6E48914C7A8694E);
	ctx->Reset();
	ctx->Push(_scaleform);
	ctx->Push(_methodName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginScaleformMovieMethod call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_beginScaleformMovieMethodOnFrontend(const char* _methodName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB58C27C2E6123C6);
	ctx->Reset();
	ctx->Push(_methodName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginScaleformMovieMethodOnFrontend call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_beginScaleformMovieMethodOnFrontendHeader(const char* _methodName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9449845F73F5E9C);
	ctx->Reset();
	ctx->Push(_methodName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginScaleformMovieMethodOnFrontendHeader call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_endScaleformMovieMethod() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6796A8FFA375E53);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endScaleformMovieMethod call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_endScaleformMovieMethodReturnValue() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC50AA39A577AF886);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endScaleformMovieMethodReturnValue call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isScaleformMovieMethodReturnValueReady(int32_t _methodReturn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x768FF8961BA904D6);
	ctx->Reset();
	ctx->Push(_methodReturn);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScaleformMovieMethodReturnValueReady call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getScaleformMovieMethodReturnValueInt(int32_t _methodReturn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DE7EFA66B906036);
	ctx->Reset();
	ctx->Push(_methodReturn);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getScaleformMovieMethodReturnValueInt call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getScaleformMovieMethodReturnValueBool(int32_t _methodReturn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD80A80346A45D761);
	ctx->Reset();
	ctx->Push(_methodReturn);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getScaleformMovieMethodReturnValueBool call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT const char* Native_getScaleformMovieMethodReturnValueString(int32_t _methodReturn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1E258829A885245);
	ctx->Reset();
	ctx->Push(_methodReturn);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getScaleformMovieMethodReturnValueString call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT void Native_scaleformMovieMethodAddParamInt(int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3D0841A0CC546A6);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scaleformMovieMethodAddParamInt call failed" << Log::Endl;
	}
}

EXPORT void Native_scaleformMovieMethodAddParamFloat(float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD69736AAE04DB51A);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scaleformMovieMethodAddParamFloat call failed" << Log::Endl;
	}
}

EXPORT void Native_scaleformMovieMethodAddParamBool(bool _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC58424BA936EB458);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scaleformMovieMethodAddParamBool call failed" << Log::Endl;
	}
}

EXPORT void Native_beginTextCommandScaleformString(const char* _componentType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80338406F3475E55);
	ctx->Reset();
	ctx->Push(_componentType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginTextCommandScaleformString call failed" << Log::Endl;
	}
}

EXPORT void Native_endTextCommandScaleformString() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x362E2D3FE93A9959);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandScaleformString call failed" << Log::Endl;
	}
}

EXPORT void Native_endTextCommandScaleformString2() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE4E8157D9ECF087);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandScaleformString2 call failed" << Log::Endl;
	}
}

EXPORT void Native_scaleformMovieMethodAddParamTextureNameString2(const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77FE3402004CD1B0);
	ctx->Reset();
	ctx->Push(_string);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scaleformMovieMethodAddParamTextureNameString2 call failed" << Log::Endl;
	}
}

EXPORT void Native_scaleformMovieMethodAddParamTextureNameString(const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA7148484BD90365);
	ctx->Reset();
	ctx->Push(_string);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scaleformMovieMethodAddParamTextureNameString call failed" << Log::Endl;
	}
}

EXPORT void Native_scaleformMovieMethodAddParamPlayerNameString(const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE83A3E3557A56640);
	ctx->Reset();
	ctx->Push(_string);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scaleformMovieMethodAddParamPlayerNameString call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesLatestBriefStringExist(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E657EF1099EDD65);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesLatestBriefStringExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_scaleformMovieMethodAddParamLatestBriefString(int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC52C631A1831C03);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scaleformMovieMethodAddParamLatestBriefString call failed" << Log::Endl;
	}
}

EXPORT void Native_requestScaleformScriptHudMovie(int32_t _hudComponent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9304881D6F6537EA);
	ctx->Reset();
	ctx->Push(_hudComponent);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestScaleformScriptHudMovie call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasScaleformScriptHudMovieLoaded(int32_t _hudComponent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF6E5987D2B4D140);
	ctx->Reset();
	ctx->Push(_hudComponent);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasScaleformScriptHudMovieLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeScaleformScriptHudMovie(int32_t _hudComponent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF44A5456AC3F4F97);
	ctx->Reset();
	ctx->Push(_hudComponent);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeScaleformScriptHudMovie call failed" << Log::Endl;
	}
}

EXPORT bool Native__0xD1C7CB175E012964(int32_t _scaleformHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1C7CB175E012964);
	ctx->Reset();
	ctx->Push(_scaleformHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD1C7CB175E012964 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setTvChannel(int32_t _channel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAABBB23EB6E484E);
	ctx->Reset();
	ctx->Push(_channel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTvChannel call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getTvChannel() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC1E275A90D39995);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTvChannel call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setTvVolume(float _volume) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2982BF73F66E9DDC);
	ctx->Reset();
	ctx->Push(_volume);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTvVolume call failed" << Log::Endl;
	}
}

EXPORT float Native_getTvVolume() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2170813D3DD8661B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTvVolume call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_drawTvChannel(float _xPos, float _yPos, float _xScale, float _yScale, float _rotation, int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDDC2B4ED3C69DF0);
	ctx->Reset();
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_xScale);
	ctx->Push(_yScale);
	ctx->Push(_rotation);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native drawTvChannel call failed" << Log::Endl;
	}
}

EXPORT void Native_setTvChannelPlaylist(int32_t _tvChannel, const char* _playlistName, bool _restart) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7B38B8305F1FE8B);
	ctx->Reset();
	ctx->Push(_tvChannel);
	ctx->Push(_playlistName);
	ctx->Push(_restart);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTvChannelPlaylist call failed" << Log::Endl;
	}
}

EXPORT void Native_setTvChannelPlaylistAtHour(int32_t _tvChannel, const char* _playlistName, int32_t _hour) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2201C576FACAEBE8);
	ctx->Reset();
	ctx->Push(_tvChannel);
	ctx->Push(_playlistName);
	ctx->Push(_hour);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTvChannelPlaylistAtHour call failed" << Log::Endl;
	}
}

EXPORT void Native_clearTvChannelPlaylist(int32_t _tvChannel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBEB3D46BB7F043C0);
	ctx->Reset();
	ctx->Push(_tvChannel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearTvChannelPlaylist call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPlaylistUnk(int32_t _tvChannel, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F710BFF7DAE6261);
	ctx->Reset();
	ctx->Push(_tvChannel);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlaylistUnk call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isTvPlaylistItemPlaying(int32_t _videoCliphash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AD973CA1E077B60);
	ctx->Reset();
	ctx->Push(_videoCliphash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isTvPlaylistItemPlaying call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_enableMovieKeyframeWait(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74C180030FDE4B69);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableMovieKeyframeWait call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD1C55B110E4DF534(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1C55B110E4DF534);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD1C55B110E4DF534 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x30432A0118736E00() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30432A0118736E00);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x30432A0118736E00 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_enableMovieSubtitles(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x873FA65C778AD970);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableMovieSubtitles call failed" << Log::Endl;
	}
}

EXPORT bool Native_ui3dsceneIsAvailable() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3A10FC7FD8D98CD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ui3dsceneIsAvailable call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ui3dscenePushPreset(const char* _presetName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1CEA8A4198D8E9A);
	ctx->Reset();
	ctx->Push(_presetName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ui3dscenePushPreset call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x98C4FE6EC34154CA(const char* _presetName, int32_t _ped, int32_t _p2, float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98C4FE6EC34154CA);
	ctx->Reset();
	ctx->Push(_presetName);
	ctx->Push(_ped);
	ctx->Push(_p2);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x98C4FE6EC34154CA call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x7A42B2E236E71415() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A42B2E236E71415);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7A42B2E236E71415 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x108BE26959A9D9BB(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x108BE26959A9D9BB);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x108BE26959A9D9BB call failed" << Log::Endl;
	}
}

EXPORT void Native_terraingridActivate(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA356990E161C9E65);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native terraingridActivate call failed" << Log::Endl;
	}
}

EXPORT void Native_terraingridSetParams(float _x, float _y, float _z, float _p3, float _rotation, float _p5, float _width, float _height, float _p8, float _scale, float _glowIntensity, float _normalHeight, float _heightDiff) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C4FC5752BCD8E48);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_rotation);
	ctx->Push(_p5);
	ctx->Push(_width);
	ctx->Push(_height);
	ctx->Push(_p8);
	ctx->Push(_scale);
	ctx->Push(_glowIntensity);
	ctx->Push(_normalHeight);
	ctx->Push(_heightDiff);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native terraingridSetParams call failed" << Log::Endl;
	}
}

EXPORT void Native_terraingridSetColours(int32_t _lowR, int32_t _lowG, int32_t _lowB, int32_t _lowAlpha, int32_t _r, int32_t _g, int32_t _b, int32_t _alpha, int32_t _highR, int32_t _highG, int32_t _highB, int32_t _highAlpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CE62918F8D703C7);
	ctx->Reset();
	ctx->Push(_lowR);
	ctx->Push(_lowG);
	ctx->Push(_lowB);
	ctx->Push(_lowAlpha);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_alpha);
	ctx->Push(_highR);
	ctx->Push(_highG);
	ctx->Push(_highB);
	ctx->Push(_highAlpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native terraingridSetColours call failed" << Log::Endl;
	}
}

EXPORT void Native_animpostfxPlay(const char* _effectName, int32_t _duration, bool _looped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2206BF9A37B7F724);
	ctx->Reset();
	ctx->Push(_effectName);
	ctx->Push(_duration);
	ctx->Push(_looped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native animpostfxPlay call failed" << Log::Endl;
	}
}

EXPORT void Native_animpostfxStop(const char* _effectName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x068E835A1D0DC0E3);
	ctx->Reset();
	ctx->Push(_effectName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native animpostfxStop call failed" << Log::Endl;
	}
}

EXPORT float Native_animpostfxGetUnk(const char* _effectName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE35B38A27E8E7179);
	ctx->Reset();
	ctx->Push(_effectName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native animpostfxGetUnk call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT bool Native_animpostfxIsRunning(const char* _effectName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36AD3E690DA5ACEB);
	ctx->Reset();
	ctx->Push(_effectName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native animpostfxIsRunning call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_animpostfxStopAll() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4EDDC19532BFB85);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native animpostfxStopAll call failed" << Log::Endl;
	}
}

EXPORT void Native_animpostfxStopAndDoUnk(const char* _effectName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2209BE128B5418C);
	ctx->Reset();
	ctx->Push(_effectName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native animpostfxStopAndDoUnk call failed" << Log::Endl;
	}
}

EXPORT void Native_playPedRingtone(const char* _ringtoneName, int32_t _ped, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9E56683CA8E11A5);
	ctx->Reset();
	ctx->Push(_ringtoneName);
	ctx->Push(_ped);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playPedRingtone call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedRingtonePlaying(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E8E5E20937E3137);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedRingtonePlaying call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_stopPedRingtone(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C5AE23EFA885092);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopPedRingtone call failed" << Log::Endl;
	}
}

EXPORT bool Native_isMobilePhoneCallOngoing() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7497D2CE2C30D24C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMobilePhoneCallOngoing call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xC8B1B2425604CDD0() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8B1B2425604CDD0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC8B1B2425604CDD0 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_createNewScriptedConversation() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2C91A0B572AAE56);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createNewScriptedConversation call failed" << Log::Endl;
	}
}

EXPORT void Native_addLineToConversation(int32_t _index, const char* _p1, const char* _p2, int32_t _p3, int32_t _p4, bool _p5, bool _p6, bool _p7, bool _p8, int32_t _p9, bool _p10, bool _p11, bool _p12) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5EF963405593646);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addLineToConversation call failed" << Log::Endl;
	}
}

EXPORT void Native_addPedToConversation(int32_t _index, int32_t _ped, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95D9F4BC443956E7);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_ped);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addPedToConversation call failed" << Log::Endl;
	}
}

EXPORT void Native__0x33E3C6C6F2F0B506(int32_t _p0, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33E3C6C6F2F0B506);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x33E3C6C6F2F0B506 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x892B6AB8F33606F5(int32_t _p0, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x892B6AB8F33606F5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x892B6AB8F33606F5 call failed" << Log::Endl;
	}
}

EXPORT void Native_setMicrophonePosition(bool _p0, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _x3, float _y3, float _z3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6AE90EDDE95C762);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_x3);
	ctx->Push(_y3);
	ctx->Push(_z3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMicrophonePosition call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0B568201DD99F0EB(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B568201DD99F0EB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0B568201DD99F0EB call failed" << Log::Endl;
	}
}

EXPORT void Native__0x61631F5DF50D1C34(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61631F5DF50D1C34);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x61631F5DF50D1C34 call failed" << Log::Endl;
	}
}

EXPORT void Native_startScriptPhoneConversation(bool _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x252E5F915EABB675);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startScriptPhoneConversation call failed" << Log::Endl;
	}
}

EXPORT void Native_preloadScriptPhoneConversation(bool _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6004BCB0E226AAEA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native preloadScriptPhoneConversation call failed" << Log::Endl;
	}
}

EXPORT void Native_startScriptConversation(bool _p0, bool _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B17C62C9635D2DC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startScriptConversation call failed" << Log::Endl;
	}
}

EXPORT void Native_preloadScriptConversation(bool _p0, bool _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B3CAD6166916D87);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native preloadScriptConversation call failed" << Log::Endl;
	}
}

EXPORT void Native_startPreloadedConversation() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23641AFE870AF385);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startPreloadedConversation call failed" << Log::Endl;
	}
}

EXPORT bool Native_getIsPreloadedConversationReady() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE73364DB90778FFA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsPreloadedConversationReady call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isScriptedConversationOngoing() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16754C556D2EDE3D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScriptedConversationOngoing call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isScriptedConversationLoaded() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF0D54BE7A776737);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScriptedConversationLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getCurrentScriptedConversationLine() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x480357EE890C295A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCurrentScriptedConversationLine call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_pauseScriptedConversation(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8530AD776CD72B12);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pauseScriptedConversation call failed" << Log::Endl;
	}
}

EXPORT void Native_restartScriptedConversation() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9AEB285D1818C9AC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native restartScriptedConversation call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_stopScriptedConversation(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD79DEEFB53455EBA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopScriptedConversation call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_skipToNextScriptedConversationLine() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9663FE6B7A61EB00);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native skipToNextScriptedConversationLine call failed" << Log::Endl;
	}
}

EXPORT void Native_interruptConversation(int32_t _p0, int32_t& _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA018A12E5C5C2FA6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native interruptConversation call failed" << Log::Endl;
	}
}

EXPORT void Native_interruptConversationAndPause(int32_t _ped, const char* _p1, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A694D7A68F8DC38);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native interruptConversationAndPause call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xAA19F5572C38B564(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA19F5572C38B564);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAA19F5572C38B564 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0xB542DE8C3D1CB210(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB542DE8C3D1CB210);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB542DE8C3D1CB210 call failed" << Log::Endl;
	}
}

EXPORT void Native_registerScriptWithAudio(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6ED9D5092438D91);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerScriptWithAudio call failed" << Log::Endl;
	}
}

EXPORT void Native_unregisterScriptWithAudio() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8638BE228D4751A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native unregisterScriptWithAudio call failed" << Log::Endl;
	}
}

EXPORT bool Native_requestMissionAudioBank(const char* _p0, bool _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7345BDD95E62E0F2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestMissionAudioBank call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_requestAmbientAudioBank(const char* _p0, bool _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE02FFBED8CA9D99);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestAmbientAudioBank call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_requestScriptAudioBank(const char* _p0, bool _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F844A8B08D76685);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestScriptAudioBank call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x40763EA7B9B783E7(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40763EA7B9B783E7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x40763EA7B9B783E7 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_hintAmbientAudioBank(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F8C0E370AE62F5C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hintAmbientAudioBank call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_hintScriptAudioBank(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB380A29641EC31A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hintScriptAudioBank call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_releaseMissionAudioBank() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0EC92A1BF0857187);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native releaseMissionAudioBank call failed" << Log::Endl;
	}
}

EXPORT void Native_releaseAmbientAudioBank() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65475A218FFAA93D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native releaseAmbientAudioBank call failed" << Log::Endl;
	}
}

EXPORT void Native_releaseNamedScriptAudioBank(const char* _audioBank) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77ED170667F50170);
	ctx->Reset();
	ctx->Push(_audioBank);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native releaseNamedScriptAudioBank call failed" << Log::Endl;
	}
}

EXPORT void Native_releaseScriptAudioBank() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A2D8AD0A9EB9C3F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native releaseScriptAudioBank call failed" << Log::Endl;
	}
}

EXPORT void Native__0x19AF7ED9B9D23058() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19AF7ED9B9D23058);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x19AF7ED9B9D23058 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9AC92EED5E4793AB() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9AC92EED5E4793AB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9AC92EED5E4793AB call failed" << Log::Endl;
	}
}

EXPORT void Native__0x11579D940949C49E(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11579D940949C49E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x11579D940949C49E call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getSoundId() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x430386FE9BF80B45);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getSoundId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_releaseSoundId(int32_t _soundId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x353FC880830B88FA);
	ctx->Reset();
	ctx->Push(_soundId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native releaseSoundId call failed" << Log::Endl;
	}
}

EXPORT void Native_playSound(int32_t _soundId, const char* _audioName, const char* _audioRef, bool _p3, int32_t _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FF4944CC209192D);
	ctx->Reset();
	ctx->Push(_soundId);
	ctx->Push(_audioName);
	ctx->Push(_audioRef);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playSound call failed" << Log::Endl;
	}
}

EXPORT void Native_playSoundFrontend(int32_t _soundId, const char* _audioName, const char* _audioRef, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67C540AA08E4A6F5);
	ctx->Reset();
	ctx->Push(_soundId);
	ctx->Push(_audioName);
	ctx->Push(_audioRef);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playSoundFrontend call failed" << Log::Endl;
	}
}

EXPORT void Native_playDeferredSoundFrontend(const char* _soundName, const char* _soundsetName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCADA5A0D0702381E);
	ctx->Reset();
	ctx->Push(_soundName);
	ctx->Push(_soundsetName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playDeferredSoundFrontend call failed" << Log::Endl;
	}
}

EXPORT void Native_playSoundFromEntity(int32_t _soundId, const char* _audioName, int32_t _entity, const char* _audioRef, bool _isNetwork, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE65F427EB70AB1ED);
	ctx->Reset();
	ctx->Push(_soundId);
	ctx->Push(_audioName);
	ctx->Push(_entity);
	ctx->Push(_audioRef);
	ctx->Push(_isNetwork);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playSoundFromEntity call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5B9853296731E88D(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B9853296731E88D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5B9853296731E88D call failed" << Log::Endl;
	}
}

EXPORT void Native_playSoundFromCoord(int32_t _soundId, const char* _audioName, float _x, float _y, float _z, const char* _audioRef, bool _isNetwork, int32_t _range, bool _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D8686B622B88120);
	ctx->Reset();
	ctx->Push(_soundId);
	ctx->Push(_audioName);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_audioRef);
	ctx->Push(_isNetwork);
	ctx->Push(_range);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playSoundFromCoord call failed" << Log::Endl;
	}
}

EXPORT void Native__0x7EC3C679D0E7E46B(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EC3C679D0E7E46B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7EC3C679D0E7E46B call failed" << Log::Endl;
	}
}

EXPORT void Native_stopSound(int32_t _soundId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3B0C41BA5CC0BB5);
	ctx->Reset();
	ctx->Push(_soundId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopSound call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getNetworkIdFromSoundId(int32_t _soundId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DE3F0A134FFBC0D);
	ctx->Reset();
	ctx->Push(_soundId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNetworkIdFromSoundId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getSoundIdFromNetworkId(int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75262FD12D0A1C84);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getSoundIdFromNetworkId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setVariableOnSound(int32_t _soundId, int32_t& _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD6B3148A78AE9B6);
	ctx->Reset();
	ctx->Push(_soundId);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVariableOnSound call failed" << Log::Endl;
	}
}

EXPORT void Native_setVariableOnStream(const char* _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F9D3834AEB9EF79);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVariableOnStream call failed" << Log::Endl;
	}
}

EXPORT void Native_overrideUnderwaterStream(int32_t& _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2A9CDABCEA04BD6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native overrideUnderwaterStream call failed" << Log::Endl;
	}
}

EXPORT void Native_setVariableOnUnderWaterStream(const char* _unkVariableName, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x733ADF241531E5C2);
	ctx->Reset();
	ctx->Push(_unkVariableName);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVariableOnUnderWaterStream call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasSoundFinished(int32_t _soundId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCBDCE714A7C88E5);
	ctx->Reset();
	ctx->Push(_soundId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasSoundFinished call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_playPedAmbientSpeechNative(int32_t _ped, const char* _speechName, const char* _speechParam, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E04FEDD28D42462);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_speechName);
	ctx->Push(_speechParam);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playPedAmbientSpeechNative call failed" << Log::Endl;
	}
}

EXPORT void Native_playPedAmbientSpeechAndCloneNative(int32_t _ped, const char* _speechName, const char* _speechParam, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6941B4A3A8FBBB9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_speechName);
	ctx->Push(_speechParam);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playPedAmbientSpeechAndCloneNative call failed" << Log::Endl;
	}
}

EXPORT void Native_playPedAmbientSpeechWithVoiceNative(int32_t _ped, const char* _speechName, const char* _voiceName, const char* _speechParam, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3523634255FC3318);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_speechName);
	ctx->Push(_voiceName);
	ctx->Push(_speechParam);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playPedAmbientSpeechWithVoiceNative call failed" << Log::Endl;
	}
}

EXPORT void Native_playAmbientSpeechFromPositionNative(const char* _speechName, const char* _voiceName, float _x, float _y, float _z, const char* _speechParam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED640017ED337E45);
	ctx->Reset();
	ctx->Push(_speechName);
	ctx->Push(_voiceName);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_speechParam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playAmbientSpeechFromPositionNative call failed" << Log::Endl;
	}
}

EXPORT void Native_overrideTrevorRage(const char* _voiceEffect) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13AD665062541A7E);
	ctx->Reset();
	ctx->Push(_voiceEffect);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native overrideTrevorRage call failed" << Log::Endl;
	}
}

EXPORT void Native_resetTrevorRage() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE78503B10C4314E0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetTrevorRage call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerAngry(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA241BB04110F091);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerAngry call failed" << Log::Endl;
	}
}

EXPORT void Native_playPain(int32_t _ped, int32_t _painID, int32_t _p1, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC9AE166038A5CEC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_painID);
	ctx->Push(_p1);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playPain call failed" << Log::Endl;
	}
}

EXPORT void Native_releaseWeaponAudio() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE4AC0439F607045);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native releaseWeaponAudio call failed" << Log::Endl;
	}
}

EXPORT void Native_activateAudioSlowmoMode(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD01005D2BA2EB778);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native activateAudioSlowmoMode call failed" << Log::Endl;
	}
}

EXPORT void Native_deactivateAudioSlowmoMode(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDDC635D5B3262C56);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native deactivateAudioSlowmoMode call failed" << Log::Endl;
	}
}

EXPORT void Native_setAmbientVoiceName(int32_t _ped, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C8065A3B780185B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAmbientVoiceName call failed" << Log::Endl;
	}
}

EXPORT void Native_setAmbientVoiceNameHash(int32_t _ped, int32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A53DED9921DE990);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAmbientVoiceNameHash call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getAmbientVoiceNameHash(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E203DA2BA15D436);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getAmbientVoiceNameHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedScream(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40CF0D12D142A9E8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedScream call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1B7ABE26CBCBF8C7(int32_t _ped, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B7ABE26CBCBF8C7);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1B7ABE26CBCBF8C7 call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedVoiceGroup(int32_t _ped, int32_t _voiceGroupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7CDC8C3B89F661B3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_voiceGroupHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedVoiceGroup call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedAudioGender(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5342D390CDA41D6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAudioGender call failed" << Log::Endl;
	}
}

EXPORT void Native_stopCurrentPlayingSpeech(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A73D05A607734C7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopCurrentPlayingSpeech call failed" << Log::Endl;
	}
}

EXPORT void Native_stopCurrentPlayingAmbientSpeech(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8BEC0CA6F0EDB0F);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopCurrentPlayingAmbientSpeech call failed" << Log::Endl;
	}
}

EXPORT bool Native_isAmbientSpeechPlaying(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9072C8B49907BFAD);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAmbientSpeechPlaying call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isScriptedSpeechPlaying(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC9AA18DCC7084F4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScriptedSpeechPlaying call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isAnySpeechPlaying(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x729072355FA39EC9);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAnySpeechPlaying call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x30CA2EF91D15ADF8() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30CA2EF91D15ADF8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x30CA2EF91D15ADF8 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_canPedSpeak(int32_t _ped, const char* _speechName, bool _unk) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49B99BF3FDA89A7A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_speechName);
	ctx->Push(_unk);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canPedSpeak call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedInCurrentConversation(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x049E937F18F4020C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInCurrentConversation call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedIsDrunk(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95D2D383D5396B8A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedIsDrunk call failed" << Log::Endl;
	}
}

EXPORT void Native_playAnimalVocalization(int32_t _pedHandle, int32_t _p1, const char* _speechName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE066C7006C49C0A);
	ctx->Reset();
	ctx->Push(_pedHandle);
	ctx->Push(_p1);
	ctx->Push(_speechName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playAnimalVocalization call failed" << Log::Endl;
	}
}

EXPORT bool Native_isAnimalVocalizationPlaying(int32_t _pedHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC265DF9FB44A9FBD);
	ctx->Reset();
	ctx->Push(_pedHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAnimalVocalizationPlaying call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setAnimalMood(int32_t _animal, int32_t _mood) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC97B29285B1DC3B);
	ctx->Reset();
	ctx->Push(_animal);
	ctx->Push(_mood);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAnimalMood call failed" << Log::Endl;
	}
}

EXPORT bool Native_isMobilePhoneRadioActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB35CE999E8EF317E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMobilePhoneRadioActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setMobilePhoneRadioState(bool _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF286C554784F3DF);
	ctx->Reset();
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMobilePhoneRadioState call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPlayerRadioStationIndex() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8AF77C4C06ADC93);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerRadioStationIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT const char* Native_getPlayerRadioStationName() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6D733C32076AD03);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerRadioStationName call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_getRadioStationName(int32_t _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB28ECA15046CA8B9);
	ctx->Reset();
	ctx->Push(_radioStation);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRadioStationName call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT int32_t Native_getPlayerRadioStationGenre() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA571991A7FE6CCEB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerRadioStationGenre call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isRadioRetuning() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA151A7394A214E65);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isRadioRetuning call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isRadioFadedOut() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0626A247D2405330);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isRadioFadedOut call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xFF266D1D0EB1195D() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF266D1D0EB1195D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFF266D1D0EB1195D call failed" << Log::Endl;
	}
}

EXPORT void Native__0xDD6BCF9E94425DF9() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD6BCF9E94425DF9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDD6BCF9E94425DF9 call failed" << Log::Endl;
	}
}

EXPORT void Native_setRadioToStationName(const char* _stationName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC69EDA28699D5107);
	ctx->Reset();
	ctx->Push(_stationName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRadioToStationName call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehRadioStation(int32_t _vehicle, const char* _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B9C0099CB942AC6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_radioStation);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehRadioStation call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehHasRadioOverride(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E45765F3FBB582F);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehHasRadioOverride call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleRadioEnabled(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BE4BE946463F917);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleRadioEnabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xC1805D05E6D4FE10(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1805D05E6D4FE10);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC1805D05E6D4FE10 call failed" << Log::Endl;
	}
}

EXPORT void Native_setEmitterRadioStation(const char* _emitterName, const char* _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xACF57305B12AF907);
	ctx->Reset();
	ctx->Push(_emitterName);
	ctx->Push(_radioStation);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEmitterRadioStation call failed" << Log::Endl;
	}
}

EXPORT void Native_setStaticEmitterEnabled(const char* _emitterName, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x399D2D3B33F1B8EB);
	ctx->Reset();
	ctx->Push(_emitterName);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setStaticEmitterEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native_linkStaticEmitterToEntity(const char* _emitterName, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x651D3228960D08AF);
	ctx->Reset();
	ctx->Push(_emitterName);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native linkStaticEmitterToEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_setRadioToStationIndex(int32_t _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA619B168B8A8570F);
	ctx->Reset();
	ctx->Push(_radioStation);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRadioToStationIndex call failed" << Log::Endl;
	}
}

EXPORT void Native_setFrontendRadioActive(bool _active) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7F26C6E9CC9EBB8);
	ctx->Reset();
	ctx->Push(_active);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFrontendRadioActive call failed" << Log::Endl;
	}
}

EXPORT void Native_unlockMissionNewsStory(int32_t _newsStory) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB165AB7C248B2DC1);
	ctx->Reset();
	ctx->Push(_newsStory);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native unlockMissionNewsStory call failed" << Log::Endl;
	}
}

EXPORT bool Native_isMissionNewsStoryUnlocked(int32_t _newsStory) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66E49BF55B4B1874);
	ctx->Reset();
	ctx->Push(_newsStory);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMissionNewsStoryUnlocked call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getAudibleMusicTrackTextId() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50B196FC9ED6545B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getAudibleMusicTrackTextId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_playEndCreditsMusic(bool _play) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD536C4D33DCC900);
	ctx->Reset();
	ctx->Push(_play);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playEndCreditsMusic call failed" << Log::Endl;
	}
}

EXPORT void Native_skipRadioForward() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6DDBBDD98E2E9C25);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native skipRadioForward call failed" << Log::Endl;
	}
}

EXPORT void Native_freezeRadioStation(const char* _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x344F393B027E38C3);
	ctx->Reset();
	ctx->Push(_radioStation);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native freezeRadioStation call failed" << Log::Endl;
	}
}

EXPORT void Native_unfreezeRadioStation(const char* _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC00454CF60B91DD);
	ctx->Reset();
	ctx->Push(_radioStation);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native unfreezeRadioStation call failed" << Log::Endl;
	}
}

EXPORT void Native_setRadioAutoUnfreeze(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1AA9F53CE982990);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRadioAutoUnfreeze call failed" << Log::Endl;
	}
}

EXPORT void Native_setInitialPlayerStation(const char* _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88795F13FACDA88D);
	ctx->Reset();
	ctx->Push(_radioStation);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setInitialPlayerStation call failed" << Log::Endl;
	}
}

EXPORT void Native_setUserRadioControlEnabled(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19F21E63AE6EAE4E);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setUserRadioControlEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native_setRadioTrack(const char* _radioStation, const char* _radioTrack) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB39786F201FEE30B);
	ctx->Reset();
	ctx->Push(_radioStation);
	ctx->Push(_radioTrack);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRadioTrack call failed" << Log::Endl;
	}
}

EXPORT void Native_setRadioTrackMix(const char* _radioStationName, const char* _mixName, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CB0075110BE1E56);
	ctx->Reset();
	ctx->Push(_radioStationName);
	ctx->Push(_mixName);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRadioTrackMix call failed" << Log::Endl;
	}
}

EXPORT void Native__0x55ECF4D13D9903B0(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55ECF4D13D9903B0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x55ECF4D13D9903B0 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleRadioLoud(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB6F1CAEC68B0BCE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleRadioLoud call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleRadioLoud(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x032A116663A4D5AC);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleRadioLoud call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setMobileRadioEnabledDuringGameplay(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1098355A16064BB3);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMobileRadioEnabledDuringGameplay call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesPlayerVehHaveRadio() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x109697E2FFBAC8A1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesPlayerVehHaveRadio call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlayerVehRadioEnable() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F43D83FD6738741);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerVehRadioEnable call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleRadioEnabled(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B988190C0AA6C0B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleRadioEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native__0xDA07819E452FFE8F(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA07819E452FFE8F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDA07819E452FFE8F call failed" << Log::Endl;
	}
}

EXPORT void Native_setCustomRadioTrackList(const char* _radioStation, const char* _trackListName, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E404A9361F75BB2);
	ctx->Reset();
	ctx->Push(_radioStation);
	ctx->Push(_trackListName);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCustomRadioTrackList call failed" << Log::Endl;
	}
}

EXPORT void Native_clearCustomRadioTrackList(const char* _radioStation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1654F24A88A8E3FE);
	ctx->Reset();
	ctx->Push(_radioStation);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearCustomRadioTrackList call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getNumUnlockedRadioStations() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1620ECB50E01DE7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumUnlockedRadioStations call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_findRadioStationIndex(int32_t _stationNameHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D67489793FF428B);
	ctx->Reset();
	ctx->Push(_stationNameHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native findRadioStationIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setRadioStationMusicOnly(const char* _radioStation, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x774BD811F656A122);
	ctx->Reset();
	ctx->Push(_radioStation);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRadioStationMusicOnly call failed" << Log::Endl;
	}
}

EXPORT void Native_setRadioFrontendFadeTime(float _fadeTime) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C96CDB04FCA358E);
	ctx->Reset();
	ctx->Push(_fadeTime);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRadioFrontendFadeTime call failed" << Log::Endl;
	}
}

EXPORT void Native_unlockRadioStationTrackList(const char* _radioStation, const char* _trackListName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x031ACB6ABA18C729);
	ctx->Reset();
	ctx->Push(_radioStation);
	ctx->Push(_trackListName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native unlockRadioStationTrackList call failed" << Log::Endl;
	}
}

EXPORT void Native_lockRadioStationTrackList(const char* _radioStation, const char* _trackListName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF5E5EA2DCEEACF3);
	ctx->Reset();
	ctx->Push(_radioStation);
	ctx->Push(_trackListName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native lockRadioStationTrackList call failed" << Log::Endl;
	}
}

EXPORT void Native_updateLsur(bool _enableMixes) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47AED84213A47510);
	ctx->Reset();
	ctx->Push(_enableMixes);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native updateLsur call failed" << Log::Endl;
	}
}

EXPORT void Native_lockRadioStation(const char* _radioStationName, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x477D9DB48F889591);
	ctx->Reset();
	ctx->Push(_radioStationName);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native lockRadioStation call failed" << Log::Endl;
	}
}

EXPORT void Native_setRadioStationIsVisible(const char* _radioStation, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4CAFEBFA21EC188D);
	ctx->Reset();
	ctx->Push(_radioStation);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRadioStationIsVisible call failed" << Log::Endl;
	}
}

EXPORT bool Native__0xC64A06D939F826F5(float& _p0, float& _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC64A06D939F826F5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC64A06D939F826F5 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_forceRadioTrackListPosition(const char* _radioStation, const char* _trackListName, int32_t _milliseconds) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E0AF9114608257C);
	ctx->Reset();
	ctx->Push(_radioStation);
	ctx->Push(_trackListName);
	ctx->Push(_milliseconds);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceRadioTrackListPosition call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getCurrentRadioStationHash(const char* _radioStationName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E65CDE5215832C1);
	ctx->Reset();
	ctx->Push(_radioStationName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCurrentRadioStationHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x34D66BC058019CE0(const char* _radioStationName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34D66BC058019CE0);
	ctx->Reset();
	ctx->Push(_radioStationName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x34D66BC058019CE0 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0xF3365489E0DD50F9(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3365489E0DD50F9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF3365489E0DD50F9 call failed" << Log::Endl;
	}
}

EXPORT void Native_setAmbientZoneState(const char* _zoneName, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBDA07E5950085E46);
	ctx->Reset();
	ctx->Push(_zoneName);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAmbientZoneState call failed" << Log::Endl;
	}
}

EXPORT void Native_clearAmbientZoneState(const char* _zoneName, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x218DD44AAAC964FF);
	ctx->Reset();
	ctx->Push(_zoneName);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearAmbientZoneState call failed" << Log::Endl;
	}
}

EXPORT void Native_setAmbientZoneListState(int32_t& _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9748FA4DE50CCE3E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAmbientZoneListState call failed" << Log::Endl;
	}
}

EXPORT void Native_clearAmbientZoneListState(int32_t& _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x120C48C614909FA4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearAmbientZoneListState call failed" << Log::Endl;
	}
}

EXPORT void Native_setAmbientZoneStatePersistent(const char* _ambientZone, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D6650420CEC9D3B);
	ctx->Reset();
	ctx->Push(_ambientZone);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAmbientZoneStatePersistent call failed" << Log::Endl;
	}
}

EXPORT void Native_setAmbientZoneListStatePersistent(const char* _ambientZone, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3638DAE8C4045E1);
	ctx->Reset();
	ctx->Push(_ambientZone);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAmbientZoneListStatePersistent call failed" << Log::Endl;
	}
}

EXPORT bool Native_isAmbientZoneEnabled(const char* _ambientZone) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01E2817A479A7F9B);
	ctx->Reset();
	ctx->Push(_ambientZone);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAmbientZoneEnabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x5D2BFAAB8D956E0E() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D2BFAAB8D956E0E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5D2BFAAB8D956E0E call failed" << Log::Endl;
	}
}

EXPORT void Native_setCutsceneAudioOverride(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B4BF5F0859204D9);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCutsceneAudioOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_setVariableOnCutsceneAudio(const char* _unkVariableName, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCC29F935ED07688);
	ctx->Reset();
	ctx->Push(_unkVariableName);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVariableOnCutsceneAudio call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_playPoliceReport(const char* _name, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFEBD56D9BD1EB16);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playPoliceReport call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_cancelCurrentPoliceReport() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4F90FAF7670B16F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cancelCurrentPoliceReport call failed" << Log::Endl;
	}
}

EXPORT void Native_blipSiren(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B9025BDA76822B6);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native blipSiren call failed" << Log::Endl;
	}
}

EXPORT void Native_overrideVehHorn(int32_t _vehicle, bool _override, int32_t _hornHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3CDC1E622CCE0356);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_override);
	ctx->Push(_hornHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native overrideVehHorn call failed" << Log::Endl;
	}
}

EXPORT bool Native_isHornActive(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D6BFC12B05C6121);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isHornActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setAggressiveHorns(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x395BF71085D1B1D9);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAggressiveHorns call failed" << Log::Endl;
	}
}

EXPORT void Native__0x02E93C796ABD3A97(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02E93C796ABD3A97);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x02E93C796ABD3A97 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x58BB377BEC7CD5F4(bool _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58BB377BEC7CD5F4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x58BB377BEC7CD5F4 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9BD7BD55E4533183(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BD7BD55E4533183);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9BD7BD55E4533183 call failed" << Log::Endl;
	}
}

EXPORT bool Native_isStreamPlaying() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD11FA52EB849D978);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isStreamPlaying call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getStreamPlayTime() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E72BBDBCA58A3DB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getStreamPlayTime call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_loadStream(const char* _streamName, const char* _soundSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F1F957154EC51DF);
	ctx->Reset();
	ctx->Push(_streamName);
	ctx->Push(_soundSet);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native loadStream call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_loadStreamWithStartOffset(const char* _streamName, int32_t _startOffset, const char* _soundSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59C16B79F53B3712);
	ctx->Reset();
	ctx->Push(_streamName);
	ctx->Push(_startOffset);
	ctx->Push(_soundSet);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native loadStreamWithStartOffset call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_playStreamFromPed(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89049DD63C08B5D1);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playStreamFromPed call failed" << Log::Endl;
	}
}

EXPORT void Native_playStreamFromVehicle(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB70374A758007DFA);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playStreamFromVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_playStreamFromObject(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBAA9B64D76356FD);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playStreamFromObject call failed" << Log::Endl;
	}
}

EXPORT void Native_playStreamFrontend() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58FCE43488F9F5F4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playStreamFrontend call failed" << Log::Endl;
	}
}

EXPORT void Native_playStreamFromPosition(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21442F412E8DE56B);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playStreamFromPosition call failed" << Log::Endl;
	}
}

EXPORT void Native_stopStream() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4718A1419D18151);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopStream call failed" << Log::Endl;
	}
}

EXPORT void Native_stopPedSpeaking(int32_t _ped, bool _shaking) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D64D7405520E3D3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_shaking);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopPedSpeaking call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF8AD2EED7C47E8FE(int32_t _ped, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8AD2EED7C47E8FE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF8AD2EED7C47E8FE call failed" << Log::Endl;
	}
}

EXPORT void Native__0xAB6781A5F3101470(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB6781A5F3101470);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAB6781A5F3101470 call failed" << Log::Endl;
	}
}

EXPORT void Native_disablePedPainAudio(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9A41C1E940FB0E8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disablePedPainAudio call failed" << Log::Endl;
	}
}

EXPORT bool Native_isAmbientSpeechDisabled(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x932C2D096A2C3FFF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAmbientSpeechDisabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xA8A7D434AFB4B97B(const char* _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8A7D434AFB4B97B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA8A7D434AFB4B97B call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2ACABED337622DF2(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2ACABED337622DF2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2ACABED337622DF2 call failed" << Log::Endl;
	}
}

EXPORT void Native_setSirenWithNoDriver(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1FEF0683B96EBCF2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSirenWithNoDriver call failed" << Log::Endl;
	}
}

EXPORT void Native_setSirenKeepOn(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF584CF8529B51434);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSirenKeepOn call failed" << Log::Endl;
	}
}

EXPORT void Native_triggerSiren(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66C3FB05206041BA);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native triggerSiren call failed" << Log::Endl;
	}
}

EXPORT void Native_soundVehicleHornThisFrame(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C11908013EA4715);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native soundVehicleHornThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setHornEnabled(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76D683C108594D0E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHornEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native_setAudioVehiclePriority(int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE5564483E407F914);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAudioVehiclePriority call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9D3AF56E94C9AE98(int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D3AF56E94C9AE98);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9D3AF56E94C9AE98 call failed" << Log::Endl;
	}
}

EXPORT void Native_useSirenAsHorn(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA932DE350266EF8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native useSirenAsHorn call failed" << Log::Endl;
	}
}

EXPORT void Native_forceVehicleEngineAudio(int32_t _vehicle, const char* _audioName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F0C413926060B38);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_audioName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceVehicleEngineAudio call failed" << Log::Endl;
	}
}

EXPORT void Native_preloadVehicleAudio(int32_t _vehicleModel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA4CEA6AE0000A7E);
	ctx->Reset();
	ctx->Push(_vehicleModel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native preloadVehicleAudio call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleStartupRevSound(int32_t _vehicle, const char* _p1, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1F8157B8C3F171C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleStartupRevSound call failed" << Log::Endl;
	}
}

EXPORT void Native_resetVehicleStartupRevSound(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2DCCD8E16E20997);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetVehicleStartupRevSound call failed" << Log::Endl;
	}
}

EXPORT void Native__0x97FFB4ADEED08066(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97FFB4ADEED08066);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x97FFB4ADEED08066 call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleAudiblyDamaged(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DB8010EE71FDEF2);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleAudiblyDamaged call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleAudioEngineDamageFactor(int32_t _vehicle, float _damageFactor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59E7B488451F4D3A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_damageFactor);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleAudioEngineDamageFactor call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleAudioBodyDamageFactor(int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01BB4D577D38BD9E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleAudioBodyDamageFactor call failed" << Log::Endl;
	}
}

EXPORT void Native_enableVehicleFanbeltDamage(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C073274E065C6D2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableVehicleFanbeltDamage call failed" << Log::Endl;
	}
}

EXPORT void Native_enableVehicleExhaustPops(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2BE4BC731D039D5A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableVehicleExhaustPops call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleBoostActive(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A04DE7CAB2739A1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleBoostActive call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6FDDAD856E36988A(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FDDAD856E36988A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6FDDAD856E36988A call failed" << Log::Endl;
	}
}

EXPORT void Native_setScriptUpdateDoorAudio(int32_t _doorHash, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06C0023BED16DD6B);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScriptUpdateDoorAudio call failed" << Log::Endl;
	}
}

EXPORT void Native_playVehicleDoorOpenSound(int32_t _vehicle, int32_t _doorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A539D52857EA82D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playVehicleDoorOpenSound call failed" << Log::Endl;
	}
}

EXPORT void Native_playVehicleDoorCloseSound(int32_t _vehicle, int32_t _doorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62A456AA4769EF34);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playVehicleDoorCloseSound call failed" << Log::Endl;
	}
}

EXPORT void Native_enableStallWarningSounds(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC15907D667F7CFB2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableStallWarningSounds call failed" << Log::Endl;
	}
}

EXPORT bool Native_isGameInControlOfMusic() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D28DC1671E334FD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isGameInControlOfMusic call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setGpsActive(bool _active) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BD3F52BA9B1E4E8);
	ctx->Reset();
	ctx->Push(_active);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGpsActive call failed" << Log::Endl;
	}
}

EXPORT void Native_playMissionCompleteAudio(const char* _audioName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB138AAB8A70D3C69);
	ctx->Reset();
	ctx->Push(_audioName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playMissionCompleteAudio call failed" << Log::Endl;
	}
}

EXPORT bool Native_isMissionCompletePlaying() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19A30C23F5827F8A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMissionCompletePlaying call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isMissionCompleteReadyForUi() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F259F82D873B8B8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMissionCompleteReadyForUi call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_blockDeathJingle(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF154B8D1775B2DEC);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native blockDeathJingle call failed" << Log::Endl;
	}
}

EXPORT bool Native_startAudioScene(const char* _scene) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x013A80FC08F6E4F2);
	ctx->Reset();
	ctx->Push(_scene);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startAudioScene call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_stopAudioScene(const char* _scene) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFE8422B3B94E688);
	ctx->Reset();
	ctx->Push(_scene);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopAudioScene call failed" << Log::Endl;
	}
}

EXPORT void Native_stopAudioScenes() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAC7FC81A75EC1A1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopAudioScenes call failed" << Log::Endl;
	}
}

EXPORT bool Native_isAudioSceneActive(const char* _scene) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB65B60556E2A9225);
	ctx->Reset();
	ctx->Push(_scene);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAudioSceneActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setAudioSceneVariable(const char* _scene, const char* _unkVariable, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF21A9EF089A2668);
	ctx->Reset();
	ctx->Push(_scene);
	ctx->Push(_unkVariable);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAudioSceneVariable call failed" << Log::Endl;
	}
}

EXPORT void Native_setAudioScriptCleanupTime(int32_t _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5F377B175A699C5);
	ctx->Reset();
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAudioScriptCleanupTime call failed" << Log::Endl;
	}
}

EXPORT void Native_addEntityToAudioMixGroup(int32_t _entity, const char* _groupName, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x153973AB99FE8980);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_groupName);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addEntityToAudioMixGroup call failed" << Log::Endl;
	}
}

EXPORT void Native_removeEntityFromAudioMixGroup(int32_t _entity, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x18EB48CFC41F2EA0);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeEntityFromAudioMixGroup call failed" << Log::Endl;
	}
}

EXPORT bool Native_audioIsScriptedMusicPlaying() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x845FFC3A4FEEFA3E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native audioIsScriptedMusicPlaying call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x2DD39BF3E2F9C47F() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DD39BF3E2F9C47F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2DD39BF3E2F9C47F call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_prepareMusicEvent(const char* _eventName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E5185B72EF5158A);
	ctx->Reset();
	ctx->Push(_eventName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native prepareMusicEvent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_cancelMusicEvent(const char* _eventName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B17A90291133DA5);
	ctx->Reset();
	ctx->Push(_eventName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cancelMusicEvent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_triggerMusicEvent(const char* _eventName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x706D57B0F50DA710);
	ctx->Reset();
	ctx->Push(_eventName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native triggerMusicEvent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isMusicOneshotPlaying() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA097AB275061FB21);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMusicOneshotPlaying call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getMusicPlaytime() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7A0D23DC414507B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMusicPlaytime call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x159B7318403A1CD8(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x159B7318403A1CD8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x159B7318403A1CD8 call failed" << Log::Endl;
	}
}

EXPORT void Native_recordBrokenGlass(float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFBE20329593DEC9D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native recordBrokenGlass call failed" << Log::Endl;
	}
}

EXPORT void Native_clearAllBrokenGlass() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB32209EFFDC04913);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearAllBrokenGlass call failed" << Log::Endl;
	}
}

EXPORT void Native__0x70B8EC8FC108A634(bool _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70B8EC8FC108A634);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x70B8EC8FC108A634 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x149AEE66F0CB3A99(float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x149AEE66F0CB3A99);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x149AEE66F0CB3A99 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8BF907833BE275DE(float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BF907833BE275DE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8BF907833BE275DE call failed" << Log::Endl;
	}
}

EXPORT void Native_forcePedPanicWalla() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x062D5EAD4DA2FA6A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forcePedPanicWalla call failed" << Log::Endl;
	}
}

EXPORT bool Native_prepareAlarm(const char* _alarmName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D74AE343DB65533);
	ctx->Reset();
	ctx->Push(_alarmName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native prepareAlarm call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_startAlarm(const char* _alarmName, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0355EF116C4C97B2);
	ctx->Reset();
	ctx->Push(_alarmName);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startAlarm call failed" << Log::Endl;
	}
}

EXPORT void Native_stopAlarm(const char* _alarmName, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1CADDCD98415A41);
	ctx->Reset();
	ctx->Push(_alarmName);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopAlarm call failed" << Log::Endl;
	}
}

EXPORT void Native_stopAllAlarms(bool _stop) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F794A877ADD4C92);
	ctx->Reset();
	ctx->Push(_stop);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopAllAlarms call failed" << Log::Endl;
	}
}

EXPORT bool Native_isAlarmPlaying(const char* _alarmName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x226435CB96CCFC8C);
	ctx->Reset();
	ctx->Push(_alarmName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAlarmPlaying call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getVehicleDefaultHorn(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02165D55000219AC);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleDefaultHorn call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehicleDefaultHornIgnoreMods(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xACB5DCCA1EC76840);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleDefaultHornIgnoreMods call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_resetPedAudioFlags(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF54BB7B61036F335);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetPedAudioFlags call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedAudioFootstepLoud(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0653B735BFBDFE87);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAudioFootstepLoud call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedAudioFootstepQuiet(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29DA3CA8D8B2692D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAudioFootstepQuiet call failed" << Log::Endl;
	}
}

EXPORT void Native_overridePlayerGroundMaterial(int32_t _hash, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2CC78CD3D0B50F9);
	ctx->Reset();
	ctx->Push(_hash);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native overridePlayerGroundMaterial call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBF4DC1784BE94DFA(int32_t _ped, bool _p1, int32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF4DC1784BE94DFA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBF4DC1784BE94DFA call failed" << Log::Endl;
	}
}

EXPORT void Native_overrideMicrophoneSettings(int32_t _hash, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75773E11BA459E90);
	ctx->Reset();
	ctx->Push(_hash);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native overrideMicrophoneSettings call failed" << Log::Endl;
	}
}

EXPORT void Native_freezeMicrophone() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD57AAAE0E2214D11);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native freezeMicrophone call failed" << Log::Endl;
	}
}

EXPORT void Native_distantCopCarSirens(bool _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x552369F549563AD5);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native distantCopCarSirens call failed" << Log::Endl;
	}
}

EXPORT void Native__0x43FA0DFC5DF87815(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43FA0DFC5DF87815);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x43FA0DFC5DF87815 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB81CF134AEB56FFB() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB81CF134AEB56FFB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB81CF134AEB56FFB call failed" << Log::Endl;
	}
}

EXPORT void Native_setAudioFlag(const char* _flagName, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9EFD5C25018725A);
	ctx->Reset();
	ctx->Push(_flagName);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAudioFlag call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_prepareSynchronizedAudioEvent(const char* _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7ABCACA4985A766);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native prepareSynchronizedAudioEvent call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_prepareSynchronizedAudioEventForScene(int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x029FE7CD1B7E2E75);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native prepareSynchronizedAudioEventForScene call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_playSynchronizedAudioEvent(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B2FD4560E55DD2D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playSynchronizedAudioEvent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_stopSynchronizedAudioEvent(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92D6A88E64A94430);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopSynchronizedAudioEvent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xC8EDE9BDBCCBA6D4(int32_t& _p0, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8EDE9BDBCCBA6D4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC8EDE9BDBCCBA6D4 call failed" << Log::Endl;
	}
}

EXPORT void Native_setSynchronizedAudioEventPositionThisFrame(const char* _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x950A154B8DAB6185);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSynchronizedAudioEventPositionThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setAudioSpecialEffectMode(int32_t _mode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12561FCBB62D5B9C);
	ctx->Reset();
	ctx->Push(_mode);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAudioSpecialEffectMode call failed" << Log::Endl;
	}
}

EXPORT void Native_setPortalSettingsOverride(const char* _p0, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x044DBAD7A7FA2BE5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPortalSettingsOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_removePortalSettingsOverride(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4BBFD9CD8B3922B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removePortalSettingsOverride call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE4E6DD5566D28C82() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4E6DD5566D28C82);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE4E6DD5566D28C82 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getMusicVolSlider() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A48AB4445D499BE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMusicVolSlider call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_requestTennisBanks(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4ADA3F19BE4A6047);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestTennisBanks call failed" << Log::Endl;
	}
}

EXPORT void Native_unrequestTennisBanks() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0150B6FF25A9E2E5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native unrequestTennisBanks call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBEF34B1D9624D5DD(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBEF34B1D9624D5DD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBEF34B1D9624D5DD call failed" << Log::Endl;
	}
}

EXPORT void Native_stopCutsceneAudio() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x806058BBDC136E06);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopCutsceneAudio call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasMultiplayerAudioDataLoaded() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x544810ED9DB6BBE6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasMultiplayerAudioDataLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasMultiplayerAudioDataUnloaded() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B50ABB1FE3746F4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasMultiplayerAudioDataUnloaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getVehicleDefaultHornVariation(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD53F3A29BCE2580E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleDefaultHornVariation call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setVehicleHornVariation(int32_t _vehicle, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0350E7E17BA767D0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleHornVariation call failed" << Log::Endl;
	}
}

EXPORT void Native_addScriptToRandomPed(const char* _name, int32_t _model, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4EE5367468A65CCC);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_model);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addScriptToRandomPed call failed" << Log::Endl;
	}
}

EXPORT void Native_registerObjectScriptBrain(const char* _scriptName, int32_t _modelHash, int32_t _p2, float _activationRange, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BE84C318BA6EC22);
	ctx->Reset();
	ctx->Push(_scriptName);
	ctx->Push(_modelHash);
	ctx->Push(_p2);
	ctx->Push(_activationRange);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerObjectScriptBrain call failed" << Log::Endl;
	}
}

EXPORT bool Native_isObjectWithinBrainActivationRange(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCBA154209823057);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isObjectWithinBrainActivationRange call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_registerWorldPointScriptBrain(const char* _scriptName, float _activationRange, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3CDC7136613284BD);
	ctx->Reset();
	ctx->Push(_scriptName);
	ctx->Push(_activationRange);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerWorldPointScriptBrain call failed" << Log::Endl;
	}
}

EXPORT bool Native_isWorldPointWithinBrainActivationRange() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5042CC6F5E3D450);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isWorldPointWithinBrainActivationRange call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_enableScriptBrainSet(int32_t _brainSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67AA4D73F0CFA86B);
	ctx->Reset();
	ctx->Push(_brainSet);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableScriptBrainSet call failed" << Log::Endl;
	}
}

EXPORT void Native_disableScriptBrainSet(int32_t _brainSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14D8518E9760F08F);
	ctx->Reset();
	ctx->Push(_brainSet);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableScriptBrainSet call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0B40ED49D7D6FF84() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B40ED49D7D6FF84);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0B40ED49D7D6FF84 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x4D953DF78EBF8158() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D953DF78EBF8158);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4D953DF78EBF8158 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6D6840CEE8845831(const char* _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D6840CEE8845831);
	ctx->Reset();
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6D6840CEE8845831 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6E91B04E08773030(const char* _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E91B04E08773030);
	ctx->Reset();
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6E91B04E08773030 call failed" << Log::Endl;
	}
}

EXPORT void Native_renderScriptCams(bool _render, bool _ease, int32_t _easeTime, bool _p3, bool _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07E5B515DB0636FC);
	ctx->Reset();
	ctx->Push(_render);
	ctx->Push(_ease);
	ctx->Push(_easeTime);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native renderScriptCams call failed" << Log::Endl;
	}
}

EXPORT void Native_stopRenderingScriptCamsUsingCatchUp(bool _render, float _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC819F3CBB62BF692);
	ctx->Reset();
	ctx->Push(_render);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopRenderingScriptCamsUsingCatchUp call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_createCam(const char* _camName, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3981DCE61D9E13F);
	ctx->Reset();
	ctx->Push(_camName);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createCam call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_createCamWithParams(const char* _camName, float _posX, float _posY, float _posZ, float _rotX, float _rotY, float _rotZ, float _fov, bool _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB51194800B257161);
	ctx->Reset();
	ctx->Push(_camName);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_fov);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createCamWithParams call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_createCamera(int32_t _camHash, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E3CF89C6BCCA67D);
	ctx->Reset();
	ctx->Push(_camHash);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createCamera call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_createCameraWithParams(int32_t _camHash, float _posX, float _posY, float _posZ, float _rotX, float _rotY, float _rotZ, float _fov, bool _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6ABFA3E16460F22D);
	ctx->Reset();
	ctx->Push(_camHash);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_fov);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createCameraWithParams call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_destroyCam(int32_t _cam, bool _bScriptHostCam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x865908C81A2C22E9);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_bScriptHostCam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native destroyCam call failed" << Log::Endl;
	}
}

EXPORT void Native_destroyAllCams(bool _bScriptHostCam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E5FB15663F79120);
	ctx->Reset();
	ctx->Push(_bScriptHostCam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native destroyAllCams call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesCamExist(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7A932170592B50E);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesCamExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setCamActive(int32_t _cam, bool _active) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x026FB97D0A425F84);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_active);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamActive call failed" << Log::Endl;
	}
}

EXPORT bool Native_isCamActive(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFB2B516207D3534);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCamActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isCamRendering(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02EC0AF5C5A49B7A);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCamRendering call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getRenderingCam() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5234F9F10919EABA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRenderingCam call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT vector3_t Native_getCamCoord(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAC038F7459AE5AE);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCamCoord call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native_getCamRot(int32_t _cam, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D304C1C955E3E12);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCamRot call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT float Native_getCamFov(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3330A45CCCDB26A);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCamFov call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getCamNearClip(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC520A34DAFBF24B1);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCamNearClip call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getCamFarClip(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB60A9CFEB21CA6AA);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCamFarClip call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getCamFarDof(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x255F8DAFD540D397);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCamFarDof call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setCamParams(int32_t _cam, float _posX, float _posY, float _posZ, float _rotX, float _rotY, float _rotZ, float _fieldOfView, int32_t _p8, int32_t _p9, int32_t _p10, int32_t _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFD8727AEA3CCEBA);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_fieldOfView);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamParams call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamCoord(int32_t _cam, float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D41783FB745E42E);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamRot(int32_t _cam, float _rotX, float _rotY, float _rotZ, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85973643155D0B07);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamRot call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamFov(int32_t _cam, float _fieldOfView) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB13C14F66A00D047);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_fieldOfView);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamFov call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamNearClip(int32_t _cam, float _nearClip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7848EFCCC545182);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_nearClip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamNearClip call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamFarClip(int32_t _cam, float _farClip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE306F2A904BF86E);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_farClip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamFarClip call failed" << Log::Endl;
	}
}

EXPORT void Native__0xAABD62873FFB1A33(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAABD62873FFB1A33);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAABD62873FFB1A33 call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamMotionBlurStrength(int32_t _cam, float _strength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F0F77FBA9A8F2E6);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_strength);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamMotionBlurStrength call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamNearDof(int32_t _cam, float _nearDOF) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3FA4BF0A7AB7DE2C);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_nearDOF);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamNearDof call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamFarDof(int32_t _cam, float _farDOF) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDD91296CD01AEE0);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_farDOF);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamFarDof call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamDofStrength(int32_t _cam, float _dofStrength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EE29B4D7D5DF897);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_dofStrength);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamDofStrength call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamDofPlanes(int32_t _cam, float _p1, float _p2, float _p3, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3CF48F6F96E749DC);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamDofPlanes call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamUseShallowDofMode(int32_t _cam, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16A96863A17552BB);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamUseShallowDofMode call failed" << Log::Endl;
	}
}

EXPORT void Native_setUseHiDof() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA13B0222F3D94A94);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setUseHiDof call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF55E4046F6F831DC(int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF55E4046F6F831DC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF55E4046F6F831DC call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE111A7C0D200CBC5(int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE111A7C0D200CBC5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE111A7C0D200CBC5 call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamDofFnumberOfLens(int32_t _camera, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7DD234D6F3914C5B);
	ctx->Reset();
	ctx->Push(_camera);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamDofFnumberOfLens call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamDofFocalLengthMultiplier(int32_t _camera, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47B595D60664CFFA);
	ctx->Reset();
	ctx->Push(_camera);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamDofFocalLengthMultiplier call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamDofFocusDistanceBias(int32_t _camera, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC669EEA5D031B7DE);
	ctx->Reset();
	ctx->Push(_camera);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamDofFocusDistanceBias call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamDofMaxNearInFocusDistance(int32_t _camera, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3654A441402562D);
	ctx->Reset();
	ctx->Push(_camera);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamDofMaxNearInFocusDistance call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamDofMaxNearInFocusDistanceBlendLevel(int32_t _camera, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C654B4943BDDF7C);
	ctx->Reset();
	ctx->Push(_camera);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamDofMaxNearInFocusDistanceBlendLevel call failed" << Log::Endl;
	}
}

EXPORT void Native_attachCamToEntity(int32_t _cam, int32_t _entity, float _xOffset, float _yOffset, float _zOffset, bool _isRelative) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEDB7D269E8C60E3);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_entity);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_isRelative);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachCamToEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_attachCamToPedBone(int32_t _cam, int32_t _ped, int32_t _boneIndex, float _x, float _y, float _z, bool _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61A3DBA14AB7F411);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_ped);
	ctx->Push(_boneIndex);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachCamToPedBone call failed" << Log::Endl;
	}
}

EXPORT void Native_attachCamToPedBone2(int32_t _cam, int32_t _ped, int32_t _boneIndex, float _p3, float _p4, float _p5, float _p6, float _p7, float _p8, bool _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x149916F50C34A40D);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_ped);
	ctx->Push(_boneIndex);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachCamToPedBone2 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x202A5ED9CE01D6E7(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x202A5ED9CE01D6E7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x202A5ED9CE01D6E7 call failed" << Log::Endl;
	}
}

EXPORT void Native_attachCamToVehicleBone(int32_t _cam, int32_t _vehicle, int32_t _boneIndex, bool _relativeRotation, float _rotX, float _rotY, float _rotZ, float _offsetX, float _offsetY, float _offsetZ, bool _fixedDirection) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DB3F12A02CAEF72);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_vehicle);
	ctx->Push(_boneIndex);
	ctx->Push(_relativeRotation);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_fixedDirection);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachCamToVehicleBone call failed" << Log::Endl;
	}
}

EXPORT void Native_detachCam(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2FABBE87F4BAD82);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native detachCam call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamInheritRollVehicle(int32_t _cam, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45F1DE9C34B93AE6);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamInheritRollVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_pointCamAtCoord(int32_t _cam, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF75497BB865F0803);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pointCamAtCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_pointCamAtEntity(int32_t _cam, int32_t _entity, float _p2, float _p3, float _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5640BFF86B16E8DC);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_entity);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pointCamAtEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_pointCamAtPedBone(int32_t _cam, int32_t _ped, int32_t _boneIndex, float _x, float _y, float _z, bool _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68B2B5F33BA63C41);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_ped);
	ctx->Push(_boneIndex);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pointCamAtPedBone call failed" << Log::Endl;
	}
}

EXPORT void Native_stopCamPointing(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF33AB75780BA57DE);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopCamPointing call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamAffectsAiming(int32_t _cam, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C1DC7770C51DC8D);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamAffectsAiming call failed" << Log::Endl;
	}
}

EXPORT void Native__0x661B5C8654ADD825(int32_t _cam, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x661B5C8654ADD825);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x661B5C8654ADD825 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA2767257A320FC82(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2767257A320FC82);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA2767257A320FC82 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x271017B9BA825366(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x271017B9BA825366);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x271017B9BA825366 call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamDebugName(int32_t _camera, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B93E0107865DD40);
	ctx->Reset();
	ctx->Push(_camera);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamDebugName call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getDebugCamera() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77C3CEC46BE286F6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDebugCamera call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_addCamSplineNode(int32_t _camera, float _x, float _y, float _z, float _xRot, float _yRot, float _zRot, int32_t _length, int32_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8609C75EC438FB3B);
	ctx->Reset();
	ctx->Push(_camera);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_length);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addCamSplineNode call failed" << Log::Endl;
	}
}

EXPORT void Native_addCamSplineNodeUsingCameraFrame(int32_t _cam, int32_t _cam2, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A9F2A468B328E74);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_cam2);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addCamSplineNodeUsingCameraFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_addCamSplineNodeUsingCamera(int32_t _cam, int32_t _cam2, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0FB82563989CF4FB);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_cam2);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addCamSplineNodeUsingCamera call failed" << Log::Endl;
	}
}

EXPORT void Native_addCamSplineNodeUsingGameplayFrame(int32_t _cam, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x609278246A29CA34);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addCamSplineNodeUsingGameplayFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamSplinePhase(int32_t _cam, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x242B5874F0A4E052);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamSplinePhase call failed" << Log::Endl;
	}
}

EXPORT float Native_getCamSplinePhase(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5349E36C546509A);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCamSplinePhase call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getCamSplineNodePhase(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9D0E694C8282C96);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCamSplineNodePhase call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setCamSplineDuration(int32_t _cam, int32_t _timeDuration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1381539FEE034CDA);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_timeDuration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamSplineDuration call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamSplineSmoothingStyle(int32_t _cam, int32_t _smoothingStyle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1B0F412F109EA5D);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_smoothingStyle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamSplineSmoothingStyle call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getCamSplineNodeIndex(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB22B17DF858716A6);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCamSplineNodeIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setCamSplineNodeEase(int32_t _cam, int32_t _p1, int32_t _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83B8201ED82A9A2D);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamSplineNodeEase call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamSplineNodeVelocityScale(int32_t _cam, int32_t _p1, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6385DEB180F319F);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamSplineNodeVelocityScale call failed" << Log::Endl;
	}
}

EXPORT void Native_overrideCamSplineVelocity(int32_t _cam, int32_t _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40B62FA033EB0346);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native overrideCamSplineVelocity call failed" << Log::Endl;
	}
}

EXPORT void Native_overrideCamSplineMotionBlur(int32_t _cam, int32_t _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7DCF7C708D292D55);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native overrideCamSplineMotionBlur call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamSplineNodeExtraFlags(int32_t _cam, int32_t _p1, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7BF1A54AE67AC070);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamSplineNodeExtraFlags call failed" << Log::Endl;
	}
}

EXPORT bool Native_isCamSplinePaused(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0290F35C0AD97864);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCamSplinePaused call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setCamActiveWithInterp(int32_t _camTo, int32_t _camFrom, int32_t _duration, int32_t _easeLocation, int32_t _easeRotation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FBDA379383A52A4);
	ctx->Reset();
	ctx->Push(_camTo);
	ctx->Push(_camFrom);
	ctx->Push(_duration);
	ctx->Push(_easeLocation);
	ctx->Push(_easeRotation);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamActiveWithInterp call failed" << Log::Endl;
	}
}

EXPORT bool Native_isCamInterpolating(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x036F97C908C2B52C);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCamInterpolating call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_shakeCam(int32_t _cam, const char* _type, float _amplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A25241C340D3822);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_type);
	ctx->Push(_amplitude);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native shakeCam call failed" << Log::Endl;
	}
}

EXPORT void Native_animatedShakeCam(int32_t _cam, const char* _p1, const char* _p2, const char* _p3, float _amplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2746EEAE3E577CD);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_amplitude);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native animatedShakeCam call failed" << Log::Endl;
	}
}

EXPORT bool Native_isCamShaking(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B24BFE83A2BE47B);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCamShaking call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setCamShakeAmplitude(int32_t _cam, float _amplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD93DB43B82BC0D00);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_amplitude);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamShakeAmplitude call failed" << Log::Endl;
	}
}

EXPORT void Native_stopCamShaking(int32_t _cam, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBDECF64367884AC3);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopCamShaking call failed" << Log::Endl;
	}
}

EXPORT void Native_shakeScriptGlobal(const char* _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4C8CF9E353AFECA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native shakeScriptGlobal call failed" << Log::Endl;
	}
}

EXPORT void Native_animatedShakeScriptGlobal(const char* _p0, const char* _p1, const char* _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2EAE3FB8CDBED31);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native animatedShakeScriptGlobal call failed" << Log::Endl;
	}
}

EXPORT bool Native_isScriptGlobalShaking() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC912AF078AF19212);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScriptGlobalShaking call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_stopScriptGlobalShaking(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C9D7949FA533490);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopScriptGlobalShaking call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5D96CFB59DA076A0(int32_t _vehicle, int32_t _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D96CFB59DA076A0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5D96CFB59DA076A0 call failed" << Log::Endl;
	}
}

EXPORT bool Native_playCamAnim(int32_t _cam, const char* _animName, const char* _animDictionary, float _x, float _y, float _z, float _xRot, float _yRot, float _zRot, bool _p9, int32_t _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A2D0FB2E7852392);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_animName);
	ctx->Push(_animDictionary);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_p9);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playCamAnim call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isCamPlayingAnim(int32_t _cam, const char* _animName, const char* _animDictionary) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC90621D8A0CEECF2);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_animName);
	ctx->Push(_animDictionary);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCamPlayingAnim call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setCamAnimCurrentPhase(int32_t _cam, float _phase) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4145A4C44FF3B5A6);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_phase);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamAnimCurrentPhase call failed" << Log::Endl;
	}
}

EXPORT float Native_getCamAnimCurrentPhase(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA10B2DB49E92A6B0);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCamAnimCurrentPhase call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT bool Native_playSynchronizedCamAnim(int32_t _p0, int32_t _p1, const char* _animName, const char* _animDictionary) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE32EFE9AB4A9AA0C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_animName);
	ctx->Push(_animDictionary);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playSynchronizedCamAnim call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setFlyCamHorizontalResponse(int32_t _cam, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x503F5920162365B2);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFlyCamHorizontalResponse call failed" << Log::Endl;
	}
}

EXPORT void Native_setFlyCamVerticalSpeedMultiplier(int32_t _cam, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE827B9382CFB41BA);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFlyCamVerticalSpeedMultiplier call failed" << Log::Endl;
	}
}

EXPORT void Native_setFlyCamMaxHeight(int32_t _cam, float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9D02130ECDD1D77);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFlyCamMaxHeight call failed" << Log::Endl;
	}
}

EXPORT void Native_setFlyCamCoordAndConstrain(int32_t _cam, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC91C6C55199308CA);
	ctx->Reset();
	ctx->Push(_cam);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFlyCamCoordAndConstrain call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC8B5C4A79CC18B94(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8B5C4A79CC18B94);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC8B5C4A79CC18B94 call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x5C48A1D6E3B33179(int32_t _cam) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C48A1D6E3B33179);
	ctx->Reset();
	ctx->Push(_cam);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5C48A1D6E3B33179 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isScreenFadedOut() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB16FCE9DDC7BA182);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScreenFadedOut call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isScreenFadedIn() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A859503B0C08678);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScreenFadedIn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isScreenFadingOut() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x797AC7CB535BA28F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScreenFadingOut call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isScreenFadingIn() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C544BC6C57AC575);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScreenFadingIn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_doScreenFadeIn(int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4E8E24955024033);
	ctx->Reset();
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doScreenFadeIn call failed" << Log::Endl;
	}
}

EXPORT void Native_doScreenFadeOut(int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x891B5B39AC6302AF);
	ctx->Reset();
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doScreenFadeOut call failed" << Log::Endl;
	}
}

EXPORT void Native_setWidescreenBorders(bool _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCD4EA924F42D01A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWidescreenBorders call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x4879E4FE39074CDF() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4879E4FE39074CDF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4879E4FE39074CDF call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT vector3_t Native_getGameplayCamCoord() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14D6F5678D8F1B37);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getGameplayCamCoord call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native_getGameplayCamRot(int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x837765A25378F0BB);
	ctx->Reset();
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getGameplayCamRot call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT float Native_getGameplayCamFov() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65019750A0324133);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getGameplayCamFov call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native__0x487A82C650EB7799(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x487A82C650EB7799);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x487A82C650EB7799 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0225778816FDC28C(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0225778816FDC28C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0225778816FDC28C call failed" << Log::Endl;
	}
}

EXPORT float Native_getGameplayCamRelativeHeading() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x743607648ADD4587);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getGameplayCamRelativeHeading call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setGameplayCamRelativeHeading(float _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4EC2312F4E5B1F1);
	ctx->Reset();
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayCamRelativeHeading call failed" << Log::Endl;
	}
}

EXPORT float Native_getGameplayCamRelativePitch() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A6867B4845BEDA2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getGameplayCamRelativePitch call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setGameplayCamRelativePitch(float _angle, float _scalingFactor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D0858B8EDFD2B7D);
	ctx->Reset();
	ctx->Push(_angle);
	ctx->Push(_scalingFactor);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayCamRelativePitch call failed" << Log::Endl;
	}
}

EXPORT void Native_setGameplayCamRelativeRotation(float _roll, float _pitch, float _yaw) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48608C3464F58AB4);
	ctx->Reset();
	ctx->Push(_roll);
	ctx->Push(_pitch);
	ctx->Push(_yaw);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayCamRelativeRotation call failed" << Log::Endl;
	}
}

EXPORT void Native__0x28B022A17B068A3A(float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28B022A17B068A3A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x28B022A17B068A3A call failed" << Log::Endl;
	}
}

EXPORT void Native_setGameplayCamRawYaw(float _yaw) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x103991D4A307D472);
	ctx->Reset();
	ctx->Push(_yaw);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayCamRawYaw call failed" << Log::Endl;
	}
}

EXPORT void Native_setGameplayCamRawPitch(float _pitch) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x759E13EBC1C15C5A);
	ctx->Reset();
	ctx->Push(_pitch);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayCamRawPitch call failed" << Log::Endl;
	}
}

EXPORT void Native__0x469F2ECDEC046337(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x469F2ECDEC046337);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x469F2ECDEC046337 call failed" << Log::Endl;
	}
}

EXPORT void Native_shakeGameplayCam(const char* _shakeName, float _intensity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD55E49555E017CF);
	ctx->Reset();
	ctx->Push(_shakeName);
	ctx->Push(_intensity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native shakeGameplayCam call failed" << Log::Endl;
	}
}

EXPORT bool Native_isGameplayCamShaking() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x016C090630DF1F89);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isGameplayCamShaking call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setGameplayCamShakeAmplitude(float _amplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA87E00932DB4D85D);
	ctx->Reset();
	ctx->Push(_amplitude);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayCamShakeAmplitude call failed" << Log::Endl;
	}
}

EXPORT void Native_stopGameplayCamShaking(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0EF93E9F3D08C178);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopGameplayCamShaking call failed" << Log::Endl;
	}
}

EXPORT void Native_setGameplayCamFollowPedThisUpdate(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BBACBF51DA047A8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayCamFollowPedThisUpdate call failed" << Log::Endl;
	}
}

EXPORT bool Native_isGameplayCamRendering() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39B5D1B10383F0C8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isGameplayCamRendering call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x3044240D2E0FA842() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3044240D2E0FA842);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3044240D2E0FA842 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x705A276EBFF3133D() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x705A276EBFF3133D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x705A276EBFF3133D call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xDB90C6CCA48940F1(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB90C6CCA48940F1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDB90C6CCA48940F1 call failed" << Log::Endl;
	}
}

EXPORT void Native_enableCrosshairThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA7F0AD7E9BA676F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableCrosshairThisFrame call failed" << Log::Endl;
	}
}

EXPORT bool Native_isGameplayCamLookingBehind() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70FDA869F3317EA9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isGameplayCamLookingBehind call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_disableCamCollisionForEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2AED6301F67007D5);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableCamCollisionForEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_disableCamCollisionForObject(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49482F9FCD825AAA);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableCamCollisionForObject call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA7092AFE81944852() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7092AFE81944852);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA7092AFE81944852 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xFD3151CD37EA2245(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD3151CD37EA2245);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFD3151CD37EA2245 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB1381B97F70C7B30() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1381B97F70C7B30);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB1381B97F70C7B30 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xDD79DF9F4D26E1C9() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD79DF9F4D26E1C9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDD79DF9F4D26E1C9 call failed" << Log::Endl;
	}
}

EXPORT bool Native_isSphereVisible(float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE33D59DA70B58FDF);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSphereVisible call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isFollowPedCamActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6D3D26810C8E0F9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isFollowPedCamActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_setFollowPedCamThisUpdate(const char* _camName, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44A113DD6FFC48D1);
	ctx->Reset();
	ctx->Push(_camName);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFollowPedCamThisUpdate call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x271401846BD26E92(bool _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x271401846BD26E92);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x271401846BD26E92 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC8391C309684595A() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8391C309684595A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC8391C309684595A call failed" << Log::Endl;
	}
}

EXPORT void Native_clampGameplayCamYaw(float _minimum, float _maximum) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F993D26E0CA5E8E);
	ctx->Reset();
	ctx->Push(_minimum);
	ctx->Push(_maximum);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clampGameplayCamYaw call failed" << Log::Endl;
	}
}

EXPORT void Native_clampGameplayCamPitch(float _minimum, float _maximum) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA516C198B7DCA1E1);
	ctx->Reset();
	ctx->Push(_minimum);
	ctx->Push(_maximum);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clampGameplayCamPitch call failed" << Log::Endl;
	}
}

EXPORT void Native_animateGameplayCamZoom(float _p0, float _distance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF2E1F7742402E81);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_distance);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native animateGameplayCamZoom call failed" << Log::Endl;
	}
}

EXPORT void Native_setInVehicleCamStateThisUpdate(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE9EA16D6E54CDCA4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setInVehicleCamStateThisUpdate call failed" << Log::Endl;
	}
}

EXPORT void Native_disableFirstPersonCamThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE2EF5DA284CC8DF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableFirstPersonCamThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native__0x59424BD75174C9B1() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59424BD75174C9B1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x59424BD75174C9B1 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9F97DA93681F87EA() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F97DA93681F87EA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9F97DA93681F87EA call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getFollowPedCamZoomLevel() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33E6C8EFD0CD93E9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFollowPedCamZoomLevel call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getFollowPedCamViewMode() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D4D46230B2C353A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFollowPedCamViewMode call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setFollowPedCamViewMode(int32_t _viewMode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A4F9EDF1673F704);
	ctx->Reset();
	ctx->Push(_viewMode);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFollowPedCamViewMode call failed" << Log::Endl;
	}
}

EXPORT bool Native_isFollowVehicleCamActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCBBDE6D335D6D496);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isFollowVehicleCamActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x91EF6EE6419E5B97(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x91EF6EE6419E5B97);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x91EF6EE6419E5B97 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9DFE13ECDC1EC196(bool _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DFE13ECDC1EC196);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9DFE13ECDC1EC196 call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x79C0E43EB9B944E2(int32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79C0E43EB9B944E2);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x79C0E43EB9B944E2 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getFollowVehicleCamZoomLevel() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE82280AB767B690);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFollowVehicleCamZoomLevel call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setFollowVehicleCamZoomLevel(int32_t _zoomLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19464CB6E4078C8A);
	ctx->Reset();
	ctx->Push(_zoomLevel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFollowVehicleCamZoomLevel call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getFollowVehicleCamViewMode() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4FF579AC0E3AAAE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFollowVehicleCamViewMode call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setFollowVehicleCamViewMode(int32_t _viewMode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC253D7842768F48);
	ctx->Reset();
	ctx->Push(_viewMode);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFollowVehicleCamViewMode call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getCamViewModeForContext(int32_t _context) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE778F8C7E1142E2);
	ctx->Reset();
	ctx->Push(_context);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCamViewModeForContext call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setCamViewModeForContext(int32_t _context, int32_t _viewMode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A2173E46DAECD12);
	ctx->Reset();
	ctx->Push(_context);
	ctx->Push(_viewMode);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamViewModeForContext call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getCamActiveViewModeContext() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19CAFA3C87F7C2FF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCamActiveViewModeContext call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_useStuntCameraThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6493CF69859B116A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native useStuntCameraThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setGameplayCamHash(const char* _camName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x425A920FDB9A0DDA);
	ctx->Reset();
	ctx->Push(_camName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayCamHash call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0AA27680A0BD43FA() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AA27680A0BD43FA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0AA27680A0BD43FA call failed" << Log::Endl;
	}
}

EXPORT void Native_setFollowTurretSeatCam(int32_t _seatIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C90CAB09951A12F);
	ctx->Reset();
	ctx->Push(_seatIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFollowTurretSeatCam call failed" << Log::Endl;
	}
}

EXPORT bool Native_isAimCamActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68EDDA28A5976D07);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAimCamActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isAimCamThirdPersonActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74BD83EA840F6BC9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAimCamThirdPersonActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isFirstPersonAimCamActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E346D934122613F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isFirstPersonAimCamActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_disableAimCamThisUpdate() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A31FE0049E542F6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableAimCamThisUpdate call failed" << Log::Endl;
	}
}

EXPORT float Native_getFirstPersonAimCamZoomFactor() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EC52CC40597D170);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFirstPersonAimCamZoomFactor call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setFirstPersonAimCamZoomFactor(float _zoomFactor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70894BD0915C5BCA);
	ctx->Reset();
	ctx->Push(_zoomFactor);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFirstPersonAimCamZoomFactor call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCED08CBE8EBB97C7(float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCED08CBE8EBB97C7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCED08CBE8EBB97C7 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2F7F2B26DD3F18EE(float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F7F2B26DD3F18EE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2F7F2B26DD3F18EE call failed" << Log::Endl;
	}
}

EXPORT void Native_setFirstPersonCamPitchRange(float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCFC632DB7673BF0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFirstPersonCamPitchRange call failed" << Log::Endl;
	}
}

EXPORT void Native_setFirstPersonAimCamNearClipThisUpdate(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AF7B437918103B3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFirstPersonAimCamNearClipThisUpdate call failed" << Log::Endl;
	}
}

EXPORT void Native_setThirdPersonAimCamNearClipThisUpdate(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42156508606DE65E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setThirdPersonAimCamNearClipThisUpdate call failed" << Log::Endl;
	}
}

EXPORT void Native__0x4008EDF7D6E48175(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4008EDF7D6E48175);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4008EDF7D6E48175 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x380B4968D1E09E55() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x380B4968D1E09E55);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x380B4968D1E09E55 call failed" << Log::Endl;
	}
}

EXPORT vector3_t Native_getFinalRenderedCamCoord() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA200EB1EE790F448);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFinalRenderedCamCoord call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native_getFinalRenderedCamRot(int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B4E4C817FCC2DFB);
	ctx->Reset();
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFinalRenderedCamRot call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native_getFinalRenderedInWhenFriendlyRot(int32_t _player, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26903D9CD1175F2C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFinalRenderedInWhenFriendlyRot call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT float Native_getFinalRenderedCamFov() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80EC114669DAEFF4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFinalRenderedCamFov call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getFinalRenderedInWhenFriendlyFov(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F35F6732C3FBBA0);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFinalRenderedInWhenFriendlyFov call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getFinalRenderedCamNearClip() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0082607100D7193);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFinalRenderedCamNearClip call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getFinalRenderedCamFarClip() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFC8CBC606FDB0FC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFinalRenderedCamFarClip call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getFinalRenderedCamNearDof() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA03502FC581F7D9B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFinalRenderedCamNearDof call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getFinalRenderedCamFarDof() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9780F32BCAF72431);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFinalRenderedCamFarDof call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getFinalRenderedCamMotionBlurStrength() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x162F9D995753DC19);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFinalRenderedCamMotionBlurStrength call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setGameplayCoordHint(float _x, float _y, float _z, int32_t _duration, int32_t _blendOutDuration, int32_t _blendInDuration, int32_t _unk) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD51ADCD2D8BC0FB3);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_duration);
	ctx->Push(_blendOutDuration);
	ctx->Push(_blendInDuration);
	ctx->Push(_unk);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayCoordHint call failed" << Log::Endl;
	}
}

EXPORT void Native_setGameplayPedHint(int32_t _p0, float _x1, float _y1, float _z1, bool _p4, int32_t _p5, int32_t _p6, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B486269ACD548D3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayPedHint call failed" << Log::Endl;
	}
}

EXPORT void Native_setGameplayVehicleHint(int32_t _vehicle, float _offsetX, float _offsetY, float _offsetZ, bool _p4, int32_t _time, int32_t _easeInTime, int32_t _easeOutTime) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2297E18F3E71C2E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_p4);
	ctx->Push(_time);
	ctx->Push(_easeInTime);
	ctx->Push(_easeOutTime);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayVehicleHint call failed" << Log::Endl;
	}
}

EXPORT void Native_setGameplayObjectHint(int32_t _p0, float _p1, float _p2, float _p3, bool _p4, int32_t _p5, int32_t _p6, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83E87508A2CA2AC6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayObjectHint call failed" << Log::Endl;
	}
}

EXPORT void Native_setGameplayEntityHint(int32_t _entity, float _xOffset, float _yOffset, float _zOffset, bool _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x189E955A8313E298);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayEntityHint call failed" << Log::Endl;
	}
}

EXPORT bool Native_isGameplayHintActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE520FF1AD2785B40);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isGameplayHintActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_stopGameplayHint(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF46C581C61718916);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopGameplayHint call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCCD078C2665D2973(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCD078C2665D2973);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCCD078C2665D2973 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x247ACBC4ABBC9D1C(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x247ACBC4ABBC9D1C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x247ACBC4ABBC9D1C call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xBF72910D0F26F025() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF72910D0F26F025);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBF72910D0F26F025 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setGameplayHintFov(float _FOV) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x513403FB9C56211F);
	ctx->Reset();
	ctx->Push(_FOV);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayHintFov call failed" << Log::Endl;
	}
}

EXPORT void Native_setGameplayHintFollowDistanceScalar(float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8BDBF3D573049A1);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayHintFollowDistanceScalar call failed" << Log::Endl;
	}
}

EXPORT void Native_setGameplayHintBaseOrbitPitchOffset(float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1F8363DFAD03848);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayHintBaseOrbitPitchOffset call failed" << Log::Endl;
	}
}

EXPORT void Native_setGameplayHintAnimOffsetx(float _xOffset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D7B620DAE436138);
	ctx->Reset();
	ctx->Push(_xOffset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayHintAnimOffsetx call failed" << Log::Endl;
	}
}

EXPORT void Native_setGameplayHintAnimOffsety(float _yOffset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC92717EF615B6704);
	ctx->Reset();
	ctx->Push(_yOffset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayHintAnimOffsety call failed" << Log::Endl;
	}
}

EXPORT void Native_setGameplayHintAnimCloseup(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3433EADAAF7EE40);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayHintAnimCloseup call failed" << Log::Endl;
	}
}

EXPORT void Native_setCinematicButtonActive(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51669F7D1FB53D9F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCinematicButtonActive call failed" << Log::Endl;
	}
}

EXPORT bool Native_isCinematicCamRendering() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB15162CB5826E9E8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCinematicCamRendering call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_shakeCinematicCam(const char* _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCE214D9ED58F3CF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native shakeCinematicCam call failed" << Log::Endl;
	}
}

EXPORT bool Native_isCinematicCamShaking() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBC08F6B4CB8FF0A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCinematicCamShaking call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setCinematicCamShakeAmplitude(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC724C701C30B2FE7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCinematicCamShakeAmplitude call failed" << Log::Endl;
	}
}

EXPORT void Native_stopCinematicCamShaking(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2238E588E588A6D7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopCinematicCamShaking call failed" << Log::Endl;
	}
}

EXPORT void Native_disableVehicleFirstPersonCamThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADFF1B2A555F5FBA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableVehicleFirstPersonCamThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native__0x62ECFCFDEE7885D6() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62ECFCFDEE7885D6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x62ECFCFDEE7885D6 call failed" << Log::Endl;
	}
}

EXPORT void Native_invalidateVehicleIdleCam() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E4CFFF989258472);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native invalidateVehicleIdleCam call failed" << Log::Endl;
	}
}

EXPORT void Native_invalidateIdleCam() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4F2C0D4EE209E20);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native invalidateIdleCam call failed" << Log::Endl;
	}
}

EXPORT bool Native_isCinematicIdleCamRendering() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA9D2AA3E326D720);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCinematicIdleCamRendering call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isInVehicleCamDisabled() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F32C0D5A90A9B40);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isInVehicleCamDisabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_createCinematicShot(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x741B0129D4560F31);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createCinematicShot call failed" << Log::Endl;
	}
}

EXPORT bool Native_isCinematicShotActive(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC9F3371A7C28BC9);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCinematicShotActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_stopCinematicShot(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7660C6E75D3A078E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopCinematicShot call failed" << Log::Endl;
	}
}

EXPORT void Native_forceCinematicRenderingThisUpdate(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA41BCD7213805AAC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceCinematicRenderingThisUpdate call failed" << Log::Endl;
	}
}

EXPORT void Native__0xDC9DA9E8789F5246() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC9DA9E8789F5246);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDC9DA9E8789F5246 call failed" << Log::Endl;
	}
}

EXPORT void Native_setCinematicModeActive(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCF0754AC3D6FD4E);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCinematicModeActive call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x1F2300CB7FA7B7F6() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F2300CB7FA7B7F6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1F2300CB7FA7B7F6 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x17FCA7199A530203() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17FCA7199A530203);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x17FCA7199A530203 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xD7360051C885628B() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7360051C885628B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD7360051C885628B call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isCinematicCamActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5F1E89A970B7796);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCinematicCamActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x7B8A361C1813FBEF() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B8A361C1813FBEF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7B8A361C1813FBEF call failed" << Log::Endl;
	}
}

EXPORT void Native_stopCutsceneCamShaking() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB629FFD9285FA06);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopCutsceneCamShaking call failed" << Log::Endl;
	}
}

EXPORT void Native__0x324C5AA411DA7737(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x324C5AA411DA7737);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x324C5AA411DA7737 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x12DED8CA53D47EA5(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12DED8CA53D47EA5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x12DED8CA53D47EA5 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getFocusPedOnScreen(float _p0, int32_t _p1, float _p2, float _p3, float _p4, float _p5, float _p6, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89215EC747DF244A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFocusPedOnScreen call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x5A43C76F7FC7BA5F() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A43C76F7FC7BA5F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5A43C76F7FC7BA5F call failed" << Log::Endl;
	}
}

EXPORT void Native_setCamEffect(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80C8B1846639BB19);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamEffect call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5C41E6BABC9E2112(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C41E6BABC9E2112);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5C41E6BABC9E2112 call failed" << Log::Endl;
	}
}

EXPORT void Native_setGameplayCamVehicleCamera(const char* _vehicleName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21E253A7F8DA5DFB);
	ctx->Reset();
	ctx->Push(_vehicleName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayCamVehicleCamera call failed" << Log::Endl;
	}
}

EXPORT void Native_setGameplayCamVehicleCameraName(int32_t _vehicleModel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11FA5D3479C7DD47);
	ctx->Reset();
	ctx->Push(_vehicleModel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGameplayCamVehicleCameraName call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xEAF0FA793D05C592() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAF0FA793D05C592);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEAF0FA793D05C592 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x62374889A4D59F72() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62374889A4D59F72);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x62374889A4D59F72 call failed" << Log::Endl;
	}
}

EXPORT float Native_replayFreeCamGetMaxRange() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BFCEB5EA1B161B6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native replayFreeCamGetMaxRange call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setClockTime(int32_t _hour, int32_t _minute, int32_t _second) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47C3B5848C3E45D8);
	ctx->Reset();
	ctx->Push(_hour);
	ctx->Push(_minute);
	ctx->Push(_second);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setClockTime call failed" << Log::Endl;
	}
}

EXPORT void Native_pauseClock(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4055E40BD2DBEC1D);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pauseClock call failed" << Log::Endl;
	}
}

EXPORT void Native_advanceClockTimeTo(int32_t _hour, int32_t _minute, int32_t _second) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8CA9670B9D83B3B);
	ctx->Reset();
	ctx->Push(_hour);
	ctx->Push(_minute);
	ctx->Push(_second);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native advanceClockTimeTo call failed" << Log::Endl;
	}
}

EXPORT void Native_addToClockTime(int32_t _hours, int32_t _minutes, int32_t _seconds) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD716F30D8C8980E2);
	ctx->Reset();
	ctx->Push(_hours);
	ctx->Push(_minutes);
	ctx->Push(_seconds);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addToClockTime call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getClockHours() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25223CA6B4D20B7F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClockHours call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getClockMinutes() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13D2B8ADD79640F2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClockMinutes call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getClockSeconds() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x494E97C2EF27C470);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClockSeconds call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setClockDate(int32_t _day, int32_t _month, int32_t _year) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB096419DF0D06CE7);
	ctx->Reset();
	ctx->Push(_day);
	ctx->Push(_month);
	ctx->Push(_year);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setClockDate call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getClockDayOfWeek() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD972E4BD7AEB235F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClockDayOfWeek call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getClockDayOfMonth() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D10BC92A4DB1D35);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClockDayOfMonth call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getClockMonth() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBC72712E80257A1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClockMonth call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getClockYear() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x961777E64BDAF717);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClockYear call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getMillisecondsPerGameMinute() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F8B4D1C595B11DB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMillisecondsPerGameMinute call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_getPosixTime(int32_t& _year, int32_t& _month, int32_t& _day, int32_t& _hour, int32_t& _minute, int32_t& _second) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA488F299A5B164E);
	ctx->Reset();
	ctx->Push(_year);
	ctx->Push(_month);
	ctx->Push(_day);
	ctx->Push(_hour);
	ctx->Push(_minute);
	ctx->Push(_second);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPosixTime call failed" << Log::Endl;
	}
}

EXPORT void Native_getUtcTime(int32_t& _year, int32_t& _month, int32_t& _day, int32_t& _hour, int32_t& _minute, int32_t& _second) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8117E09A19EEF4D3);
	ctx->Reset();
	ctx->Push(_year);
	ctx->Push(_month);
	ctx->Push(_day);
	ctx->Push(_hour);
	ctx->Push(_minute);
	ctx->Push(_second);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getUtcTime call failed" << Log::Endl;
	}
}

EXPORT void Native_getLocalTime(int32_t& _year, int32_t& _month, int32_t& _day, int32_t& _hour, int32_t& _minute, int32_t& _second) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50C7A99057A69748);
	ctx->Reset();
	ctx->Push(_year);
	ctx->Push(_month);
	ctx->Push(_day);
	ctx->Push(_hour);
	ctx->Push(_minute);
	ctx->Push(_second);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getLocalTime call failed" << Log::Endl;
	}
}

EXPORT void Native_requestCutscene(const char* _cutsceneName, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A86743F475D9E09);
	ctx->Reset();
	ctx->Push(_cutsceneName);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestCutscene call failed" << Log::Endl;
	}
}

EXPORT void Native_requestCutsceneWithPlaybackList(const char* _cutsceneName, int32_t _playbackFlags, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC23DE0E91C30B58C);
	ctx->Reset();
	ctx->Push(_cutsceneName);
	ctx->Push(_playbackFlags);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestCutsceneWithPlaybackList call failed" << Log::Endl;
	}
}

EXPORT void Native_removeCutscene() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x440AF51A3462B86F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeCutscene call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasCutsceneLoaded() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC59F528E9AB9F339);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasCutsceneLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasThisCutsceneLoaded(const char* _cutsceneName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x228D3D94F8A11C3C);
	ctx->Reset();
	ctx->Push(_cutsceneName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasThisCutsceneLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x8D9DF6ECA8768583(int32_t _threadId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D9DF6ECA8768583);
	ctx->Reset();
	ctx->Push(_threadId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8D9DF6ECA8768583 call failed" << Log::Endl;
	}
}

EXPORT bool Native_canRequestAssetsForCutsceneEntity() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB56BBBCC2955D9CB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canRequestAssetsForCutsceneEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isCutscenePlaybackFlagSet(int32_t _flag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71B74D2AE19338D0);
	ctx->Reset();
	ctx->Push(_flag);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCutscenePlaybackFlagSet call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setCutsceneEntityStreamingFlags(const char* _cutsceneEntName, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C61C75BEE8184C2);
	ctx->Reset();
	ctx->Push(_cutsceneEntName);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCutsceneEntityStreamingFlags call failed" << Log::Endl;
	}
}

EXPORT void Native_requestCutFile(const char* _cutsceneName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06A3524161C502BA);
	ctx->Reset();
	ctx->Push(_cutsceneName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestCutFile call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasCutFileLoaded(const char* _cutsceneName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1C996C2A744262E);
	ctx->Reset();
	ctx->Push(_cutsceneName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasCutFileLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeCutFile(const char* _cutsceneName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD00D76A7DFC9D852);
	ctx->Reset();
	ctx->Push(_cutsceneName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeCutFile call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getCutFileNumSections(const char* _cutsceneName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0ABC54DE641DC0FC);
	ctx->Reset();
	ctx->Push(_cutsceneName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCutFileNumSections call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_startCutscene(int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x186D5CB5E7B0FF7B);
	ctx->Reset();
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startCutscene call failed" << Log::Endl;
	}
}

EXPORT void Native_startCutsceneAtCoords(float _x, float _y, float _z, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C9ADDA3244A1FBF);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startCutsceneAtCoords call failed" << Log::Endl;
	}
}

EXPORT void Native_stopCutscene(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7272775B4DC786E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopCutscene call failed" << Log::Endl;
	}
}

EXPORT void Native_stopCutsceneImmediately() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD220BDD222AC4A1E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopCutsceneImmediately call failed" << Log::Endl;
	}
}

EXPORT void Native_setCutsceneOrigin(float _x, float _y, float _z, float _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB812B3FD1C01CF27);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCutsceneOrigin call failed" << Log::Endl;
	}
}

EXPORT void Native__0x011883F41211432A(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x011883F41211432A);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x011883F41211432A call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getCutsceneTime() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE625BEABBAFFDAB9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCutsceneTime call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getCutsceneTotalDuration() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE53B14A19E480D4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCutsceneTotalDuration call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x971D7B15BCDBEF99() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x971D7B15BCDBEF99);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x971D7B15BCDBEF99 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_wasCutsceneSkipped() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40C8656EDAEDD569);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native wasCutsceneSkipped call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasCutsceneFinished() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C0A893088881D57);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasCutsceneFinished call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isCutsceneActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x991251AFC3981F84);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCutsceneActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isCutscenePlaying() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3C2E180A40F031E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCutscenePlaying call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getCutsceneSectionPlaying() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49010A6A396553D8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCutsceneSectionPlaying call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getEntityIndexOfCutsceneEntity(const char* _cutsceneEntName, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A2E9FDB9A8C62F6);
	ctx->Reset();
	ctx->Push(_cutsceneEntName);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityIndexOfCutsceneEntity call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x583DF8E3D4AFBD98() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x583DF8E3D4AFBD98);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x583DF8E3D4AFBD98 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x4CEBC1ED31E8925E(const char* _cutsceneName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4CEBC1ED31E8925E);
	ctx->Reset();
	ctx->Push(_cutsceneName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4CEBC1ED31E8925E call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x4FCD976DA686580C(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4FCD976DA686580C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4FCD976DA686580C call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_registerEntityForCutscene(int32_t _cutscenePed, const char* _cutsceneEntName, int32_t _p2, int32_t _modelHash, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE40C1C56DF95C2E8);
	ctx->Reset();
	ctx->Push(_cutscenePed);
	ctx->Push(_cutsceneEntName);
	ctx->Push(_p2);
	ctx->Push(_modelHash);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerEntityForCutscene call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getEntityIndexOfRegisteredEntity(const char* _cutsceneEntName, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0741A26499654CD);
	ctx->Reset();
	ctx->Push(_cutsceneEntName);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityIndexOfRegisteredEntity call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x7F96F23FA9B73327(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F96F23FA9B73327);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7F96F23FA9B73327 call failed" << Log::Endl;
	}
}

EXPORT void Native_setCutsceneTriggerArea(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9896CE4721BE84BA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCutsceneTriggerArea call failed" << Log::Endl;
	}
}

EXPORT bool Native_canSetEnterStateForRegisteredEntity(const char* _cutsceneEntName, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x645D0B458D8E17B5);
	ctx->Reset();
	ctx->Push(_cutsceneEntName);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canSetEnterStateForRegisteredEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_canSetExitStateForRegisteredEntity(const char* _cutsceneEntName, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C6A6451C79E4662);
	ctx->Reset();
	ctx->Push(_cutsceneEntName);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canSetExitStateForRegisteredEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_canSetExitStateForCamera(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2CBCD0930DFB420);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canSetExitStateForCamera call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xC61B86C9F61EB404(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC61B86C9F61EB404);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC61B86C9F61EB404 call failed" << Log::Endl;
	}
}

EXPORT void Native_setCutsceneFadeValues(bool _p0, bool _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8093F23ABACCC7D4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCutsceneFadeValues call failed" << Log::Endl;
	}
}

EXPORT void Native__0x20746F7B1032A3C7(bool _p0, bool _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20746F7B1032A3C7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x20746F7B1032A3C7 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x06EE9048FD080382(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06EE9048FD080382);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x06EE9048FD080382 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xA0FE76168A189DDB() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0FE76168A189DDB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA0FE76168A189DDB call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x2F137B508DE238F2(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F137B508DE238F2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2F137B508DE238F2 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE36A98D8AB3D3C66(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE36A98D8AB3D3C66);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE36A98D8AB3D3C66 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x5EDEF0CF8C1DAB3C() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EDEF0CF8C1DAB3C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5EDEF0CF8C1DAB3C call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setCutsceneCanBeSkipped(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41FAA8FB2ECE8720);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCutsceneCanBeSkipped call failed" << Log::Endl;
	}
}

EXPORT void Native_registerSynchronisedScriptSpeech() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2131046957F31B04);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerSynchronisedScriptSpeech call failed" << Log::Endl;
	}
}

EXPORT void Native_setCutscenePedComponentVariation(const char* _cutsceneEntName, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA01E7B6DEEFBBC9);
	ctx->Reset();
	ctx->Push(_cutsceneEntName);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCutscenePedComponentVariation call failed" << Log::Endl;
	}
}

EXPORT void Native_setCutscenePedComponentVariationFromPed(const char* _cutsceneEntName, int32_t _ped, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A56C06EBEF2B0D9);
	ctx->Reset();
	ctx->Push(_cutsceneEntName);
	ctx->Push(_ped);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCutscenePedComponentVariationFromPed call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesCutsceneEntityExist(const char* _cutsceneEntName, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x499EF20C5DB25C59);
	ctx->Reset();
	ctx->Push(_cutsceneEntName);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesCutsceneEntityExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setCutscenePedPropVariation(const char* _cutsceneEntName, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0546524ADE2E9723);
	ctx->Reset();
	ctx->Push(_cutsceneEntName);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCutscenePedPropVariation call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasCutsceneCutThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x708BDD8CD795B043);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasCutsceneCutThisFrame call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_datafileWatchRequestId(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD6875BBC0FC899C);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileWatchRequestId call failed" << Log::Endl;
	}
}

EXPORT void Native_datafileClearWatchList() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CC86E78358D5119);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileClearWatchList call failed" << Log::Endl;
	}
}

EXPORT bool Native_datafileIsValidRequestId(int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCCAE5B92A830878);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileIsValidRequestId call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_datafileHasLoadedFileData(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15FF52B809DB2353);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileHasLoadedFileData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_datafileHasValidFileData(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8CC1EBE0B62E29F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileHasValidFileData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_datafileSelectActiveFile(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22DA66936E0FFF37);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileSelectActiveFile call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_datafileDeleteRequestedFile(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F5EA1C01D65A100);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileDeleteRequestedFile call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcCreateContent(int32_t& _data, int32_t _dataCount, const char* _contentName, const char* _description, const char* _tagsCsv, const char* _contentTypeName, bool _publish, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC84527E235FCA219);
	ctx->Reset();
	ctx->Push(_data);
	ctx->Push(_dataCount);
	ctx->Push(_contentName);
	ctx->Push(_description);
	ctx->Push(_tagsCsv);
	ctx->Push(_contentTypeName);
	ctx->Push(_publish);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcCreateContent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcCreateMission(const char* _contentName, const char* _description, const char* _tagsCsv, const char* _contentTypeName, bool _publish, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5EFC3E847D60507);
	ctx->Reset();
	ctx->Push(_contentName);
	ctx->Push(_description);
	ctx->Push(_tagsCsv);
	ctx->Push(_contentTypeName);
	ctx->Push(_publish);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcCreateMission call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcUpdateContent(const char* _contentId, int32_t& _data, int32_t _dataCount, const char* _contentName, const char* _description, const char* _tagsCsv, const char* _contentTypeName, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x648E7A5434AF7969);
	ctx->Reset();
	ctx->Push(_contentId);
	ctx->Push(_data);
	ctx->Push(_dataCount);
	ctx->Push(_contentName);
	ctx->Push(_description);
	ctx->Push(_tagsCsv);
	ctx->Push(_contentTypeName);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcUpdateContent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcUpdateMission(const char* _contentId, const char* _contentName, const char* _description, const char* _tagsCsv, const char* _contentTypeName, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4645DE9980999E93);
	ctx->Reset();
	ctx->Push(_contentId);
	ctx->Push(_contentName);
	ctx->Push(_description);
	ctx->Push(_tagsCsv);
	ctx->Push(_contentTypeName);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcUpdateMission call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcSetPlayerData(const char* _contentId, float _rating, const char* _contentTypeName, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x692D808C34A82143);
	ctx->Reset();
	ctx->Push(_contentId);
	ctx->Push(_rating);
	ctx->Push(_contentTypeName);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcSetPlayerData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_datafileSelectUgcData(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA69AC4ADE82B57A4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileSelectUgcData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_datafileSelectUgcStats(int32_t _p0, bool _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9CB0BFA7A9342C3D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileSelectUgcStats call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_datafileSelectUgcPlayerData(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52818819057F2B40);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileSelectUgcPlayerData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_datafileSelectCreatorStats(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01095C95CD46B624);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileSelectCreatorStats call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_datafileLoadOfflineUgc(const char* _filename, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5238C011AF405E4);
	ctx->Reset();
	ctx->Push(_filename);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileLoadOfflineUgc call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_datafileCreate(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD27058A1CA2B13EE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileCreate call failed" << Log::Endl;
	}
}

EXPORT void Native_datafileDelete(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9AB9C1CFC8862DFB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileDelete call failed" << Log::Endl;
	}
}

EXPORT void Native_datafileStoreMissionHeader(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2ED61456317B8178);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileStoreMissionHeader call failed" << Log::Endl;
	}
}

EXPORT void Native_datafileFlushMissionHeader() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC55854C7D7274882);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileFlushMissionHeader call failed" << Log::Endl;
	}
}

EXPORT const char* Native_datafileGetFileDict(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x906B778CA1DC72B6);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileGetFileDict call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT bool Native_datafileStartSaveToCloud(const char* _filename, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83BCCE3224735F05);
	ctx->Reset();
	ctx->Push(_filename);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileStartSaveToCloud call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_datafileUpdateSaveToCloud(bool& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4DFDD9EB705F8140);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileUpdateSaveToCloud call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_datafileIsSavePending() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBEDB96A7584AA8CF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datafileIsSavePending call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xA6EEF01087181EDD(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6EEF01087181EDD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA6EEF01087181EDD call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x6AD0BD5E087866CB(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6AD0BD5E087866CB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6AD0BD5E087866CB call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xDBF860CF1DB8E599(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBF860CF1DB8E599);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDBF860CF1DB8E599 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_datadictSetBool(int32_t& _objectData, const char* _key, bool _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35124302A556A325);
	ctx->Reset();
	ctx->Push(_objectData);
	ctx->Push(_key);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datadictSetBool call failed" << Log::Endl;
	}
}

EXPORT void Native_datadictSetInt(int32_t& _objectData, const char* _key, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7E035450A7948D5);
	ctx->Reset();
	ctx->Push(_objectData);
	ctx->Push(_key);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datadictSetInt call failed" << Log::Endl;
	}
}

EXPORT void Native_datadictSetFloat(int32_t& _objectData, const char* _key, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC27E1CC2D795105E);
	ctx->Reset();
	ctx->Push(_objectData);
	ctx->Push(_key);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datadictSetFloat call failed" << Log::Endl;
	}
}

EXPORT void Native_datadictSetString(int32_t& _objectData, const char* _key, const char* _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8FF3847DADD8E30C);
	ctx->Reset();
	ctx->Push(_objectData);
	ctx->Push(_key);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datadictSetString call failed" << Log::Endl;
	}
}

EXPORT void Native_datadictSetVector(int32_t& _objectData, const char* _key, float _valueX, float _valueY, float _valueZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4CD49B76338C7DEE);
	ctx->Reset();
	ctx->Push(_objectData);
	ctx->Push(_key);
	ctx->Push(_valueX);
	ctx->Push(_valueY);
	ctx->Push(_valueZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datadictSetVector call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_datadictCreateDict(int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA358F56F10732EE1);
	ctx->Reset();
	ctx->Push(_objectData);
	ctx->Push(_key);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datadictCreateDict call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_datadictCreateArray(int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B11728527CA6E5F);
	ctx->Reset();
	ctx->Push(_objectData);
	ctx->Push(_key);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datadictCreateArray call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_datadictGetBool(int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1186940ED72FFEEC);
	ctx->Reset();
	ctx->Push(_objectData);
	ctx->Push(_key);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datadictGetBool call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_datadictGetInt(int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78F06F6B1FB5A80C);
	ctx->Reset();
	ctx->Push(_objectData);
	ctx->Push(_key);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datadictGetInt call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT float Native_datadictGetFloat(int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06610343E73B9727);
	ctx->Reset();
	ctx->Push(_objectData);
	ctx->Push(_key);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datadictGetFloat call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT const char* Native_datadictGetString(int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D2FD9E763B24472);
	ctx->Reset();
	ctx->Push(_objectData);
	ctx->Push(_key);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datadictGetString call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT vector3_t Native_datadictGetVector(int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46CD3CB66E0825CC);
	ctx->Reset();
	ctx->Push(_objectData);
	ctx->Push(_key);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datadictGetVector call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT int32_t Native_datadictGetDict(int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6B9DDC412FCEEE2);
	ctx->Reset();
	ctx->Push(_objectData);
	ctx->Push(_key);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datadictGetDict call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_datadictGetArray(int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A983AA9DA2659ED);
	ctx->Reset();
	ctx->Push(_objectData);
	ctx->Push(_key);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datadictGetArray call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_datadictGetType(int32_t& _objectData, const char* _key) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x031C55ED33227371);
	ctx->Reset();
	ctx->Push(_objectData);
	ctx->Push(_key);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native datadictGetType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_dataarrayAddBool(int32_t& _arrayData, bool _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8B0F5A43E928C76);
	ctx->Reset();
	ctx->Push(_arrayData);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dataarrayAddBool call failed" << Log::Endl;
	}
}

EXPORT void Native_dataarrayAddInt(int32_t& _arrayData, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCABDB751D86FE93B);
	ctx->Reset();
	ctx->Push(_arrayData);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dataarrayAddInt call failed" << Log::Endl;
	}
}

EXPORT void Native_dataarrayAddFloat(int32_t& _arrayData, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57A995FD75D37F56);
	ctx->Reset();
	ctx->Push(_arrayData);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dataarrayAddFloat call failed" << Log::Endl;
	}
}

EXPORT void Native_dataarrayAddString(int32_t& _arrayData, const char* _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F0661C155AEEEAA);
	ctx->Reset();
	ctx->Push(_arrayData);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dataarrayAddString call failed" << Log::Endl;
	}
}

EXPORT void Native_dataarrayAddVector(int32_t& _arrayData, float _valueX, float _valueY, float _valueZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x407F8D034F70F0C2);
	ctx->Reset();
	ctx->Push(_arrayData);
	ctx->Push(_valueX);
	ctx->Push(_valueY);
	ctx->Push(_valueZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dataarrayAddVector call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_dataarrayAddDict(int32_t& _arrayData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6889498B3E19C797);
	ctx->Reset();
	ctx->Push(_arrayData);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dataarrayAddDict call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_dataarrayGetBool(int32_t& _arrayData, int32_t _arrayIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50C1B2874E50C114);
	ctx->Reset();
	ctx->Push(_arrayData);
	ctx->Push(_arrayIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dataarrayGetBool call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_dataarrayGetInt(int32_t& _arrayData, int32_t _arrayIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E5AE19425CD74BE);
	ctx->Reset();
	ctx->Push(_arrayData);
	ctx->Push(_arrayIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dataarrayGetInt call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT float Native_dataarrayGetFloat(int32_t& _arrayData, int32_t _arrayIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0C527B525D7CFB5);
	ctx->Reset();
	ctx->Push(_arrayData);
	ctx->Push(_arrayIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dataarrayGetFloat call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT const char* Native_dataarrayGetString(int32_t& _arrayData, int32_t _arrayIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3F2FFEB8D836F52);
	ctx->Reset();
	ctx->Push(_arrayData);
	ctx->Push(_arrayIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dataarrayGetString call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT vector3_t Native_dataarrayGetVector(int32_t& _arrayData, int32_t _arrayIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D2064E5B64A628A);
	ctx->Reset();
	ctx->Push(_arrayData);
	ctx->Push(_arrayIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dataarrayGetVector call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT int32_t Native_dataarrayGetDict(int32_t& _arrayData, int32_t _arrayIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B5FADCC4E3A145F);
	ctx->Reset();
	ctx->Push(_arrayData);
	ctx->Push(_arrayIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dataarrayGetDict call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_dataarrayGetCount(int32_t& _arrayData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x065DB281590CEA2D);
	ctx->Reset();
	ctx->Push(_arrayData);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dataarrayGetCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_dataarrayGetType(int32_t& _arrayData, int32_t _arrayIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A0014ADB172A3C5);
	ctx->Reset();
	ctx->Push(_arrayData);
	ctx->Push(_arrayIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dataarrayGetType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_decorSetTime(int32_t _entity, const char* _propertyName, int32_t _timestamp) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95AED7B8E39ECAA4);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_propertyName);
	ctx->Push(_timestamp);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native decorSetTime call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_decorSetBool(int32_t _entity, const char* _propertyName, bool _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B1E8E2ED1335B71);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_propertyName);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native decorSetBool call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_decorSetFloat(int32_t _entity, const char* _propertyName, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x211AB1DD8D0F363A);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_propertyName);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native decorSetFloat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_decorSetInt(int32_t _entity, const char* _propertyName, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CE3AA5E1CA19E10);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_propertyName);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native decorSetInt call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_decorGetBool(int32_t _entity, const char* _propertyName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDACE671663F2F5DB);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_propertyName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native decorGetBool call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT float Native_decorGetFloat(int32_t _entity, const char* _propertyName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6524A2F114706F43);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_propertyName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native decorGetFloat call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native_decorGetInt(int32_t _entity, const char* _propertyName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA06C969B02A97298);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_propertyName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native decorGetInt call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_decorExistOn(int32_t _entity, const char* _propertyName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x05661B80A8C9165F);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_propertyName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native decorExistOn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_decorRemove(int32_t _entity, const char* _propertyName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x00EE9F297C738720);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_propertyName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native decorRemove call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_decorRegister(const char* _propertyName, int32_t _type) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FD90732F56403CE);
	ctx->Reset();
	ctx->Push(_propertyName);
	ctx->Push(_type);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native decorRegister call failed" << Log::Endl;
	}
}

EXPORT bool Native_decorIsRegisteredAsType(const char* _propertyName, int32_t _type) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F14F9F870D6FBC8);
	ctx->Reset();
	ctx->Push(_propertyName);
	ctx->Push(_type);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native decorIsRegisteredAsType call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_decorRegisterLock() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9D14EEA259F9248);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native decorRegisterLock call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x241FCA5B1AA14F75() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x241FCA5B1AA14F75);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x241FCA5B1AA14F75 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isDlcPresent(int32_t _dlcHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x812595A0644CE1DE);
	ctx->Reset();
	ctx->Push(_dlcHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isDlcPresent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xF2E07819EF1A5289() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2E07819EF1A5289);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF2E07819EF1A5289 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x9489659372A81585() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9489659372A81585);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9489659372A81585 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xA213B11DFF526300() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA213B11DFF526300);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA213B11DFF526300 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getExtraContentPackHasBeenInstalled() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D30F648014A92B5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getExtraContentPackHasBeenInstalled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getIsLoadingScreenActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10D0A8F259E93EC9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsLoadingScreenActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xC4637A6D03C24CC3() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4637A6D03C24CC3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC4637A6D03C24CC3 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasCloudRequestsFinished(bool& _p0, int32_t _unused) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46E2B844905BC5F0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_unused);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasCloudRequestsFinished call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_onEnterSp() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7C10C4A637992C9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native onEnterSp call failed" << Log::Endl;
	}
}

EXPORT void Native_onEnterMp() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0888C3502DBBEEF5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native onEnterMp call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesEntityExist(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7239B21A38F536BA);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesEntityExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_doesEntityBelongToThisScript(int32_t _entity, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDDE6DF5AE89981D2);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesEntityBelongToThisScript call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_doesEntityHaveDrawable(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x060D6E96F8B8E48D);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesEntityHaveDrawable call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_doesEntityHavePhysics(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA95EA3317CC5064);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesEntityHavePhysics call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasEntityAnimFinished(int32_t _entity, const char* _animDict, const char* _animName, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20B711662962B472);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_animDict);
	ctx->Push(_animName);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasEntityAnimFinished call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasEntityBeenDamagedByAnyObject(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95EB9964FF5C5C65);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasEntityBeenDamagedByAnyObject call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasEntityBeenDamagedByAnyPed(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x605F5A140F202491);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasEntityBeenDamagedByAnyPed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasEntityBeenDamagedByAnyVehicle(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFD5033FDBA0A9C8);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasEntityBeenDamagedByAnyVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasEntityBeenDamagedByEntity(int32_t _entity1, int32_t _entity2, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC86D67D52A707CF8);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasEntityBeenDamagedByEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasEntityClearLosToEntity(int32_t _entity1, int32_t _entity2, int32_t _traceType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCDFF7B72D23A1AC);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_traceType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasEntityClearLosToEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_hasEntityClearLosToEntity2(int32_t _entity1, int32_t _entity2, int32_t _traceType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x394BDE2A7BBA031E);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_traceType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasEntityClearLosToEntity2 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_hasEntityClearLosToEntityInFront(int32_t _entity1, int32_t _entity2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0267D00AF114F17A);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasEntityClearLosToEntityInFront call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasEntityCollidedWithAnything(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BAD02F0368D9E14);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasEntityCollidedWithAnything call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getLastMaterialHitByEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C3D0A935F535C4C);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getLastMaterialHitByEntity call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT vector3_t Native_getCollisionNormalOfLastHitForEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE465D4AB7CA6AE72);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCollisionNormalOfLastHitForEntity call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT void Native_forceEntityAiAndAnimationUpdate(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40FDEDB72F8293B2);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceEntityAiAndAnimationUpdate call failed" << Log::Endl;
	}
}

EXPORT float Native_getEntityAnimCurrentTime(int32_t _entity, const char* _animDict, const char* _animName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x346D81500D088F42);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_animDict);
	ctx->Push(_animName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityAnimCurrentTime call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getEntityAnimTotalTime(int32_t _entity, const char* _animDict, const char* _animName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50BD2730B191E360);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_animDict);
	ctx->Push(_animName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityAnimTotalTime call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getAnimDuration(const char* _animDict, const char* _animName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEDDF04D62B8D790);
	ctx->Reset();
	ctx->Push(_animDict);
	ctx->Push(_animName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getAnimDuration call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native_getEntityAttachedTo(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48C2BED9180FE123);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityAttachedTo call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT vector3_t Native_getEntityCoords(int32_t _entity, bool _alive) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3FEF770D40960D5A);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_alive);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityCoords call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native_getEntityForwardVector(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A794A5A57F8DF91);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityForwardVector call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT float Native_getEntityForwardX(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BB4EF4214E0E6D5);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityForwardX call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getEntityForwardY(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x866A4A5FAE349510);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityForwardY call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getEntityHeading(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE83D4F9BA2A38914);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityHeading call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getEntityPhysicsHeading(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x846BF6291198A71E);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityPhysicsHeading call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native_getEntityHealth(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEF059FAD016D209);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityHealth call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getEntityMaxHealth(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15D757606D170C3C);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityMaxHealth call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setEntityMaxHealth(int32_t _entity, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x166E7CF68597D8B5);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityMaxHealth call failed" << Log::Endl;
	}
}

EXPORT float Native_getEntityHeight(int32_t _entity, float _X, float _Y, float _Z, bool _atTop, bool _inWorldCoords) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A504562485944DD);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_X);
	ctx->Push(_Y);
	ctx->Push(_Z);
	ctx->Push(_atTop);
	ctx->Push(_inWorldCoords);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityHeight call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getEntityHeightAboveGround(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DD55701034110E5);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityHeightAboveGround call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_getEntityMatrix(int32_t _entity, vector3_t& _forwardVector, vector3_t& _rightVector, vector3_t& _upVector, vector3_t& _position) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xECB2FC7235A7D137);
	ctx->Reset();
	ctx->Push(_entity);
	alt::INative::Vector3 converted_forwardVector { _forwardVector.x, 0, _forwardVector.y, 0, _forwardVector.z };
	ctx->Push(&converted_forwardVector);
	alt::INative::Vector3 converted_rightVector { _rightVector.x, 0, _rightVector.y, 0, _rightVector.z };
	ctx->Push(&converted_rightVector);
	alt::INative::Vector3 converted_upVector { _upVector.x, 0, _upVector.y, 0, _upVector.z };
	ctx->Push(&converted_upVector);
	alt::INative::Vector3 converted_position { _position.x, 0, _position.y, 0, _position.z };
	ctx->Push(&converted_position);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityMatrix call failed" << Log::Endl;
	}
	_forwardVector.x = converted_forwardVector.x;
	_forwardVector.y = converted_forwardVector.y;
	_forwardVector.z = converted_forwardVector.z;
	_rightVector.x = converted_rightVector.x;
	_rightVector.y = converted_rightVector.y;
	_rightVector.z = converted_rightVector.z;
	_upVector.x = converted_upVector.x;
	_upVector.y = converted_upVector.y;
	_upVector.z = converted_upVector.z;
	_position.x = converted_position.x;
	_position.y = converted_position.y;
	_position.z = converted_position.z;
}

EXPORT int32_t Native_getEntityModel(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F47B058362C84B5);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityModel call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT vector3_t Native_getOffsetFromEntityGivenWorldCoords(int32_t _entity, float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2274BC1C4885E333);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getOffsetFromEntityGivenWorldCoords call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native_getOffsetFromEntityInWorldCoords(int32_t _entity, float _offsetX, float _offsetY, float _offsetZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1899F328B0E12848);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getOffsetFromEntityInWorldCoords call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT float Native_getEntityPitch(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD45DC2893621E1FE);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityPitch call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_getEntityQuaternion(int32_t _entity, float& _x, float& _y, float& _z, float& _w) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B3703D2D32DFA18);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_w);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityQuaternion call failed" << Log::Endl;
	}
}

EXPORT float Native_getEntityRoll(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x831E0242595560DF);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityRoll call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT vector3_t Native_getEntityRotation(int32_t _entity, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFBD61CC738D9EB9);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityRotation call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native_getEntityRotationVelocity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x213B91045D09B983);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityRotationVelocity call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT const char* Native_getEntityScript(int32_t _entity, int32_t& _script) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6E9C38DB51D7748);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_script);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityScript call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT float Native_getEntitySpeed(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5037BA82E12416F);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntitySpeed call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT vector3_t Native_getEntitySpeedVector(int32_t _entity, bool _relative) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A8D700A51CB7B0D);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_relative);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntitySpeedVector call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT float Native_getEntityUprightValue(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95EED5A694951F9F);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityUprightValue call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT vector3_t Native_getEntityVelocity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4805D2B1D8CF94A9);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityVelocity call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT int32_t Native_getObjectIndexFromEntityIndex(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7E3B9735C0F89D6);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getObjectIndexFromEntityIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPedIndexFromEntityIndex(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04A2A40C73395041);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedIndexFromEntityIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehicleIndexFromEntityIndex(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B53F92932ADFAC0);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleIndexFromEntityIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT vector3_t Native_getWorldPositionOfEntityBone(int32_t _entity, int32_t _boneIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44A8FCB8ED227738);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_boneIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWorldPositionOfEntityBone call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT int32_t Native_getNearestPlayerToEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7196842CB375CDB3);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNearestPlayerToEntity call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNearestPlayerToEntityOnTeam(int32_t _entity, int32_t _team) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4DC9A62F844D9337);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_team);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNearestPlayerToEntityOnTeam call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getEntityType(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8ACD366038D14505);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getEntityPopulationType(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6F5161F4534EDFF);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityPopulationType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isAnEntity(int32_t _handle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x731EC8A916BD11A1);
	ctx->Reset();
	ctx->Push(_handle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAnEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityAPed(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x524AC5ECEA15343E);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityAPed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityAMissionEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A7B270912999B3C);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityAMissionEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityAVehicle(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6AC7003FA6E5575E);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityAVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityAnObject(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D68C8FD0FACA94E);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityAnObject call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityAtCoord(int32_t _entity, float _xPos, float _yPos, float _zPos, float _xSize, float _ySize, float _zSize, bool _p7, bool _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20B60995556D004F);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_xSize);
	ctx->Push(_ySize);
	ctx->Push(_zSize);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityAtCoord call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityAtEntity(int32_t _entity1, int32_t _entity2, float _xSize, float _ySize, float _zSize, bool _p5, bool _p6, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x751B70C3D034E187);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_xSize);
	ctx->Push(_ySize);
	ctx->Push(_zSize);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityAtEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityAttached(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB346476EF1A64897);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityAttached call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityAttachedToAnyObject(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF511840CEEDE0CC);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityAttachedToAnyObject call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityAttachedToAnyPed(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1632E9A5F988D11);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityAttachedToAnyPed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityAttachedToAnyVehicle(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26AA915AD89BFB4B);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityAttachedToAnyVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityAttachedToEntity(int32_t _from, int32_t _to) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFBE71898A993728);
	ctx->Reset();
	ctx->Push(_from);
	ctx->Push(_to);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityAttachedToEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityDead(int32_t _entity, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F9532F3B5CC2551);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityDead call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityInAir(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x886E37EC497200B6);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityInAir call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityInAngledArea(int32_t _entity, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, bool _debug, bool _includeZ, int32_t _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51210CED3DA1C78A);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push(_debug);
	ctx->Push(_includeZ);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityInAngledArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityInArea(int32_t _entity, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, bool _p7, bool _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54736AA40E271165);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityInArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityInZone(int32_t _entity, const char* _zone) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6463CF6AF527071);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_zone);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityInZone call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityInWater(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFB0A0D8EDD145A3);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityInWater call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT float Native_getEntitySubmergedLevel(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE81AFC1BC4CC41CE);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntitySubmergedLevel call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native__0x694E00132F2823ED(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x694E00132F2823ED);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x694E00132F2823ED call failed" << Log::Endl;
	}
}

EXPORT bool Native_isEntityOnScreen(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE659E47AF827484B);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityOnScreen call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityPlayingAnim(int32_t _entity, const char* _animDict, const char* _animName, int32_t _taskFlag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F0B79228E461EC9);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_animDict);
	ctx->Push(_animName);
	ctx->Push(_taskFlag);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityPlayingAnim call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityStatic(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1218E6886D3D8327);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityStatic call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityTouchingEntity(int32_t _entity, int32_t _targetEntity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17FFC1B2BA35A494);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_targetEntity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityTouchingEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityTouchingModel(int32_t _entity, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F42323798A58C8C);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityTouchingModel call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityUpright(int32_t _entity, float _angle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5333F526F6AB19AA);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_angle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityUpright call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityUpsidedown(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DBD58820FA61D71);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityUpsidedown call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityVisible(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47D6F43D77935C75);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityVisible call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityVisibleToScript(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD796CB5BA8F20E32);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityVisibleToScript call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityOccluded(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE31C2C72B8692B64);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityOccluded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_wouldEntityBeOccluded(int32_t _entityModelHash, float _x, float _y, float _z, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE5D2A122E09EC42);
	ctx->Reset();
	ctx->Push(_entityModelHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native wouldEntityBeOccluded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isEntityWaitingForWorldCollision(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD05BFF0C0A12C68F);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityWaitingForWorldCollision call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_applyForceToEntityCenterOfMass(int32_t _entity, int32_t _forceType, float _x, float _y, float _z, bool _p5, bool _isDirectionRel, bool _isForceRel, bool _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x18FF00FC7EFF559E);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_forceType);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p5);
	ctx->Push(_isDirectionRel);
	ctx->Push(_isForceRel);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native applyForceToEntityCenterOfMass call failed" << Log::Endl;
	}
}

EXPORT void Native_applyForceToEntity(int32_t _entity, int32_t _forceFlags, float _x, float _y, float _z, float _offX, float _offY, float _offZ, int32_t _boneIndex, bool _isDirectionRel, bool _ignoreUpVec, bool _isForceRel, bool _p12, bool _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5F68BE9613E2D18);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_forceFlags);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_offX);
	ctx->Push(_offY);
	ctx->Push(_offZ);
	ctx->Push(_boneIndex);
	ctx->Push(_isDirectionRel);
	ctx->Push(_ignoreUpVec);
	ctx->Push(_isForceRel);
	ctx->Push(_p12);
	ctx->Push(_p13);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native applyForceToEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_attachEntityToEntity(int32_t _entity1, int32_t _entity2, int32_t _boneIndex, float _xPos, float _yPos, float _zPos, float _xRot, float _yRot, float _zRot, bool _p9, bool _useSoftPinning, bool _collision, bool _isPed, int32_t _vertexIndex, bool _fixedRot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B9BBD38AB0796DF);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_boneIndex);
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_p9);
	ctx->Push(_useSoftPinning);
	ctx->Push(_collision);
	ctx->Push(_isPed);
	ctx->Push(_vertexIndex);
	ctx->Push(_fixedRot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachEntityToEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_attachEntityBoneToEntityBone(int32_t _entity1, int32_t _entity2, int32_t _boneIndex1, int32_t _boneIndex2, bool _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C48B75732C8456C);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_boneIndex1);
	ctx->Push(_boneIndex2);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachEntityBoneToEntityBone call failed" << Log::Endl;
	}
}

EXPORT void Native_attachEntityBoneToEntityBonePhysically(int32_t _entity1, int32_t _entity2, int32_t _boneIndex1, int32_t _boneIndex2, bool _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD1695C5D3B05439);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_boneIndex1);
	ctx->Push(_boneIndex2);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachEntityBoneToEntityBonePhysically call failed" << Log::Endl;
	}
}

EXPORT void Native_attachEntityToEntityPhysically(int32_t _entity1, int32_t _entity2, int32_t _boneIndex1, int32_t _boneIndex2, float _xPos1, float _yPos1, float _zPos1, float _xPos2, float _yPos2, float _zPos2, float _xRot, float _yRot, float _zRot, float _breakForce, bool _fixedRot, bool _p15, bool _collision, bool _p17, int32_t _p18) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3675780C92F90F9);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_boneIndex1);
	ctx->Push(_boneIndex2);
	ctx->Push(_xPos1);
	ctx->Push(_yPos1);
	ctx->Push(_zPos1);
	ctx->Push(_xPos2);
	ctx->Push(_yPos2);
	ctx->Push(_zPos2);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_breakForce);
	ctx->Push(_fixedRot);
	ctx->Push(_p15);
	ctx->Push(_collision);
	ctx->Push(_p17);
	ctx->Push(_p18);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachEntityToEntityPhysically call failed" << Log::Endl;
	}
}

EXPORT void Native_processEntityAttachments(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4080490ADC51C6F);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native processEntityAttachments call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getEntityBoneIndexByName(int32_t _entity, const char* _boneName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB71170B7E76ACBA);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_boneName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityBoneIndexByName call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_clearEntityLastDamageEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA72CD9CA74A5ECBA);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearEntityLastDamageEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_deleteEntity(int32_t& _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE3CBE5BF394C9C9);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native deleteEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_detachEntity(int32_t _entity, bool _dynamic, bool _collision) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x961AC54BF0613F5D);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_dynamic);
	ctx->Push(_collision);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native detachEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_freezeEntityPosition(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x428CA6DBD1094446);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native freezeEntityPosition call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityCleanupByEngine(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3910051CCECDB00C);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityCleanupByEngine call failed" << Log::Endl;
	}
}

EXPORT bool Native_playEntityAnim(int32_t _entity, const char* _animName, const char* _animDict, float _p3, bool _loop, bool _stayInAnim, bool _p6, float _delta, int32_t _bitset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FB218262B810701);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_animName);
	ctx->Push(_animDict);
	ctx->Push(_p3);
	ctx->Push(_loop);
	ctx->Push(_stayInAnim);
	ctx->Push(_p6);
	ctx->Push(_delta);
	ctx->Push(_bitset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playEntityAnim call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_playSynchronizedEntityAnim(int32_t _entity, int32_t _syncedScene, const char* _animation, const char* _propName, float _p4, float _p5, int32_t _p6, float _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC77720A12FE14A86);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_syncedScene);
	ctx->Push(_animation);
	ctx->Push(_propName);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playSynchronizedEntityAnim call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_playSynchronizedMapEntityAnim(float _p0, float _p1, float _p2, float _p3, int32_t _p4, int32_t _p5, int32_t& _p6, int32_t& _p7, float _p8, float _p9, int32_t _p10, float _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9C54555ED30FBC4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playSynchronizedMapEntityAnim call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_stopSynchronizedMapEntityAnim(float _p0, float _p1, float _p2, float _p3, int32_t _p4, float _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11E79CAB7183B6F5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopSynchronizedMapEntityAnim call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_stopEntityAnim(int32_t _entity, const char* _animation, const char* _animGroup, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28004F88151E03E0);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_animation);
	ctx->Push(_animGroup);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopEntityAnim call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_stopSynchronizedEntityAnim(int32_t _entity, float _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43D3807C077261E3);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopSynchronizedEntityAnim call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasAnimEventFired(int32_t _entity, int32_t _actionHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAF4CD9EA3E7E922);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_actionHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasAnimEventFired call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_findAnimEventPhase(const char* _animDictionary, const char* _animName, const char* _p2, int32_t& _p3, int32_t& _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07F1BE2BCCAA27A7);
	ctx->Reset();
	ctx->Push(_animDictionary);
	ctx->Push(_animName);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native findAnimEventPhase call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setEntityAnimCurrentTime(int32_t _entity, const char* _animDictionary, const char* _animName, float _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4487C259F0F70977);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_animDictionary);
	ctx->Push(_animName);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityAnimCurrentTime call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityAnimSpeed(int32_t _entity, const char* _animDictionary, const char* _animName, float _speedMultiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28D1A16553C51776);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_animDictionary);
	ctx->Push(_animName);
	ctx->Push(_speedMultiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityAnimSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityAsMissionEntity(int32_t _entity, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD738C3085FE7E11);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityAsMissionEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityAsNoLongerNeeded(int32_t& _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB736A491E64A32CF);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityAsNoLongerNeeded call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedAsNoLongerNeeded(int32_t& _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2595DD4236549CE3);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAsNoLongerNeeded call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleAsNoLongerNeeded(int32_t& _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x629BFA74418D6239);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleAsNoLongerNeeded call failed" << Log::Endl;
	}
}

EXPORT void Native_setObjectAsNoLongerNeeded(int32_t& _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3AE22DEB5BA5A3E6);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setObjectAsNoLongerNeeded call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityCanBeDamaged(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1760FFA8AB074D66);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityCanBeDamaged call failed" << Log::Endl;
	}
}

EXPORT bool Native_getEntityCanBeDamaged(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD95CC5D2AB15A09F);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityCanBeDamaged call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setEntityCanBeDamagedByRelationshipGroup(int32_t _entity, bool _bCanBeDamaged, int32_t _relGroup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE22D8FDE858B8119);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_bCanBeDamaged);
	ctx->Push(_relGroup);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityCanBeDamagedByRelationshipGroup call failed" << Log::Endl;
	}
}

EXPORT void Native__0x352E2B5CF420BF3B(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x352E2B5CF420BF3B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x352E2B5CF420BF3B call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityCanBeTargetedWithoutLos(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3997889736FD899);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityCanBeTargetedWithoutLos call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityCollision(int32_t _entity, bool _toggle, bool _keepPhysics) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A9205C1B9EE827F);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	ctx->Push(_keepPhysics);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityCollision call failed" << Log::Endl;
	}
}

EXPORT bool Native_getEntityCollisionDisabled(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCF1E97BEFDAE480);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityCollisionDisabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setEntityCompletelyDisableCollision(int32_t _entity, bool _toggle, bool _keepPhysics) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9EBC85ED0FFFE51C);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	ctx->Push(_keepPhysics);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityCompletelyDisableCollision call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityCoords(int32_t _entity, float _xPos, float _yPos, float _zPos, bool _xAxis, bool _yAxis, bool _zAxis, bool _clearArea) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06843DA7060A026B);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_xAxis);
	ctx->Push(_yAxis);
	ctx->Push(_zAxis);
	ctx->Push(_clearArea);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityCoords call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityCoordsWithoutPlantsReset(int32_t _entity, float _xPos, float _yPos, float _zPos, bool _alive, bool _deadFlag, bool _ragdollFlag, bool _clearArea) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x621873ECE1178967);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_alive);
	ctx->Push(_deadFlag);
	ctx->Push(_ragdollFlag);
	ctx->Push(_clearArea);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityCoordsWithoutPlantsReset call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityCoordsNoOffset(int32_t _entity, float _xPos, float _yPos, float _zPos, bool _xAxis, bool _yAxis, bool _zAxis) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x239A3351AC1DA385);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_xAxis);
	ctx->Push(_yAxis);
	ctx->Push(_zAxis);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityCoordsNoOffset call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityDynamic(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1718DE8E3F2823CA);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityDynamic call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityHeading(int32_t _entity, float _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E2530AA8ADA980E);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityHeading call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityHealth(int32_t _entity, int32_t _health, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B76DC1F3AE6E6A3);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_health);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityHealth call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityInvincible(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3882114BDE571AD4);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityInvincible call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityIsTargetPriority(int32_t _entity, bool _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA02E132F5C68722);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityIsTargetPriority call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityLights(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7CFBA6A80BDF3874);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityLights call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityLoadCollisionFlag(int32_t _entity, bool _toggle, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0DC7CABAB1E9B67E);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityLoadCollisionFlag call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasCollisionLoadedAroundEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE9676F61BC0B3321);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasCollisionLoadedAroundEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setEntityMaxSpeed(int32_t _entity, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E46A3FCBDE2A1B1);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityMaxSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityOnlyDamagedByPlayer(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79F020FF9EDC0748);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityOnlyDamagedByPlayer call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityOnlyDamagedByRelationshipGroup(int32_t _entity, bool _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7022BD828FA0B082);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityOnlyDamagedByRelationshipGroup call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityProofs(int32_t _entity, bool _bulletProof, bool _fireProof, bool _explosionProof, bool _collisionProof, bool _meleeProof, bool _p6, bool _p7, bool _drownProof) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAEE099C6F890BB8);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_bulletProof);
	ctx->Push(_fireProof);
	ctx->Push(_explosionProof);
	ctx->Push(_collisionProof);
	ctx->Push(_meleeProof);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_drownProof);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityProofs call failed" << Log::Endl;
	}
}

EXPORT bool Native_getEntityProofs(int32_t _entity, bool& _bulletProof, bool& _fireProof, bool& _explosionProof, bool& _collisionProof, bool& _meleeProof, bool& _steamProof, bool& _p7, bool& _drownProof) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE8CD9BE829BBEBF);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_bulletProof);
	ctx->Push(_fireProof);
	ctx->Push(_explosionProof);
	ctx->Push(_collisionProof);
	ctx->Push(_meleeProof);
	ctx->Push(_steamProof);
	ctx->Push(_p7);
	ctx->Push(_drownProof);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityProofs call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setEntityQuaternion(int32_t _entity, float _x, float _y, float _z, float _w) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77B21BE7AC540F07);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_w);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityQuaternion call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityRecordsCollisions(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A50A1EEDAD01E65);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityRecordsCollisions call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityRotation(int32_t _entity, float _pitch, float _roll, float _yaw, int32_t _rotationOrder, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8524A8B0171D5E07);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_pitch);
	ctx->Push(_roll);
	ctx->Push(_yaw);
	ctx->Push(_rotationOrder);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityRotation call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityVisible(int32_t _entity, bool _toggle, bool _unk) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA1C610A04DB6BBB);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	ctx->Push(_unk);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityVisible call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC34BC448DA29F5E9(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC34BC448DA29F5E9);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC34BC448DA29F5E9 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE66377CDDADA4810(int32_t _entity, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE66377CDDADA4810);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE66377CDDADA4810 call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityVelocity(int32_t _entity, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C99BB7B6E96D16F);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityVelocity call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityAngularVelocity(int32_t _entity, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8339643499D1222E);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityAngularVelocity call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityHasGravity(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A4722448F18EEF5);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityHasGravity call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityLodDist(int32_t _entity, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5927F96A78577363);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityLodDist call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getEntityLodDist(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4159C2762B5791D6);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityLodDist call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setEntityAlpha(int32_t _entity, int32_t _alphaLevel, bool _skin) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44A0870B7E92D7C0);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_alphaLevel);
	ctx->Push(_skin);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityAlpha call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getEntityAlpha(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A47B3B5E63E94C6);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityAlpha call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_resetEntityAlpha(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B1E824FFBB7027A);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetEntityAlpha call failed" << Log::Endl;
	}
}

EXPORT void Native__0x490861B88F4FD846(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x490861B88F4FD846);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x490861B88F4FD846 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCEA7C8E1B48FF68C(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEA7C8E1B48FF68C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCEA7C8E1B48FF68C call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5C3B791D580E0BC2(int32_t _entity, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C3B791D580E0BC2);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5C3B791D580E0BC2 call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityAlwaysPrerender(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xACAD101E1FB66689);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityAlwaysPrerender call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityRenderScorched(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x730F5F8D3F0F2050);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityRenderScorched call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityTrafficlightOverride(int32_t _entity, int32_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57C5DB656185EAC4);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityTrafficlightOverride call failed" << Log::Endl;
	}
}

EXPORT void Native__0x78E8E3A640178255(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78E8E3A640178255);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x78E8E3A640178255 call failed" << Log::Endl;
	}
}

EXPORT void Native_createModelSwap(float _x, float _y, float _z, float _radius, int32_t _originalModel, int32_t _newModel, bool _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92C47782FDA8B2A3);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_originalModel);
	ctx->Push(_newModel);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createModelSwap call failed" << Log::Endl;
	}
}

EXPORT void Native_removeModelSwap(float _x, float _y, float _z, float _radius, int32_t _originalModel, int32_t _newModel, bool _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x033C0F9A64E229AE);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_originalModel);
	ctx->Push(_newModel);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeModelSwap call failed" << Log::Endl;
	}
}

EXPORT void Native_createModelHide(float _x, float _y, float _z, float _radius, int32_t _modelHash, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A97BCA30A0CE478);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createModelHide call failed" << Log::Endl;
	}
}

EXPORT void Native_createModelHideExcludingScriptObjects(float _x, float _y, float _z, float _radius, int32_t _modelHash, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A52AE588830BF7F);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createModelHideExcludingScriptObjects call failed" << Log::Endl;
	}
}

EXPORT void Native_removeModelHide(float _x, float _y, float _z, float _radius, int32_t _modelHash, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9E3006FB3CBD765);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeModelHide call failed" << Log::Endl;
	}
}

EXPORT void Native_createForcedObject(float _x, float _y, float _z, int32_t _p3, int32_t _modelHash, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x150E808B375A385A);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_modelHash);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createForcedObject call failed" << Log::Endl;
	}
}

EXPORT void Native_removeForcedObject(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61B6775E83C0DB6F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeForcedObject call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityNoCollisionEntity(int32_t _entity1, int32_t _entity2, bool _thisFrameOnly) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA53ED5520C07654A);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_thisFrameOnly);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityNoCollisionEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityMotionBlur(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x295D82A8559F9150);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityMotionBlur call failed" << Log::Endl;
	}
}

EXPORT void Native_setCanAutoVaultOnEntity(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE12ABE5E3A389A6C);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCanAutoVaultOnEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_setCanClimbOnEntity(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA80AE305E0A3044F);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCanClimbOnEntity call failed" << Log::Endl;
	}
}

EXPORT void Native__0xDC6F8601FAF2E893(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC6F8601FAF2E893);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDC6F8601FAF2E893 call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityDecalsDisabled(int32_t _entity, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C2E3DC128F44309);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityDecalsDisabled call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1A092BB0C3808B96(int32_t _entity, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A092BB0C3808B96);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1A092BB0C3808B96 call failed" << Log::Endl;
	}
}

EXPORT vector3_t Native_getEntityBoneRotation(int32_t _entity, int32_t _boneIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE6294A232D03786);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_boneIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityBoneRotation call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native_getEntityBonePosition2(int32_t _entity, int32_t _boneIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46F8696933A63C9B);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_boneIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityBonePosition2 call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native_getEntityBoneRotationLocal(int32_t _entity, int32_t _boneIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD8D32550E5CEBFE);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_boneIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityBoneRotationLocal call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT int32_t Native_getEntityBoneCount(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB328DCC3A3AA401B);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityBoneCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_enableEntityUnk(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CE177D014502E8A);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableEntityUnk call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB17BC6453F6CF5AC(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB17BC6453F6CF5AC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB17BC6453F6CF5AC call failed" << Log::Endl;
	}
}

EXPORT void Native__0x68B562E124CC0AEF(int32_t _pickup, int32_t _pickup2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68B562E124CC0AEF);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push(_pickup2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x68B562E124CC0AEF call failed" << Log::Endl;
	}
}

EXPORT void Native__0x36F32DE87082343E(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36F32DE87082343E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x36F32DE87082343E call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getEntityPickup(int32_t _entity, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F922734E259BD26);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityPickup call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0xD7B80E7C3BEFC396(int32_t _pickup, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7B80E7C3BEFC396);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD7B80E7C3BEFC396 call failed" << Log::Endl;
	}
}

EXPORT void Native_setDecisionMaker(int32_t _ped, int32_t _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB604A2942ADED0EE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDecisionMaker call failed" << Log::Endl;
	}
}

EXPORT void Native_clearDecisionMakerEventResponse(int32_t _name, int32_t _eventType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4FC9381A7AEE8968);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_eventType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearDecisionMakerEventResponse call failed" << Log::Endl;
	}
}

EXPORT void Native_blockDecisionMakerEvent(int32_t _name, int32_t _eventType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE42FCDFD0E4196F7);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_eventType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native blockDecisionMakerEvent call failed" << Log::Endl;
	}
}

EXPORT void Native_unblockDecisionMakerEvent(int32_t _name, int32_t _eventType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7CD9CF34F2C99E8);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_eventType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native unblockDecisionMakerEvent call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_addShockingEventAtPosition(int32_t _eventType, float _x, float _y, float _z, float _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9F8455409B525E9);
	ctx->Reset();
	ctx->Push(_eventType);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addShockingEventAtPosition call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_addShockingEventForEntity(int32_t _eventType, int32_t _entity, float _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FD8F3BE76F89422);
	ctx->Reset();
	ctx->Push(_eventType);
	ctx->Push(_entity);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addShockingEventForEntity call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isShockingEventInSphere(int32_t _eventType, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1374ABB7C15BAB92);
	ctx->Reset();
	ctx->Push(_eventType);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isShockingEventInSphere call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_removeShockingEvent(int32_t _event) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CDA538C44C6CCE5);
	ctx->Reset();
	ctx->Push(_event);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeShockingEvent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeAllShockingEvents(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAABE8FDFA21274C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeAllShockingEvents call failed" << Log::Endl;
	}
}

EXPORT void Native_removeShockingEventSpawnBlockingAreas() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x340F1415B68AEADE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeShockingEventSpawnBlockingAreas call failed" << Log::Endl;
	}
}

EXPORT void Native_suppressShockingEventsNextFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F9A292AD0A3BD89);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native suppressShockingEventsNextFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_suppressShockingEventTypeNextFrame(int32_t _eventType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3FD2EC8BF1F1CF30);
	ctx->Reset();
	ctx->Push(_eventType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native suppressShockingEventTypeNextFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_suppressAgitationEventsNextFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F3B7749C112D552);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native suppressAgitationEventsNextFrame call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getNumTattooShopDlcItems(int32_t _character) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x278F76C3B0A8F109);
	ctx->Reset();
	ctx->Push(_character);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumTattooShopDlcItems call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getTattooShopDlcItemData(int32_t _characterType, int32_t _decorationIndex, int32_t& _outComponent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF56381874F82086);
	ctx->Reset();
	ctx->Push(_characterType);
	ctx->Push(_decorationIndex);
	ctx->Push(_outComponent);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTattooShopDlcItemData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x10144267DD22866C(int32_t _overlayHash, int32_t _p1, int32_t _character) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10144267DD22866C);
	ctx->Reset();
	ctx->Push(_overlayHash);
	ctx->Push(_p1);
	ctx->Push(_character);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x10144267DD22866C call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_initShopPedComponent(int32_t& _outComponent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E8C308FD312C036);
	ctx->Reset();
	ctx->Push(_outComponent);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native initShopPedComponent call failed" << Log::Endl;
	}
}

EXPORT void Native_initShopPedProp(int32_t& _outProp) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB0A2B758F7B850F);
	ctx->Reset();
	ctx->Push(_outProp);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native initShopPedProp call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_setupShopPedApparelQuery(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50F457823CE6EB5F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setupShopPedApparelQuery call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_setupShopPedApparelQueryTu(int32_t _character, int32_t _p1, int32_t _p2, bool _p3, int32_t _p4, int32_t _componentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BDF59818B1E38C1);
	ctx->Reset();
	ctx->Push(_character);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_componentId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setupShopPedApparelQueryTu call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_getShopPedQueryComponent(int32_t _componentId, int32_t& _outComponent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x249E310B2D920699);
	ctx->Reset();
	ctx->Push(_componentId);
	ctx->Push(_outComponent);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getShopPedQueryComponent call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x96E2929292A4DB77(int32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x96E2929292A4DB77);
	ctx->Reset();
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x96E2929292A4DB77 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_getShopPedComponent(int32_t _componentHash, int32_t& _outComponent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74C0E2A57EC66760);
	ctx->Reset();
	ctx->Push(_componentHash);
	ctx->Push(_outComponent);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getShopPedComponent call failed" << Log::Endl;
	}
}

EXPORT void Native_getShopPedQueryProp(int32_t _componentId, int32_t& _outProp) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE44A00999B2837D);
	ctx->Reset();
	ctx->Push(_componentId);
	ctx->Push(_outProp);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getShopPedQueryProp call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x6CEBE002E58DEE97(int32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CEBE002E58DEE97);
	ctx->Reset();
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6CEBE002E58DEE97 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_getShopPedProp(int32_t _componentHash, int32_t& _outProp) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D5CAFF661DDF6FC);
	ctx->Reset();
	ctx->Push(_componentHash);
	ctx->Push(_outProp);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getShopPedProp call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getHashNameForComponent(int32_t _entity, int32_t _componentId, int32_t _drawableVariant, int32_t _textureVariant) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0368B3A838070348);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_componentId);
	ctx->Push(_drawableVariant);
	ctx->Push(_textureVariant);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHashNameForComponent call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getHashNameForProp(int32_t _entity, int32_t _componentId, int32_t _propIndex, int32_t _propTextureIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D6160275CAEC8DD);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_componentId);
	ctx->Push(_propIndex);
	ctx->Push(_propTextureIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHashNameForProp call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getItemVariantsCount(int32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC17AD0E5752BECDA);
	ctx->Reset();
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getItemVariantsCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getShopPedApparelVariantPropCount(int32_t _propHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD40AAC51E8E4C663);
	ctx->Reset();
	ctx->Push(_propHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getShopPedApparelVariantPropCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_getVariantComponent(int32_t _componentHash, int32_t _unkVariantComponentIndex, int32_t& _nameHash, int32_t& _enumValue, int32_t& _componentType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E11F282F11863B6);
	ctx->Reset();
	ctx->Push(_componentHash);
	ctx->Push(_unkVariantComponentIndex);
	ctx->Push(_nameHash);
	ctx->Push(_enumValue);
	ctx->Push(_componentType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVariantComponent call failed" << Log::Endl;
	}
}

EXPORT void Native_getVariantProp(int32_t _componentHash, int32_t _unkVariantPropIndex, int32_t& _nameHash, int32_t& _enumValue, int32_t& _anchorPoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD81B7F27BC773E66);
	ctx->Reset();
	ctx->Push(_componentHash);
	ctx->Push(_unkVariantPropIndex);
	ctx->Push(_nameHash);
	ctx->Push(_enumValue);
	ctx->Push(_anchorPoint);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVariantProp call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getShopPedApparelForcedComponentCount(int32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6B9DB42C04DD8C3);
	ctx->Reset();
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getShopPedApparelForcedComponentCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getShopPedApparelForcedPropCount(int32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x017568A8182D98A6);
	ctx->Reset();
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getShopPedApparelForcedPropCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_getForcedComponent(int32_t _componentHash, int32_t _forcedComponentIndex, int32_t& _nameHash, int32_t& _enumValue, int32_t& _componentType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C93ED8C2F74859B);
	ctx->Reset();
	ctx->Push(_componentHash);
	ctx->Push(_forcedComponentIndex);
	ctx->Push(_nameHash);
	ctx->Push(_enumValue);
	ctx->Push(_componentType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getForcedComponent call failed" << Log::Endl;
	}
}

EXPORT void Native_getForcedProp(int32_t _componentHash, int32_t _forcedPropIndex, int32_t& _nameHash, int32_t& _enumValue, int32_t& _anchorPoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1CA84EBF72E691D);
	ctx->Reset();
	ctx->Push(_componentHash);
	ctx->Push(_forcedPropIndex);
	ctx->Push(_nameHash);
	ctx->Push(_enumValue);
	ctx->Push(_anchorPoint);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getForcedProp call failed" << Log::Endl;
	}
}

EXPORT bool Native_isTagRestricted(int32_t _componentHash, int32_t _restrictionTagHash, int32_t _componentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x341DE7ED1D2A1BFD);
	ctx->Reset();
	ctx->Push(_componentHash);
	ctx->Push(_restrictionTagHash);
	ctx->Push(_componentId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isTagRestricted call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_setupShopPedOutfitQuery(int32_t _character, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3FBE2D50A6A8C28);
	ctx->Reset();
	ctx->Push(_character);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setupShopPedOutfitQuery call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_getShopPedQueryOutfit(int32_t _outfitIndex, int32_t& _outfit) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D793F03A631FE56);
	ctx->Reset();
	ctx->Push(_outfitIndex);
	ctx->Push(_outfit);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getShopPedQueryOutfit call failed" << Log::Endl;
	}
}

EXPORT void Native_getShopPedOutfit(int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7952076E444979D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getShopPedOutfit call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getShopPedOutfitLocate(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x073CA26B079F956E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getShopPedOutfitLocate call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getShopPedOutfitPropVariant(int32_t _outfitHash, int32_t _unkVariantIndex, int32_t& _outPropVariant) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9F9C2E0FDE11CBB);
	ctx->Reset();
	ctx->Push(_outfitHash);
	ctx->Push(_unkVariantIndex);
	ctx->Push(_outPropVariant);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getShopPedOutfitPropVariant call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getShopPedOutfitComponentVariant(int32_t _outfitHash, int32_t _unkVariantIndex, int32_t& _outComponentVariant) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19F2A026EDF0013F);
	ctx->Reset();
	ctx->Push(_outfitHash);
	ctx->Push(_unkVariantIndex);
	ctx->Push(_outComponentVariant);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getShopPedOutfitComponentVariant call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getNumDlcVehicles() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7A866D21CD2329B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumDlcVehicles call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getDlcVehicleModel(int32_t _dlcVehicleIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xECC01B7C5763333C);
	ctx->Reset();
	ctx->Push(_dlcVehicleIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDlcVehicleModel call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getDlcVehicleData(int32_t _dlcVehicleIndex, int32_t& _outData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33468EDC08E371F6);
	ctx->Reset();
	ctx->Push(_dlcVehicleIndex);
	ctx->Push(_outData);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDlcVehicleData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getDlcVehicleFlags(int32_t _dlcVehicleIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5549EE11FA22FCF2);
	ctx->Reset();
	ctx->Push(_dlcVehicleIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDlcVehicleFlags call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumDlcWeapons() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE47635F352DA367);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumDlcWeapons call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumDlcWeaponsSp() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4160B65AE085B5A9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumDlcWeaponsSp call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getDlcWeaponData(int32_t _dlcWeaponIndex, int32_t& _outData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79923CD21BECE14E);
	ctx->Reset();
	ctx->Push(_dlcWeaponIndex);
	ctx->Push(_outData);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDlcWeaponData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getDlcWeaponDataSp(int32_t _dlcWeaponIndex, int32_t& _outData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x310836EE7129BA33);
	ctx->Reset();
	ctx->Push(_dlcWeaponIndex);
	ctx->Push(_outData);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDlcWeaponDataSp call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getNumDlcWeaponComponents(int32_t _dlcWeaponIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x405425358A7D61FE);
	ctx->Reset();
	ctx->Push(_dlcWeaponIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumDlcWeaponComponents call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumDlcWeaponComponentsSp(int32_t _dlcWeaponIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD2A7A6DFF55841B);
	ctx->Reset();
	ctx->Push(_dlcWeaponIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumDlcWeaponComponentsSp call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getDlcWeaponComponentData(int32_t _dlcWeaponIndex, int32_t _dlcWeapCompIndex, int32_t& _ComponentDataPtr) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CF598A2957C2BF8);
	ctx->Reset();
	ctx->Push(_dlcWeaponIndex);
	ctx->Push(_dlcWeapCompIndex);
	ctx->Push(_ComponentDataPtr);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDlcWeaponComponentData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getDlcWeaponComponentDataSp(int32_t _dlcWeaponIndex, int32_t _dlcWeapCompIndex, int32_t& _ComponentDataPtr) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31D5E073B6F93CDC);
	ctx->Reset();
	ctx->Push(_dlcWeaponIndex);
	ctx->Push(_dlcWeapCompIndex);
	ctx->Push(_ComponentDataPtr);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDlcWeaponComponentDataSp call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isContentItemLocked(int32_t _itemHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4D7B033C3AA243C);
	ctx->Reset();
	ctx->Push(_itemHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isContentItemLocked call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isDlcVehicleMod(int32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0564B9FF9631B82C);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isDlcVehicleMod call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getDlcVehicleModLockHash(int32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC098810437312FFF);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDlcVehicleModLockHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_loadContentChangeSetGroup(int32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6BEDF5769AC2DC07);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native loadContentChangeSetGroup call failed" << Log::Endl;
	}
}

EXPORT void Native_unloadContentChangeSetGroup(int32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C1978285B036B25);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native unloadContentChangeSetGroup call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_startScriptFire(float _X, float _Y, float _Z, int32_t _maxChildren, bool _isGasFire) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B83617E04503888);
	ctx->Reset();
	ctx->Push(_X);
	ctx->Push(_Y);
	ctx->Push(_Z);
	ctx->Push(_maxChildren);
	ctx->Push(_isGasFire);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startScriptFire call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_removeScriptFire(int32_t _fireHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FF548385680673F);
	ctx->Reset();
	ctx->Push(_fireHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeScriptFire call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_startEntityFire(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6A9D9708F6F23DF);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startEntityFire call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_stopEntityFire(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F0DD2EBBB651AFF);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopEntityFire call failed" << Log::Endl;
	}
}

EXPORT bool Native_isEntityOnFire(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28D3FED7190D3A0B);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityOnFire call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getNumberOfFiresInRange(float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50CAD495A460B305);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumberOfFiresInRange call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setFireSpreadRate(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F390AC4155099BA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFireSpreadRate call failed" << Log::Endl;
	}
}

EXPORT void Native_stopFireInRange(float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x056A8A219B8E829F);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopFireInRange call failed" << Log::Endl;
	}
}

EXPORT bool Native_getClosestFirePos(vector3_t& _outPosition, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x352A9F6BCF90081F);
	ctx->Reset();
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClosestFirePos call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
}

EXPORT void Native_addExplosion(float _x, float _y, float _z, int32_t _explosionType, float _damageScale, bool _isAudible, bool _isInvisible, float _cameraShake, bool _noDamage) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3AD2BDBAEE269AC);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_explosionType);
	ctx->Push(_damageScale);
	ctx->Push(_isAudible);
	ctx->Push(_isInvisible);
	ctx->Push(_cameraShake);
	ctx->Push(_noDamage);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addExplosion call failed" << Log::Endl;
	}
}

EXPORT void Native_addOwnedExplosion(int32_t _ped, float _x, float _y, float _z, int32_t _explosionType, float _damageScale, bool _isAudible, bool _isInvisible, float _cameraShake) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x172AA1B624FA1013);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_explosionType);
	ctx->Push(_damageScale);
	ctx->Push(_isAudible);
	ctx->Push(_isInvisible);
	ctx->Push(_cameraShake);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addOwnedExplosion call failed" << Log::Endl;
	}
}

EXPORT void Native_addExplosionWithUserVfx(float _x, float _y, float _z, int32_t _explosionType, int32_t _explosionFx, float _damageScale, bool _isAudible, bool _isInvisible, float _cameraShake) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36DD3FE58B5E5212);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_explosionType);
	ctx->Push(_explosionFx);
	ctx->Push(_damageScale);
	ctx->Push(_isAudible);
	ctx->Push(_isInvisible);
	ctx->Push(_cameraShake);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addExplosionWithUserVfx call failed" << Log::Endl;
	}
}

EXPORT bool Native_isExplosionInArea(int32_t _explosionType, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E2EBA0EE7CED0E0);
	ctx->Reset();
	ctx->Push(_explosionType);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isExplosionInArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isExplosionActiveInArea(int32_t _explosionType, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6070104B699B2EF4);
	ctx->Reset();
	ctx->Push(_explosionType);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isExplosionActiveInArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isExplosionInSphere(int32_t _explosionType, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB0F816885B0E483);
	ctx->Reset();
	ctx->Push(_explosionType);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isExplosionInSphere call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getEntityInsideExplosionSphere(int32_t _explosionType, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3CD51E3DB86F176);
	ctx->Reset();
	ctx->Push(_explosionType);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityInsideExplosionSphere call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isExplosionInAngledArea(int32_t _explosionType, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA079A6C51525DC4B);
	ctx->Reset();
	ctx->Push(_explosionType);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isExplosionInAngledArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getEntityInsideExplosionArea(int32_t _explosionType, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14BA4BA137AF6CEC);
	ctx->Reset();
	ctx->Push(_explosionType);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityInsideExplosionArea call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_beginTextCommandBusyspinnerOn(const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xABA17D7CE615ADBF);
	ctx->Reset();
	ctx->Push(_string);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginTextCommandBusyspinnerOn call failed" << Log::Endl;
	}
}

EXPORT void Native_endTextCommandBusyspinnerOn(int32_t _busySpinnerType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD12F8228410D9B4);
	ctx->Reset();
	ctx->Push(_busySpinnerType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandBusyspinnerOn call failed" << Log::Endl;
	}
}

EXPORT void Native_busyspinnerOff() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10D373323E5B9C0D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native busyspinnerOff call failed" << Log::Endl;
	}
}

EXPORT void Native_preloadBusyspinner() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC65AB383CD91DF98);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native preloadBusyspinner call failed" << Log::Endl;
	}
}

EXPORT bool Native_busyspinnerIsOn() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD422FCC5F239A915);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native busyspinnerIsOn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_busyspinnerIsDisplaying() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2A592B04648A9CB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native busyspinnerIsDisplaying call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x9245E81072704B8A(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9245E81072704B8A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9245E81072704B8A call failed" << Log::Endl;
	}
}

EXPORT void Native_setMouseCursorActiveThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAE7CE1D63167423);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMouseCursorActiveThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setMouseCursorSprite(int32_t _spriteId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DB8CFFD58B62552);
	ctx->Reset();
	ctx->Push(_spriteId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMouseCursorSprite call failed" << Log::Endl;
	}
}

EXPORT void Native_setMouseCursorVisibleInMenus(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98215325A695E78A);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMouseCursorVisibleInMenus call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x3D9ACB1EB139E702() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D9ACB1EB139E702);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3D9ACB1EB139E702 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x632B2940C67F4EA9(int32_t _scaleformHandle, int32_t& _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x632B2940C67F4EA9);
	ctx->Reset();
	ctx->Push(_scaleformHandle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x632B2940C67F4EA9 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_thefeedOnlyShowTooltips(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F1554B0CC2089FA);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedOnlyShowTooltips call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedSetScriptedMenuHeight(float _pos) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55598D21339CB998);
	ctx->Reset();
	ctx->Push(_pos);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedSetScriptedMenuHeight call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedDisableLoadingScreenTips() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32888337579A5970);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedDisableLoadingScreenTips call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedHideThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25F87B30C382FCA7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedHideThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedDisplayLoadingScreenTips() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15CFA549788D35EF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedDisplayLoadingScreenTips call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedFlushQueue() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8FDB297A8D25FBA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedFlushQueue call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedRemoveItem(int32_t _notificationId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE4390CB40B3E627);
	ctx->Reset();
	ctx->Push(_notificationId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedRemoveItem call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedForceRenderOn() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA13C11E1B5C06BFC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedForceRenderOn call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedForceRenderOff() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x583049884A2EEE3C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedForceRenderOff call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedPause() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDB423997FA30340);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedPause call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedResume() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1CD1E48E025E661);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedResume call failed" << Log::Endl;
	}
}

EXPORT bool Native_thefeedIsPaused() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9CBFD40B3FA3010);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedIsPaused call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_thefeedSpsExtendWidescreenOn() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4438C0564490E63);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedSpsExtendWidescreenOn call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedSpsExtendWidescreenOff() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB695E2CD0A2DA9EE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedSpsExtendWidescreenOff call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_thefeedGetFirstVisibleDeleteRemaining() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82352748437638CA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedGetFirstVisibleDeleteRemaining call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_thefeedCommentTeleportPoolOn() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56C8B608CFD49854);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedCommentTeleportPoolOn call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedCommentTeleportPoolOff() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADED7F5748ACAFE6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedCommentTeleportPoolOff call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedSetNextPostBackgroundColor(int32_t _hudColorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92F0DA1E27DB96DC);
	ctx->Reset();
	ctx->Push(_hudColorIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedSetNextPostBackgroundColor call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedSetAnimpostfxColor(int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17430B918701C342);
	ctx->Reset();
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedSetAnimpostfxColor call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedSetAnimpostfxCount(int32_t _count) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17AD8C9706BDD88A);
	ctx->Reset();
	ctx->Push(_count);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedSetAnimpostfxCount call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedSetAnimpostfxSound(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A0C7C9BB10ABB36);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedSetAnimpostfxSound call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedResetAllParameters() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDD85225B2DEA55E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedResetAllParameters call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedFreezeNextPost() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDEC055AB549E328);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedFreezeNextPost call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedClearFrozenPost() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80FE4F3AB4E1B62A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedClearFrozenPost call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedSetFlushAnimpostfx(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAE4F9B97CD43B30);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedSetFlushAnimpostfx call failed" << Log::Endl;
	}
}

EXPORT void Native_thefeedAddTxdRef(int32_t& _p0, int32_t& _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x317EBA71D7543F52);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native thefeedAddTxdRef call failed" << Log::Endl;
	}
}

EXPORT void Native_beginTextCommandThefeedPost(const char* _text) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x202709F4C58A0424);
	ctx->Reset();
	ctx->Push(_text);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginTextCommandThefeedPost call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_endTextCommandThefeedPostStats(const char* _statTitle, int32_t _iconEnum, bool _stepVal, int32_t _barValue, bool _isImportant, const char* _pictureTextureDict, const char* _pictureTextureName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B7E9A4EAAA93C89);
	ctx->Reset();
	ctx->Push(_statTitle);
	ctx->Push(_iconEnum);
	ctx->Push(_stepVal);
	ctx->Push(_barValue);
	ctx->Push(_isImportant);
	ctx->Push(_pictureTextureDict);
	ctx->Push(_pictureTextureName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostStats call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostMessagetext(const char* _txdName, const char* _textureName, bool _flash, int32_t _iconType, const char* _sender, const char* _subject) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CCD9A37359072CF);
	ctx->Reset();
	ctx->Push(_txdName);
	ctx->Push(_textureName);
	ctx->Push(_flash);
	ctx->Push(_iconType);
	ctx->Push(_sender);
	ctx->Push(_subject);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostMessagetext call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostMessagetextGxtEntry(const char* _txdName, const char* _textureName, bool _flash, int32_t _iconType, const char* _sender, const char* _subject) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6F580E4C94926AC);
	ctx->Reset();
	ctx->Push(_txdName);
	ctx->Push(_textureName);
	ctx->Push(_flash);
	ctx->Push(_iconType);
	ctx->Push(_sender);
	ctx->Push(_subject);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostMessagetextGxtEntry call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostMessagetextTu(const char* _txdName, const char* _textureName, bool _flash, int32_t _iconType, const char* _sender, const char* _subject, float _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E6611149DB3DB6B);
	ctx->Reset();
	ctx->Push(_txdName);
	ctx->Push(_textureName);
	ctx->Push(_flash);
	ctx->Push(_iconType);
	ctx->Push(_sender);
	ctx->Push(_subject);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostMessagetextTu call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostMessagetextWithCrewTag(const char* _txdName, const char* _textureName, bool _flash, int32_t _iconType, const char* _sender, const char* _subject, float _duration, const char* _clanTag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CBF7BADE20DB93E);
	ctx->Reset();
	ctx->Push(_txdName);
	ctx->Push(_textureName);
	ctx->Push(_flash);
	ctx->Push(_iconType);
	ctx->Push(_sender);
	ctx->Push(_subject);
	ctx->Push(_duration);
	ctx->Push(_clanTag);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostMessagetextWithCrewTag call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon(const char* _txdName, const char* _textureName, bool _flash, int32_t _iconType1, const char* _sender, const char* _subject, float _duration, const char* _clanTag, int32_t _iconType2, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x531B84E7DA981FB6);
	ctx->Reset();
	ctx->Push(_txdName);
	ctx->Push(_textureName);
	ctx->Push(_flash);
	ctx->Push(_iconType1);
	ctx->Push(_sender);
	ctx->Push(_subject);
	ctx->Push(_duration);
	ctx->Push(_clanTag);
	ctx->Push(_iconType2);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostMessagetextWithCrewTagAndAdditionalIcon call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostTicker(bool _blink, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2ED7843F8F801023);
	ctx->Reset();
	ctx->Push(_blink);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostTicker call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostTickerForced(bool _blink, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44FA03975424A0EE);
	ctx->Reset();
	ctx->Push(_blink);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostTickerForced call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostTickerWithTokens(bool _blink, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x378E809BF61EC840);
	ctx->Reset();
	ctx->Push(_blink);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostTickerWithTokens call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostAward(const char* _textureDict, const char* _textureName, int32_t _rpBonus, int32_t _colorOverlay, const char* _titleLabel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA295B6F28BD587D);
	ctx->Reset();
	ctx->Push(_textureDict);
	ctx->Push(_textureName);
	ctx->Push(_rpBonus);
	ctx->Push(_colorOverlay);
	ctx->Push(_titleLabel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostAward call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostCrewtag(bool _p0, bool _p1, int32_t& _p2, int32_t _p3, bool _isLeader, bool _unk0, int32_t _clanDesc, int32_t _R, int32_t _G, int32_t _B) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97C9E4E7024A8F2C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_isLeader);
	ctx->Push(_unk0);
	ctx->Push(_clanDesc);
	ctx->Push(_R);
	ctx->Push(_G);
	ctx->Push(_B);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostCrewtag call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostCrewtagWithGameName(bool _p0, bool _p1, int32_t& _p2, int32_t _p3, bool _isLeader, bool _unk0, int32_t _clanDesc, const char* _playerName, int32_t _R, int32_t _G, int32_t _B) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x137BC35589E34E1E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_isLeader);
	ctx->Push(_unk0);
	ctx->Push(_clanDesc);
	ctx->Push(_playerName);
	ctx->Push(_R);
	ctx->Push(_G);
	ctx->Push(_B);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostCrewtagWithGameName call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostUnlock(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33EE12743CCD6343);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostUnlock call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostUnlockTu(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8F3AAF93D0600BF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostUnlockTu call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostUnlockTuWithColor(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7AE0589093A2E088);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostUnlockTuWithColor call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostMpticker(bool _blink, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF020C96915705B3A);
	ctx->Reset();
	ctx->Push(_blink);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostMpticker call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostCrewRankup(const char* _p0, const char* _p1, const char* _p2, bool _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EFCCF6EC66D85E4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostCrewRankup call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostVersusTu(int32_t& _p0, int32_t& _p1, int32_t _p2, int32_t& _p3, int32_t& _p4, int32_t _p5, int32_t _p6, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6871B0555B02996);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostVersusTu call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostReplayIcon(int32_t _type, int32_t _image, const char* _text) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD202B92CBF1D816F);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_image);
	ctx->Push(_text);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostReplayIcon call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_endTextCommandThefeedPostReplayInput(int32_t _type, const char* _button, const char* _text) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD6CB2CCE7C2735C);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_button);
	ctx->Push(_text);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandThefeedPostReplayInput call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_beginTextCommandPrint(const char* _GxtEntry) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB87A37EEB7FAA67D);
	ctx->Reset();
	ctx->Push(_GxtEntry);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginTextCommandPrint call failed" << Log::Endl;
	}
}

EXPORT void Native_endTextCommandPrint(int32_t _duration, bool _drawImmediately) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D77056A530643F6);
	ctx->Reset();
	ctx->Push(_duration);
	ctx->Push(_drawImmediately);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandPrint call failed" << Log::Endl;
	}
}

EXPORT void Native_beginTextCommandIsMessageDisplayed(const char* _text) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x853648FD1063A213);
	ctx->Reset();
	ctx->Push(_text);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginTextCommandIsMessageDisplayed call failed" << Log::Endl;
	}
}

EXPORT bool Native_endTextCommandIsMessageDisplayed() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A9BA1AB3E237613);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandIsMessageDisplayed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_beginTextCommandDisplayText(const char* _text) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25FBB336DF1804CB);
	ctx->Reset();
	ctx->Push(_text);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginTextCommandDisplayText call failed" << Log::Endl;
	}
}

EXPORT void Native_endTextCommandDisplayText(float _x, float _y, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD015E5BB0D96A57);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandDisplayText call failed" << Log::Endl;
	}
}

EXPORT void Native_beginTextCommandGetWidth(const char* _text) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54CE8AC98E120CAB);
	ctx->Reset();
	ctx->Push(_text);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginTextCommandGetWidth call failed" << Log::Endl;
	}
}

EXPORT float Native_endTextCommandGetWidth(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85F061DA64ED2F67);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandGetWidth call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_beginTextCommandLineCount(const char* _entry) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x521FB041D93DD0E4);
	ctx->Reset();
	ctx->Push(_entry);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginTextCommandLineCount call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_endTextCommandLineCount(float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9040DFB09BE75706);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandLineCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_beginTextCommandDisplayHelp(const char* _inputType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8509B634FBE7DA11);
	ctx->Reset();
	ctx->Push(_inputType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginTextCommandDisplayHelp call failed" << Log::Endl;
	}
}

EXPORT void Native_endTextCommandDisplayHelp(int32_t _p0, bool _loop, bool _beep, int32_t _shape) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x238FFE5C7B0498A6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_loop);
	ctx->Push(_beep);
	ctx->Push(_shape);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandDisplayHelp call failed" << Log::Endl;
	}
}

EXPORT void Native_beginTextCommandIsThisHelpMessageBeingDisplayed(const char* _labelName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A24DA3A41B718F5);
	ctx->Reset();
	ctx->Push(_labelName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginTextCommandIsThisHelpMessageBeingDisplayed call failed" << Log::Endl;
	}
}

EXPORT bool Native_endTextCommandIsThisHelpMessageBeingDisplayed(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10BDDBFC529428DD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandIsThisHelpMessageBeingDisplayed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_beginTextCommandSetBlipName(const char* _textLabel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9113A30DE5C6670);
	ctx->Reset();
	ctx->Push(_textLabel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginTextCommandSetBlipName call failed" << Log::Endl;
	}
}

EXPORT void Native_endTextCommandSetBlipName(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC38B49BCB83BC9B);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandSetBlipName call failed" << Log::Endl;
	}
}

EXPORT void Native_beginTextCommandObjective(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23D69E0465570028);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginTextCommandObjective call failed" << Log::Endl;
	}
}

EXPORT void Native_endTextCommandObjective(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFDBDF5AE59BA0F4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandObjective call failed" << Log::Endl;
	}
}

EXPORT void Native_beginTextCommandClearPrint(const char* _text) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE124FA80A759019C);
	ctx->Reset();
	ctx->Push(_text);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginTextCommandClearPrint call failed" << Log::Endl;
	}
}

EXPORT void Native_endTextCommandClearPrint() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCC75460ABA29378);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandClearPrint call failed" << Log::Endl;
	}
}

EXPORT void Native_beginTextCommandOverrideButtonText(const char* _gxtEntry) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F9EE5687F8EECCD);
	ctx->Reset();
	ctx->Push(_gxtEntry);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginTextCommandOverrideButtonText call failed" << Log::Endl;
	}
}

EXPORT void Native_endTextCommandOverrideButtonText(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA86911979638106F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endTextCommandOverrideButtonText call failed" << Log::Endl;
	}
}

EXPORT void Native_addTextComponentInteger(int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03B504CF259931BC);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addTextComponentInteger call failed" << Log::Endl;
	}
}

EXPORT void Native_addTextComponentFloat(float _value, int32_t _decimalPlaces) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7DCB5B874BCD96E);
	ctx->Reset();
	ctx->Push(_value);
	ctx->Push(_decimalPlaces);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addTextComponentFloat call failed" << Log::Endl;
	}
}

EXPORT void Native_addTextComponentSubstringTextLabel(const char* _labelName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC63CD5D2920ACBE7);
	ctx->Reset();
	ctx->Push(_labelName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addTextComponentSubstringTextLabel call failed" << Log::Endl;
	}
}

EXPORT void Native_addTextComponentSubstringTextLabelHashKey(int32_t _gxtEntryHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17299B63C7683A2B);
	ctx->Reset();
	ctx->Push(_gxtEntryHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addTextComponentSubstringTextLabelHashKey call failed" << Log::Endl;
	}
}

EXPORT void Native_addTextComponentSubstringBlipName(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80EAD8E2E1D5D52E);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addTextComponentSubstringBlipName call failed" << Log::Endl;
	}
}

EXPORT void Native_addTextComponentSubstringPlayerName(const char* _text) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C188BE134E074AA);
	ctx->Reset();
	ctx->Push(_text);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addTextComponentSubstringPlayerName call failed" << Log::Endl;
	}
}

EXPORT void Native_addTextComponentSubstringTime(int32_t _timestamp, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1115F16B8AB9E8BF);
	ctx->Reset();
	ctx->Push(_timestamp);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addTextComponentSubstringTime call failed" << Log::Endl;
	}
}

EXPORT void Native_addTextComponentFormattedInteger(int32_t _value, bool _commaSeparated) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E4C749FF9DE9CC4);
	ctx->Reset();
	ctx->Push(_value);
	ctx->Push(_commaSeparated);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addTextComponentFormattedInteger call failed" << Log::Endl;
	}
}

EXPORT void Native_addTextComponentSubstringPhoneNumber(const char* _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x761B77454205A61D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addTextComponentSubstringPhoneNumber call failed" << Log::Endl;
	}
}

EXPORT void Native_addTextComponentSubstringWebsite(const char* _website) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94CF4AC034C9C986);
	ctx->Reset();
	ctx->Push(_website);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addTextComponentSubstringWebsite call failed" << Log::Endl;
	}
}

EXPORT void Native_addTextComponentSubstringKeyboardDisplay(const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F68520888E69014);
	ctx->Reset();
	ctx->Push(_string);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addTextComponentSubstringKeyboardDisplay call failed" << Log::Endl;
	}
}

EXPORT void Native_setColourOfNextTextComponent(int32_t _hudColor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39BBF623FC803EAC);
	ctx->Reset();
	ctx->Push(_hudColor);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setColourOfNextTextComponent call failed" << Log::Endl;
	}
}

EXPORT const char* Native_getTextSubstring(const char* _text, int32_t _position, int32_t _length) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x169BD9382084C8C0);
	ctx->Reset();
	ctx->Push(_text);
	ctx->Push(_position);
	ctx->Push(_length);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTextSubstring call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_getTextSubstringSafe(const char* _text, int32_t _position, int32_t _length, int32_t _maxLength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2798643312205C5);
	ctx->Reset();
	ctx->Push(_text);
	ctx->Push(_position);
	ctx->Push(_length);
	ctx->Push(_maxLength);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTextSubstringSafe call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_getTextSubstringSlice(const char* _text, int32_t _startPosition, int32_t _endPosition) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE94AEBA5D82908A);
	ctx->Reset();
	ctx->Push(_text);
	ctx->Push(_startPosition);
	ctx->Push(_endPosition);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTextSubstringSlice call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_getLabelText(const char* _labelName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B5280EBA9840C72);
	ctx->Reset();
	ctx->Push(_labelName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getLabelText call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT void Native_clearPrints() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC33FA791322B9D9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPrints call failed" << Log::Endl;
	}
}

EXPORT void Native_clearBrief() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D292F73ADBD9313);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearBrief call failed" << Log::Endl;
	}
}

EXPORT void Native_clearAllHelpMessages() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6178F68A87A4D3A0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearAllHelpMessages call failed" << Log::Endl;
	}
}

EXPORT void Native_clearThisPrint(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF708001E1E536DD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearThisPrint call failed" << Log::Endl;
	}
}

EXPORT void Native_clearSmallPrints() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CEA2839313C09AC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearSmallPrints call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesTextBlockExist(const char* _gxt) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C7302E725259789);
	ctx->Reset();
	ctx->Push(_gxt);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesTextBlockExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_requestAdditionalText(const char* _gxt, int32_t _slot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71A78003C8E71424);
	ctx->Reset();
	ctx->Push(_gxt);
	ctx->Push(_slot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestAdditionalText call failed" << Log::Endl;
	}
}

EXPORT void Native_requestAdditionalTextForDlc(const char* _gxt, int32_t _slot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6009F9F1AE90D8A6);
	ctx->Reset();
	ctx->Push(_gxt);
	ctx->Push(_slot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestAdditionalTextForDlc call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasAdditionalTextLoaded(int32_t _slot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02245FE4BED318B8);
	ctx->Reset();
	ctx->Push(_slot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasAdditionalTextLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_clearAdditionalText(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A179DF17CCF04CD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearAdditionalText call failed" << Log::Endl;
	}
}

EXPORT bool Native_isStreamingAdditionalText(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B6817B71B85EBF0);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isStreamingAdditionalText call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasThisAdditionalTextLoaded(const char* _gxt, int32_t _slot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADBF060E2B30C5BC);
	ctx->Reset();
	ctx->Push(_gxt);
	ctx->Push(_slot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasThisAdditionalTextLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isMessageBeingDisplayed() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7984C03AA5CC2F41);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMessageBeingDisplayed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_doesTextLabelExist(const char* _gxt) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC09CA973C564252);
	ctx->Reset();
	ctx->Push(_gxt);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesTextLabelExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT const char* Native__0x98C3CF913D895111(const char* _string, int32_t _length) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98C3CF913D895111);
	ctx->Reset();
	ctx->Push(_string);
	ctx->Push(_length);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x98C3CF913D895111 call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT int32_t Native_getLengthOfStringWithThisTextLabel(const char* _gxt) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x801BD273D3A23F74);
	ctx->Reset();
	ctx->Push(_gxt);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getLengthOfStringWithThisTextLabel call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getLengthOfLiteralString(const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF030907CCBB8A9FD);
	ctx->Reset();
	ctx->Push(_string);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getLengthOfLiteralString call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getLengthOfLiteralStringInBytes(const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43E4111189E54F0E);
	ctx->Reset();
	ctx->Push(_string);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getLengthOfLiteralStringInBytes call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT const char* Native_getStreetNameFromHashKey(int32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0EF8A959B8A4CB9);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getStreetNameFromHashKey call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT bool Native_isHudPreferenceSwitchedOn() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1930DFA731813EC4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isHudPreferenceSwitchedOn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isRadarPreferenceSwitchedOn() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9EB6522EA68F22FE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isRadarPreferenceSwitchedOn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isSubtitlePreferenceSwitchedOn() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD6DACA4BA53E0A4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSubtitlePreferenceSwitchedOn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_displayHud(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6294919E56FF02A);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native displayHud call failed" << Log::Endl;
	}
}

EXPORT void Native_displayHudWhenDeadThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7669F9E39DC17063);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native displayHudWhenDeadThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_displayHudWhenPausedThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x402F9ED62087E898);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native displayHudWhenPausedThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_displayRadar(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0EBB943C300E693);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native displayRadar call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCD74233600C4EA6B(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD74233600C4EA6B);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCD74233600C4EA6B call failed" << Log::Endl;
	}
}

EXPORT bool Native__0xC2D2AD9EAAE265B8() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2D2AD9EAAE265B8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC2D2AD9EAAE265B8 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isHudHidden() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA86478C6958735C5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isHudHidden call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isRadarHidden() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x157F93B036700462);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isRadarHidden call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isMinimapRendering() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF754F20EB5CD51A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMinimapRendering call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x0C698D8F099174C7(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C698D8F099174C7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0C698D8F099174C7 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE4C3B169876D33D7(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4C3B169876D33D7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE4C3B169876D33D7 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xEB81A3DADD503187() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB81A3DADD503187);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEB81A3DADD503187 call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipRoute(int32_t _blip, bool _enabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F7D8A9BFB0B43E9);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_enabled);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_clearAllBlipRoutes() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD12882D3FF82BF11);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearAllBlipRoutes call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipRouteColour(int32_t _blip, int32_t _colour) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x837155CD2F63DA09);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_colour);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipRouteColour call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2790F4B17D098E26(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2790F4B17D098E26);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2790F4B17D098E26 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6CDD58146A436083(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CDD58146A436083);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6CDD58146A436083 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD1942374085C8469(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1942374085C8469);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD1942374085C8469 call failed" << Log::Endl;
	}
}

EXPORT void Native_addNextMessageToPreviousBriefs(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60296AF4BA14ABC5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addNextMessageToPreviousBriefs call failed" << Log::Endl;
	}
}

EXPORT void Native__0x57D760D55F54E071(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57D760D55F54E071);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x57D760D55F54E071 call failed" << Log::Endl;
	}
}

EXPORT void Native_setRadarZoomPrecise(float _zoom) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD12C5EEE184C337);
	ctx->Reset();
	ctx->Push(_zoom);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRadarZoomPrecise call failed" << Log::Endl;
	}
}

EXPORT void Native_setRadarZoom(int32_t _zoomLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x096EF57A0C999BBA);
	ctx->Reset();
	ctx->Push(_zoomLevel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRadarZoom call failed" << Log::Endl;
	}
}

EXPORT void Native_setRadarZoomToBlip(int32_t _blip, float _zoom) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF98E4B3E56AFC7B1);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_zoom);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRadarZoomToBlip call failed" << Log::Endl;
	}
}

EXPORT void Native_setRadarZoomToDistance(float _zoom) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB7CC0D58405AD41);
	ctx->Reset();
	ctx->Push(_zoom);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRadarZoomToDistance call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD2049635DEB9C375() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2049635DEB9C375);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD2049635DEB9C375 call failed" << Log::Endl;
	}
}

EXPORT void Native_getHudColour(int32_t _hudColorIndex, int32_t& _r, int32_t& _g, int32_t& _b, int32_t& _a) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C9C91AB74A0360F);
	ctx->Reset();
	ctx->Push(_hudColorIndex);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_a);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHudColour call failed" << Log::Endl;
	}
}

EXPORT void Native_setScriptVariableHudColour(int32_t _r, int32_t _g, int32_t _b, int32_t _a) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD68A5FF8A3A89874);
	ctx->Reset();
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_a);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScriptVariableHudColour call failed" << Log::Endl;
	}
}

EXPORT void Native_setScriptVariable2HudColour(int32_t _r, int32_t _g, int32_t _b, int32_t _a) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16A304E6CB2BFAB9);
	ctx->Reset();
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_a);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScriptVariable2HudColour call failed" << Log::Endl;
	}
}

EXPORT void Native_replaceHudColour(int32_t _hudColorIndex, int32_t _hudColorIndex2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CCC708F0F850613);
	ctx->Reset();
	ctx->Push(_hudColorIndex);
	ctx->Push(_hudColorIndex2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native replaceHudColour call failed" << Log::Endl;
	}
}

EXPORT void Native_replaceHudColourWithRgba(int32_t _hudColorIndex, int32_t _r, int32_t _g, int32_t _b, int32_t _a) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF314CF4F0211894E);
	ctx->Reset();
	ctx->Push(_hudColorIndex);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_a);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native replaceHudColourWithRgba call failed" << Log::Endl;
	}
}

EXPORT void Native_setAbilityBarVisibilityInMultiplayer(bool _visible) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DFEDD15019315A9);
	ctx->Reset();
	ctx->Push(_visible);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAbilityBarVisibilityInMultiplayer call failed" << Log::Endl;
	}
}

EXPORT void Native_setAllowAbilityBarInMultiplayer(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x889329C80FE5963C);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAllowAbilityBarInMultiplayer call failed" << Log::Endl;
	}
}

EXPORT void Native_flashAbilityBar(int32_t _millisecondsToFlash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02CFBA0C9E9275CE);
	ctx->Reset();
	ctx->Push(_millisecondsToFlash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native flashAbilityBar call failed" << Log::Endl;
	}
}

EXPORT void Native_setAbilityBarValue(float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9969599CCFF5D85E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAbilityBarValue call failed" << Log::Endl;
	}
}

EXPORT void Native_flashWantedDisplay(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA18AFB39081B6A1F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native flashWantedDisplay call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBA8D65C1C65702E5(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA8D65C1C65702E5);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBA8D65C1C65702E5 call failed" << Log::Endl;
	}
}

EXPORT float Native_getRenderedCharacterHeight(float _size, int32_t _font) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB88A37483346780);
	ctx->Reset();
	ctx->Push(_size);
	ctx->Push(_font);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRenderedCharacterHeight call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setTextScale(float _scale, float _size) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07C837F9A01C34C9);
	ctx->Reset();
	ctx->Push(_scale);
	ctx->Push(_size);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTextScale call failed" << Log::Endl;
	}
}

EXPORT void Native_setTextColour(int32_t _red, int32_t _green, int32_t _blue, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE6B23FFA53FB442);
	ctx->Reset();
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTextColour call failed" << Log::Endl;
	}
}

EXPORT void Native_setTextCentre(bool _align) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC02F4DBFB51D988B);
	ctx->Reset();
	ctx->Push(_align);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTextCentre call failed" << Log::Endl;
	}
}

EXPORT void Native_setTextRightJustify(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B3C4650BC8BEE47);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTextRightJustify call failed" << Log::Endl;
	}
}

EXPORT void Native_setTextJustification(int32_t _justifyType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E096588B13FFECA);
	ctx->Reset();
	ctx->Push(_justifyType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTextJustification call failed" << Log::Endl;
	}
}

EXPORT void Native_setTextWrap(float _start, float _end) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63145D9C883A1A70);
	ctx->Reset();
	ctx->Push(_start);
	ctx->Push(_end);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTextWrap call failed" << Log::Endl;
	}
}

EXPORT void Native_setTextLeading(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA50ABC31E3CDFAFF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTextLeading call failed" << Log::Endl;
	}
}

EXPORT void Native_setTextProportional(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x038C1F517D7FDCF8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTextProportional call failed" << Log::Endl;
	}
}

EXPORT void Native_setTextFont(int32_t _fontType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66E0276CC5F6B9DA);
	ctx->Reset();
	ctx->Push(_fontType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTextFont call failed" << Log::Endl;
	}
}

EXPORT void Native_setTextDropShadow() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CA3E9EAC9D93E5E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTextDropShadow call failed" << Log::Endl;
	}
}

EXPORT void Native_setTextDropshadow(int32_t _distance, int32_t _r, int32_t _g, int32_t _b, int32_t _a) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x465C84BC39F1C351);
	ctx->Reset();
	ctx->Push(_distance);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_a);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTextDropshadow call failed" << Log::Endl;
	}
}

EXPORT void Native_setTextOutline() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2513DFB0FB8400FE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTextOutline call failed" << Log::Endl;
	}
}

EXPORT void Native_setTextEdge(int32_t _p0, int32_t _r, int32_t _g, int32_t _b, int32_t _a) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x441603240D202FA6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_a);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTextEdge call failed" << Log::Endl;
	}
}

EXPORT void Native_setTextRenderId(int32_t _renderId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F15302936E07111);
	ctx->Reset();
	ctx->Push(_renderId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTextRenderId call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getDefaultScriptRendertargetRenderId() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52F0982D7FD156B6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDefaultScriptRendertargetRenderId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_registerNamedRendertarget(const char* _name, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57D9C12635E25CE3);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerNamedRendertarget call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isNamedRendertargetRegistered(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78DCDC15C9F116B4);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isNamedRendertargetRegistered call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_releaseNamedRendertarget(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE9F6FFE837354DD4);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native releaseNamedRendertarget call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_linkNamedRendertarget(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6C09E276AEB3F2D);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native linkNamedRendertarget call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getNamedRendertargetRenderId(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A6478B61C6BDC3B);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNamedRendertargetRenderId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isNamedRendertargetLinked(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x113750538FA31298);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isNamedRendertargetLinked call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_clearHelp(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DFCED7A656F8802);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearHelp call failed" << Log::Endl;
	}
}

EXPORT bool Native_isHelpMessageOnScreen() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDAD37F45428801AE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isHelpMessageOnScreen call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x214CD562A939246A() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x214CD562A939246A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x214CD562A939246A call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isHelpMessageBeingDisplayed() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D79439A6B55AC67);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isHelpMessageBeingDisplayed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isHelpMessageFadingOut() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x327EDEEEAC55C369);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isHelpMessageFadingOut call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setHelpMessageTextStyle(int32_t _style, int32_t _hudColor, int32_t _alpha, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9C362BABECDDC7A);
	ctx->Reset();
	ctx->Push(_style);
	ctx->Push(_hudColor);
	ctx->Push(_alpha);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHelpMessageTextStyle call failed" << Log::Endl;
	}
}

EXPORT bool Native_getStandardBlipEnumId() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A9923385BDB9DAD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getStandardBlipEnumId call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getWaypointBlipEnumId() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x186E5D252FA50E7D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWaypointBlipEnumId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumberOfActiveBlips() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A3FF3DE163034E8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumberOfActiveBlips call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNextBlipInfoId(int32_t _blipSprite) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14F96AA50D6FBEA7);
	ctx->Reset();
	ctx->Push(_blipSprite);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNextBlipInfoId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getFirstBlipInfoId(int32_t _blipSprite) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1BEDE233E6CD2A1F);
	ctx->Reset();
	ctx->Push(_blipSprite);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFirstBlipInfoId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getClosestBlipOfType(int32_t _blipSprite) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD484BF71050CA1EE);
	ctx->Reset();
	ctx->Push(_blipSprite);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClosestBlipOfType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT vector3_t Native_getBlipInfoIdCoord(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA7C7F0AADF25D09);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBlipInfoIdCoord call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT int32_t Native_getBlipInfoIdDisplay(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E314167F701DC3B);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBlipInfoIdDisplay call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getBlipInfoIdType(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE9B0959FFD0779B);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBlipInfoIdType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getBlipInfoIdEntityIndex(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4BA4E2553AFEDC2C);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBlipInfoIdEntityIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getBlipInfoIdPickupIndex(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B6786E4C03DD382);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBlipInfoIdPickupIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getBlipFromEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC8DBDCA2436F7E8);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBlipFromEntity call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_addBlipForRadius(float _posX, float _posY, float _posZ, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46818D79B1F7499A);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addBlipForRadius call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_addBlipForArea(float _x, float _y, float _z, float _width, float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE5D0E5E315DB238);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_width);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addBlipForArea call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_addBlipForEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CDE92C702A8FCE7);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addBlipForEntity call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_addBlipForPickup(int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE339365C863BD36);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addBlipForPickup call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_addBlipForCoord(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A039BB0BCA604B6);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addBlipForCoord call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_triggerSonarBlip(float _posX, float _posY, float _posZ, float _radius, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72DD432F3CDFC0EE);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_radius);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native triggerSonarBlip call failed" << Log::Endl;
	}
}

EXPORT void Native_allowSonarBlips(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60734CC207C9833C);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native allowSonarBlips call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipCoords(int32_t _blip, float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE2AF67E9D9AF65D);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipCoords call failed" << Log::Endl;
	}
}

EXPORT vector3_t Native_getBlipCoords(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x586AFE3FF72D996E);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBlipCoords call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT void Native_setBlipSprite(int32_t _blip, int32_t _spriteId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF735600A4696DAF);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_spriteId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipSprite call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getBlipSprite(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1FC877464A04FC4F);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBlipSprite call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x9FCB3CBFB3EAD69A(int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FCB3CBFB3EAD69A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9FCB3CBFB3EAD69A call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB7B873520C84C118() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7B873520C84C118);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB7B873520C84C118 call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipNameFromTextFile(int32_t _blip, const char* _gxtEntry) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAA0FFE120D92784);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_gxtEntry);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipNameFromTextFile call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipNameToPlayerName(int32_t _blip, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x127DE7B20C60A6A3);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipNameToPlayerName call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipAlpha(int32_t _blip, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45FF974EEE1C8734);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipAlpha call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getBlipAlpha(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x970F608F0EE6C885);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBlipAlpha call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setBlipFade(int32_t _blip, int32_t _opacity, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2AEE8F8390D2298C);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_opacity);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipFade call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x2C173AE2BDB9385E(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C173AE2BDB9385E);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2C173AE2BDB9385E call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setBlipRotation(int32_t _blip, int32_t _rotation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF87683CDF73C3F6E);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_rotation);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipRotation call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipSquaredRotation(int32_t _blip, float _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8B6AFDAC320AC87);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipSquaredRotation call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getBlipRotation(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x003E92BA477F9D7F);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBlipRotation call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setBlipFlashTimer(int32_t _blip, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3CD6FD297AE87CC);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipFlashTimer call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipFlashInterval(int32_t _blip, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA51DB313C010A7E);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipFlashInterval call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipColour(int32_t _blip, int32_t _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03D7FB09E75D6B7E);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipColour call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipSecondaryColour(int32_t _blip, int32_t _r, int32_t _g, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14892474891E09EB);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipSecondaryColour call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getBlipColour(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF729E8D20CF7327);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBlipColour call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getBlipHudColour(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x729B5F1EFBC0AAEE);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBlipHudColour call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isBlipShortRange(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA5F8727EB75B926);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isBlipShortRange call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isBlipOnMinimap(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE41CA53051197A27);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isBlipOnMinimap call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_doesBlipHaveGpsRoute(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD2238F57B977751);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesBlipHaveGpsRoute call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setBlipHiddenOnLegend(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54318C915D27E4CE);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipHiddenOnLegend call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipHighDetail(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2590BC29220CEBB);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipHighDetail call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipAsMissionCreatorBlip(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24AC0137444F9FD5);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipAsMissionCreatorBlip call failed" << Log::Endl;
	}
}

EXPORT bool Native_isMissionCreatorBlip(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26F49BF3381D933D);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMissionCreatorBlip call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getNewSelectedMissionCreatorBlip() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C90988E7C8E1AF4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNewSelectedMissionCreatorBlip call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isHoveringOverMissionCreatorBlip() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4167EFE0527D706E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isHoveringOverMissionCreatorBlip call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_showStartMissionInstructionalButton(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1A6C18B35BCADE6);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native showStartMissionInstructionalButton call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2916A928514C9827() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2916A928514C9827);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2916A928514C9827 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB552929B85FC27EC(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB552929B85FC27EC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB552929B85FC27EC call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipFlashes(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB14552383D39CE3E);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipFlashes call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipFlashesAlternate(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E8D9498C56DD0D1);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipFlashesAlternate call failed" << Log::Endl;
	}
}

EXPORT bool Native_isBlipFlashing(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5E41FD83AD6CEF0);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isBlipFlashing call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setBlipAsShortRange(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE8BE4FE60E27B72);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipAsShortRange call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipScale(int32_t _blip, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD38744167B2FA257);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipScale call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipScaleTransformation(int32_t _blip, float _xScale, float _yScale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD6524439909C979);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_xScale);
	ctx->Push(_yScale);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipScaleTransformation call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipPriority(int32_t _blip, int32_t _priority) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE9FC9EF6A9FAC79);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_priority);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipPriority call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipDisplay(int32_t _blip, int32_t _displayId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9029B2F3DA924928);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_displayId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipDisplay call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipCategory(int32_t _blip, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x234CDD44D996FD9A);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipCategory call failed" << Log::Endl;
	}
}

EXPORT void Native_removeBlip(int32_t& _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x86A652570E5F25DD);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeBlip call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipAsFriendly(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F6F290102C02AB4);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipAsFriendly call failed" << Log::Endl;
	}
}

EXPORT void Native_pulseBlip(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x742D6FD43115AF73);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pulseBlip call failed" << Log::Endl;
	}
}

EXPORT void Native_showNumberOnBlip(int32_t _blip, int32_t _number) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3C0B359DCB848B6);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_number);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native showNumberOnBlip call failed" << Log::Endl;
	}
}

EXPORT void Native_hideNumberOnBlip(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x532CFF637EF80148);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hideNumberOnBlip call failed" << Log::Endl;
	}
}

EXPORT void Native_showHeightOnBlip(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75A16C3DA34F1245);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native showHeightOnBlip call failed" << Log::Endl;
	}
}

EXPORT void Native_showTickOnBlip(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74513EA3E505181E);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native showTickOnBlip call failed" << Log::Endl;
	}
}

EXPORT void Native_showHeadingIndicatorOnBlip(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FBCA48327B914DF);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native showHeadingIndicatorOnBlip call failed" << Log::Endl;
	}
}

EXPORT void Native_showOutlineIndicatorOnBlip(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB81656BC81FE24D1);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native showOutlineIndicatorOnBlip call failed" << Log::Endl;
	}
}

EXPORT void Native_showFriendIndicatorOnBlip(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23C3EB807312F01A);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native showFriendIndicatorOnBlip call failed" << Log::Endl;
	}
}

EXPORT void Native_showCrewIndicatorOnBlip(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCFB5D4DB8BF367E);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native showCrewIndicatorOnBlip call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipDisplayIndicatorOnBlip(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4278F70131BAA6D);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipDisplayIndicatorOnBlip call failed" << Log::Endl;
	}
}

EXPORT void Native__0x4B5B620C9B59ED34(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B5B620C9B59ED34);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4B5B620C9B59ED34 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2C9F302398E13141(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C9F302398E13141);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2C9F302398E13141 call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipAsMinimalOnEdge(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B6D467DAB714E8D);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipAsMinimalOnEdge call failed" << Log::Endl;
	}
}

EXPORT void Native_setRadiusBlipEdge(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25615540D894B814);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRadiusBlipEdge call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesBlipExist(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6DB27D19ECBB7DA);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesBlipExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setWaypointOff() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7E4E2D361C2627F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWaypointOff call failed" << Log::Endl;
	}
}

EXPORT void Native_deleteWaypoint() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8E694757BCEA8E9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native deleteWaypoint call failed" << Log::Endl;
	}
}

EXPORT void Native_refreshWaypoint() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81FA173F170560D1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native refreshWaypoint call failed" << Log::Endl;
	}
}

EXPORT bool Native_isWaypointActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DD1F58F493F1DA5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isWaypointActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setNewWaypoint(float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE43368D2AA4F2FC);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNewWaypoint call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipBright(int32_t _blip, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB203913733F27884);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipBright call failed" << Log::Endl;
	}
}

EXPORT void Native_setBlipShowCone(int32_t _blip, bool _toggle, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13127EC3665E8EE1);
	ctx->Reset();
	ctx->Push(_blip);
	ctx->Push(_toggle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlipShowCone call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC594B315EDF2D4AF(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC594B315EDF2D4AF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC594B315EDF2D4AF call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF83D0FEBE75E62C9(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF83D0FEBE75E62C9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF83D0FEBE75E62C9 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x35A3CD97B2C0A6D2(int32_t _blip) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35A3CD97B2C0A6D2);
	ctx->Reset();
	ctx->Push(_blip);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x35A3CD97B2C0A6D2 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8410C5E0CD847B9D() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8410C5E0CD847B9D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8410C5E0CD847B9D call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_setMinimapComponent(int32_t _componentId, bool _toggle, int32_t _overrideColor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75A9A10948D1DEA6);
	ctx->Reset();
	ctx->Push(_componentId);
	ctx->Push(_toggle);
	ctx->Push(_overrideColor);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMinimapComponent call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setMinimapSonarEnabled(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B50FC8749632EC1);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMinimapSonarEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native_showSigninUi() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60E892BA4F5BDCA4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native showSigninUi call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getMainPlayerBlipId() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCD4EC3F419D02FA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMainPlayerBlipId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x41350B4FC28E3941(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41350B4FC28E3941);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x41350B4FC28E3941 call failed" << Log::Endl;
	}
}

EXPORT void Native_hideLoadingOnFadeThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B0311D3CDC4648F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hideLoadingOnFadeThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setRadarAsInteriorThisFrame(int32_t _interior, float _x, float _y, int32_t _z, int32_t _zoom) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59E727A1C9D3E31A);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_zoom);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRadarAsInteriorThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setInteriorZoomLevelIncreased(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x504DFE62A1692296);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setInteriorZoomLevelIncreased call failed" << Log::Endl;
	}
}

EXPORT void Native_setInteriorZoomLevelDecreased(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EC8ABA5E74B3D7A);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setInteriorZoomLevelDecreased call failed" << Log::Endl;
	}
}

EXPORT void Native_setRadarAsExteriorThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE81B7D2A3DAB2D81);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRadarAsExteriorThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerBlipPositionThisFrame(float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77E2DD177910E1CF);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerBlipPositionThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA17784FCA9548D15(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA17784FCA9548D15);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA17784FCA9548D15 call failed" << Log::Endl;
	}
}

EXPORT bool Native_isMinimapInInterior() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9049FE339D5F6F6F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMinimapInInterior call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_hideMinimapExteriorMapThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FBAE526203990C9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hideMinimapExteriorMapThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_hideMinimapInteriorMapThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20FE7FDFEEAD38C0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hideMinimapInteriorMapThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setToggleMinimapHeistIsland(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E1460624D194A38);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setToggleMinimapHeistIsland call failed" << Log::Endl;
	}
}

EXPORT void Native_dontTiltMinimapThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D14BFDC33B34F55);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dontTiltMinimapThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native__0x55F5A5F07134DE60() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55F5A5F07134DE60);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x55F5A5F07134DE60 call failed" << Log::Endl;
	}
}

EXPORT void Native_setWidescreenFormat(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3B07BA00A83B0F1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWidescreenFormat call failed" << Log::Endl;
	}
}

EXPORT void Native_displayAreaName(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x276B6CE369C33678);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native displayAreaName call failed" << Log::Endl;
	}
}

EXPORT void Native_displayCash(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x96DEC8D5430208B7);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native displayCash call failed" << Log::Endl;
	}
}

EXPORT void Native__0x170F541E1CADD1DE(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x170F541E1CADD1DE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x170F541E1CADD1DE call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerCashChange(int32_t _cash, int32_t _bank) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0772DF77852C2E30);
	ctx->Reset();
	ctx->Push(_cash);
	ctx->Push(_bank);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerCashChange call failed" << Log::Endl;
	}
}

EXPORT void Native_displayAmmoThisFrame(bool _display) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5E78BA2B1331C55);
	ctx->Reset();
	ctx->Push(_display);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native displayAmmoThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_displaySniperScopeThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73115226F4814E62);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native displaySniperScopeThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_hideHudAndRadarThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x719FF505F097FD20);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hideHudAndRadarThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE67C6DFD386EA5E7(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE67C6DFD386EA5E7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE67C6DFD386EA5E7 call failed" << Log::Endl;
	}
}

EXPORT void Native_setMultiplayerWalletCash() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2D15BEF167E27BC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMultiplayerWalletCash call failed" << Log::Endl;
	}
}

EXPORT void Native_removeMultiplayerWalletCash() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95CF81BD06EE1887);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeMultiplayerWalletCash call failed" << Log::Endl;
	}
}

EXPORT void Native_setMultiplayerBankCash() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD21B55DF695CD0A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMultiplayerBankCash call failed" << Log::Endl;
	}
}

EXPORT void Native_removeMultiplayerBankCash() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7C6789AA1CFEDD0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeMultiplayerBankCash call failed" << Log::Endl;
	}
}

EXPORT void Native_setMultiplayerHudCash(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD1D220394BCB824);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMultiplayerHudCash call failed" << Log::Endl;
	}
}

EXPORT void Native_removeMultiplayerHudCash() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x968F270E39141ECA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeMultiplayerHudCash call failed" << Log::Endl;
	}
}

EXPORT void Native_hideHelpTextThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD46923FC481CA285);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hideHelpTextThisFrame call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x801879A9B4F4B2FB() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x801879A9B4F4B2FB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x801879A9B4F4B2FB call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_displayHelpTextThisFrame(const char* _message, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x960C9FF8F616E41C);
	ctx->Reset();
	ctx->Push(_message);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native displayHelpTextThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_hudForceWeaponWheel(bool _show) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB354E5376BC81A7);
	ctx->Reset();
	ctx->Push(_show);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hudForceWeaponWheel call failed" << Log::Endl;
	}
}

EXPORT void Native_hudDisplayLoadingScreenTips() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x488043841BBE156F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hudDisplayLoadingScreenTips call failed" << Log::Endl;
	}
}

EXPORT void Native_blockWeaponWheelThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AFC4AF510774B47);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native blockWeaponWheelThisFrame call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_hudWeaponWheelGetSelectedHash() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA48931185F0536FE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hudWeaponWheelGetSelectedHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_hudSetWeaponWheelTopSlot(int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72C1056D678BB7D8);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hudSetWeaponWheelTopSlot call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_hudWeaponWheelGetSlotHash(int32_t _weaponTypeIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA13E93403F26C812);
	ctx->Reset();
	ctx->Push(_weaponTypeIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hudWeaponWheelGetSlotHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_hudWeaponWheelIgnoreControlInput(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14C9FDCC41F81F63);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hudWeaponWheelIgnoreControlInput call failed" << Log::Endl;
	}
}

EXPORT void Native_setGpsFlags(int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B440763A4C8D15B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGpsFlags call failed" << Log::Endl;
	}
}

EXPORT void Native_clearGpsFlags() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21986729D6A3A830);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearGpsFlags call failed" << Log::Endl;
	}
}

EXPORT void Native_setRaceTrackRender(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1EAC5F91BCBC5073);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRaceTrackRender call failed" << Log::Endl;
	}
}

EXPORT void Native_clearGpsRaceTrack() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7AA5B4CE533C858B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearGpsRaceTrack call failed" << Log::Endl;
	}
}

EXPORT void Native_startGpsCustomRoute(int32_t _hudColor, bool _displayOnFoot, bool _followPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB34E8D56FC13B08);
	ctx->Reset();
	ctx->Push(_hudColor);
	ctx->Push(_displayOnFoot);
	ctx->Push(_followPlayer);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startGpsCustomRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_addPointToGpsCustomRoute(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x311438A071DD9B1A);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addPointToGpsCustomRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_setGpsCustomRouteRender(bool _toggle, int32_t _radarThickness, int32_t _mapThickness) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x900086F371220B6F);
	ctx->Reset();
	ctx->Push(_toggle);
	ctx->Push(_radarThickness);
	ctx->Push(_mapThickness);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGpsCustomRouteRender call failed" << Log::Endl;
	}
}

EXPORT void Native_clearGpsCustomRoute() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6DE0561D9232A64);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearGpsCustomRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_startGpsMultiRoute(int32_t _hudColor, bool _routeFromPlayer, bool _displayOnFoot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D3D15AF7BCAAF83);
	ctx->Reset();
	ctx->Push(_hudColor);
	ctx->Push(_routeFromPlayer);
	ctx->Push(_displayOnFoot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startGpsMultiRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_addPointToGpsMultiRoute(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA905192A6781C41B);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addPointToGpsMultiRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_setGpsMultiRouteRender(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DDA37128DD1ACA8);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGpsMultiRouteRender call failed" << Log::Endl;
	}
}

EXPORT void Native_clearGpsMultiRoute() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67EEDEA1B9BAFD94);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearGpsMultiRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_clearGpsPlayerWaypoint() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF4FB7C8CDFA3DA7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearGpsPlayerWaypoint call failed" << Log::Endl;
	}
}

EXPORT void Native_setGpsFlashes(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x320D0E0D936A0E9B);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGpsFlashes call failed" << Log::Endl;
	}
}

EXPORT void Native_setMainPlayerBlipColour(int32_t _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B21E0BB01E8224A);
	ctx->Reset();
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMainPlayerBlipColour call failed" << Log::Endl;
	}
}

EXPORT void Native_flashMinimapDisplay() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2DD778C22B15BDA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native flashMinimapDisplay call failed" << Log::Endl;
	}
}

EXPORT void Native_flashMinimapDisplayWithColor(int32_t _hudColorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B1DE27EE78E6A19);
	ctx->Reset();
	ctx->Push(_hudColorIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native flashMinimapDisplayWithColor call failed" << Log::Endl;
	}
}

EXPORT void Native_toggleStealthRadar(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6AFDFB93754950C7);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native toggleStealthRadar call failed" << Log::Endl;
	}
}

EXPORT void Native_setMinimapInSpectatorMode(bool _toggle, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A5CD7752DD28CD3);
	ctx->Reset();
	ctx->Push(_toggle);
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMinimapInSpectatorMode call failed" << Log::Endl;
	}
}

EXPORT void Native_setMissionName(bool _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F28ECF5FC84772F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMissionName call failed" << Log::Endl;
	}
}

EXPORT void Native_setMissionName2(bool _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE45087D85F468BC2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMissionName2 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x817B86108EB94E51(bool _p0, int32_t& _p1, int32_t& _p2, int32_t& _p3, int32_t& _p4, int32_t& _p5, int32_t& _p6, int32_t& _p7, int32_t& _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x817B86108EB94E51);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x817B86108EB94E51 call failed" << Log::Endl;
	}
}

EXPORT void Native_setMinimapBlockWaypoint(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58FADDED207897DC);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMinimapBlockWaypoint call failed" << Log::Endl;
	}
}

EXPORT void Native_setMinimapInPrologue(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9133955F1A2DA957);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMinimapInPrologue call failed" << Log::Endl;
	}
}

EXPORT void Native_setMinimapHideFow(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8DEE0A5600CBB93);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMinimapHideFow call failed" << Log::Endl;
	}
}

EXPORT float Native_getMinimapFowDiscoveryRatio() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0130B41D3CF4574);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMinimapFowDiscoveryRatio call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT bool Native_getMinimapFowCoordinateIsRevealed(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E31B91145873922);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMinimapFowCoordinateIsRevealed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x62E849B7EB28E770(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62E849B7EB28E770);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x62E849B7EB28E770 call failed" << Log::Endl;
	}
}

EXPORT void Native_setMinimapFowRevealCoordinate(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0923DBF87DFF735E);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMinimapFowRevealCoordinate call failed" << Log::Endl;
	}
}

EXPORT void Native_setMinimapGolfCourse(int32_t _hole) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71BDB63DBAF8DA59);
	ctx->Reset();
	ctx->Push(_hole);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMinimapGolfCourse call failed" << Log::Endl;
	}
}

EXPORT void Native_setMinimapGolfCourseOff() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35EDD5B2E3FF01C0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMinimapGolfCourseOff call failed" << Log::Endl;
	}
}

EXPORT void Native_lockMinimapAngle(int32_t _angle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x299FAEBB108AE05B);
	ctx->Reset();
	ctx->Push(_angle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native lockMinimapAngle call failed" << Log::Endl;
	}
}

EXPORT void Native_unlockMinimapAngle() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8183455E16C42E3A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native unlockMinimapAngle call failed" << Log::Endl;
	}
}

EXPORT void Native_lockMinimapPosition(float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1279E861A329E73F);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native lockMinimapPosition call failed" << Log::Endl;
	}
}

EXPORT void Native_unlockMinimapPosition() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E93E06DB8EF1F30);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native unlockMinimapPosition call failed" << Log::Endl;
	}
}

EXPORT void Native_setMinimapAltitudeIndicatorLevel(float _altitude, bool _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD201F3FF917A506D);
	ctx->Reset();
	ctx->Push(_altitude);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMinimapAltitudeIndicatorLevel call failed" << Log::Endl;
	}
}

EXPORT void Native_setHealthHudDisplayValues(int32_t _health, int32_t _capacity, bool _wasAdded) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F5CC444DCAAA8F2);
	ctx->Reset();
	ctx->Push(_health);
	ctx->Push(_capacity);
	ctx->Push(_wasAdded);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHealthHudDisplayValues call failed" << Log::Endl;
	}
}

EXPORT void Native_setMaxHealthHudDisplay(int32_t _maximumValue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x975D66A0BC17064C);
	ctx->Reset();
	ctx->Push(_maximumValue);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMaxHealthHudDisplay call failed" << Log::Endl;
	}
}

EXPORT void Native_setMaxArmourHudDisplay(int32_t _maximumValue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06A320535F5F0248);
	ctx->Reset();
	ctx->Push(_maximumValue);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMaxArmourHudDisplay call failed" << Log::Endl;
	}
}

EXPORT void Native_setBigmapActive(bool _toggleBigMap, bool _showFullMap) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x231C8F89D0539D8F);
	ctx->Reset();
	ctx->Push(_toggleBigMap);
	ctx->Push(_showFullMap);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBigmapActive call failed" << Log::Endl;
	}
}

EXPORT bool Native_isHudComponentActive(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC4C9EA5391ECC0D);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isHudComponentActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isScriptedHudComponentActive(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD100EB17A94FF65);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScriptedHudComponentActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_hideScriptedHudComponentThisFrame(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE374C498D8BADC14);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hideScriptedHudComponentThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_showScriptedHudComponentThisFrame(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F38DCA127DAAEA2);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native showScriptedHudComponentThisFrame call failed" << Log::Endl;
	}
}

EXPORT bool Native_isScriptedHudComponentHiddenThisFrame(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x09C0403ED9A751C2);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScriptedHudComponentHiddenThisFrame call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_hideHudComponentThisFrame(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6806C51AD12B83B8);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hideHudComponentThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_showHudComponentThisFrame(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B4DF1FA60C0E664);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native showHudComponentThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_hideAreaAndVehicleNameThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4DEDE28B1814289);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hideAreaAndVehicleNameThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_resetReticuleValues() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12782CE0A636E9F0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetReticuleValues call failed" << Log::Endl;
	}
}

EXPORT void Native_resetHudComponentValues(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x450930E616475D0D);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetHudComponentValues call failed" << Log::Endl;
	}
}

EXPORT void Native_setHudComponentPosition(int32_t _id, float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAABB1F56E2A17CED);
	ctx->Reset();
	ctx->Push(_id);
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHudComponentPosition call failed" << Log::Endl;
	}
}

EXPORT vector3_t Native_getHudComponentPosition(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x223CA69A8C4417FD);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHudComponentPosition call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT void Native_clearReminderMessage() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB57D8DD645CFA2CF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearReminderMessage call failed" << Log::Endl;
	}
}

EXPORT bool Native_getScreenCoordFromWorldCoord2(float _worldX, float _worldY, float _worldZ, float& _screenX, float& _screenY) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9904D11F1ACBEC3);
	ctx->Reset();
	ctx->Push(_worldX);
	ctx->Push(_worldY);
	ctx->Push(_worldZ);
	ctx->Push(_screenX);
	ctx->Push(_screenY);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getScreenCoordFromWorldCoord2 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_openReportugcMenu() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x523A590C1A3CC0D3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native openReportugcMenu call failed" << Log::Endl;
	}
}

EXPORT void Native_forceCloseReportugcMenu() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE4C0E6DBC6F2C6F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceCloseReportugcMenu call failed" << Log::Endl;
	}
}

EXPORT bool Native_isReportugcMenuOpen() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9135584D09A3437E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isReportugcMenuOpen call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isFloatingHelpTextOnScreen(int32_t _hudIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2432784ACA090DA4);
	ctx->Reset();
	ctx->Push(_hudIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isFloatingHelpTextOnScreen call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setFloatingHelpTextScreenPosition(int32_t _hudIndex, float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7679CC1BCEBE3D4C);
	ctx->Reset();
	ctx->Push(_hudIndex);
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFloatingHelpTextScreenPosition call failed" << Log::Endl;
	}
}

EXPORT void Native_setFloatingHelpTextWorldPosition(int32_t _hudIndex, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x784BA7E0ECEB4178);
	ctx->Reset();
	ctx->Push(_hudIndex);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFloatingHelpTextWorldPosition call failed" << Log::Endl;
	}
}

EXPORT void Native_setFloatingHelpTextToEntity(int32_t _hudIndex, int32_t _entity, float _offsetX, float _offsetY) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB094BC1DB4018240);
	ctx->Reset();
	ctx->Push(_hudIndex);
	ctx->Push(_entity);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFloatingHelpTextToEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_setFloatingHelpTextStyle(int32_t _hudIndex, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x788E7FD431BD67F1);
	ctx->Reset();
	ctx->Push(_hudIndex);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFloatingHelpTextStyle call failed" << Log::Endl;
	}
}

EXPORT void Native_clearFloatingHelp(int32_t _hudIndex, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50085246ABD3FEFA);
	ctx->Reset();
	ctx->Push(_hudIndex);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearFloatingHelp call failed" << Log::Endl;
	}
}

EXPORT void Native_createMpGamerTagWithCrewColor(int32_t _player, const char* _username, bool _pointedClanTag, bool _isRockstarClan, const char* _clanTag, int32_t _clanFlag, int32_t _r, int32_t _g, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6DD05E9D83EFA4C9);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_username);
	ctx->Push(_pointedClanTag);
	ctx->Push(_isRockstarClan);
	ctx->Push(_clanTag);
	ctx->Push(_clanFlag);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createMpGamerTagWithCrewColor call failed" << Log::Endl;
	}
}

EXPORT bool Native_isMpGamerTagMovieActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E0EB3EB47C8D7AA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMpGamerTagMovieActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_createFakeMpGamerTag(int32_t _ped, const char* _username, bool _pointedClanTag, bool _isRockstarClan, const char* _clanTag, int32_t _clanFlag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFEFE3321A3F5015);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_username);
	ctx->Push(_pointedClanTag);
	ctx->Push(_isRockstarClan);
	ctx->Push(_clanTag);
	ctx->Push(_clanFlag);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createFakeMpGamerTag call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_removeMpGamerTag(int32_t _gamerTagId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31698AA80E0223F8);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeMpGamerTag call failed" << Log::Endl;
	}
}

EXPORT bool Native_isMpGamerTagActive(int32_t _gamerTagId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E929E7A5796FD26);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMpGamerTagActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isMpGamerTagFree(int32_t _gamerTagId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x595B5178E412E199);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMpGamerTagFree call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setMpGamerTagVisibility(int32_t _gamerTagId, int32_t _component, bool _toggle, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63BB75ABEDC1F6A0);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_component);
	ctx->Push(_toggle);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMpGamerTagVisibility call failed" << Log::Endl;
	}
}

EXPORT void Native_setMpGamerTagEnabled(int32_t _gamerTagId, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE76FF7E6A0166B0);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMpGamerTagEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native_setMpGamerTagIcons(int32_t _gamerTagId, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA67F9C46D612B6F1);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMpGamerTagIcons call failed" << Log::Endl;
	}
}

EXPORT void Native_setMpGamerHealthBarDisplay(int32_t _gamerTagId, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD29EC58C2F6B5014);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMpGamerHealthBarDisplay call failed" << Log::Endl;
	}
}

EXPORT void Native_setMpGamerHealthBarMax(int32_t _gamerTagId, int32_t _value, int32_t _maximumValue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1563FE35E9928E67);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_value);
	ctx->Push(_maximumValue);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMpGamerHealthBarMax call failed" << Log::Endl;
	}
}

EXPORT void Native_setMpGamerTagColour(int32_t _gamerTagId, int32_t _component, int32_t _hudColorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x613ED644950626AE);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_component);
	ctx->Push(_hudColorIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMpGamerTagColour call failed" << Log::Endl;
	}
}

EXPORT void Native_setMpGamerTagHealthBarColour(int32_t _gamerTagId, int32_t _hudColorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3158C77A7E888AB4);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_hudColorIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMpGamerTagHealthBarColour call failed" << Log::Endl;
	}
}

EXPORT void Native_setMpGamerTagAlpha(int32_t _gamerTagId, int32_t _component, int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD48FE545CD46F857);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_component);
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMpGamerTagAlpha call failed" << Log::Endl;
	}
}

EXPORT void Native_setMpGamerTagWantedLevel(int32_t _gamerTagId, int32_t _wantedlvl) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF228E2AA03099C3);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_wantedlvl);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMpGamerTagWantedLevel call failed" << Log::Endl;
	}
}

EXPORT void Native_setMpGamerTagUnk(int32_t _gamerTagId, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C16459B2324B2CF);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMpGamerTagUnk call failed" << Log::Endl;
	}
}

EXPORT void Native_setMpGamerTagName(int32_t _gamerTagId, const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEA2B8283BAA3944);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_string);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMpGamerTagName call failed" << Log::Endl;
	}
}

EXPORT bool Native_isValidMpGamerTagMovie(int32_t _gamerTagId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB709A36958ABE0D);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isValidMpGamerTagMovie call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setMpGamerTagBigText(int32_t _gamerTagId, const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B7723747CCB55B6);
	ctx->Reset();
	ctx->Push(_gamerTagId);
	ctx->Push(_string);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMpGamerTagBigText call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getCurrentWebpageId() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01A358D9128B7A86);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCurrentWebpageId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getCurrentWebsiteId() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97D47996FC48CBAD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCurrentWebsiteId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getGlobalActionscriptFlag(int32_t _flagIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3B05614DCE1D014);
	ctx->Reset();
	ctx->Push(_flagIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getGlobalActionscriptFlag call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_resetGlobalActionscriptFlag(int32_t _flagIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB99C4E4D9499DF29);
	ctx->Reset();
	ctx->Push(_flagIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetGlobalActionscriptFlag call failed" << Log::Endl;
	}
}

EXPORT bool Native_isWarningMessageActive2() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF42195A42C63BBA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isWarningMessageActive2 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setWarningMessage(const char* _titleMsg, int32_t _flags, const char* _promptMsg, bool _p3, int32_t _p4, const char* _p5, const char* _p6, bool _showBackground, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B1776B3B53F8D74);
	ctx->Reset();
	ctx->Push(_titleMsg);
	ctx->Push(_flags);
	ctx->Push(_promptMsg);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_showBackground);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWarningMessage call failed" << Log::Endl;
	}
}

EXPORT void Native_setWarningMessageWithHeader(const char* _entryHeader, const char* _entryLine1, int32_t _instructionalKey, const char* _entryLine2, bool _p4, int32_t _p5, int32_t& _showBackground, int32_t& _p7, bool _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC38CC1E35B6A5D7);
	ctx->Reset();
	ctx->Push(_entryHeader);
	ctx->Push(_entryLine1);
	ctx->Push(_instructionalKey);
	ctx->Push(_entryLine2);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_showBackground);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWarningMessageWithHeader call failed" << Log::Endl;
	}
}

EXPORT void Native_setWarningMessageWithHeaderAndSubstringFlags(const char* _entryHeader, const char* _entryLine1, int32_t _instructionalKey, const char* _entryLine2, bool _p4, int32_t _p5, int32_t _additionalIntInfo, const char* _additionalTextInfoLine1, const char* _additionalTextInfoLine2, bool _showBackground, int32_t _errorCode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x701919482C74B5AB);
	ctx->Reset();
	ctx->Push(_entryHeader);
	ctx->Push(_entryLine1);
	ctx->Push(_instructionalKey);
	ctx->Push(_entryLine2);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_additionalIntInfo);
	ctx->Push(_additionalTextInfoLine1);
	ctx->Push(_additionalTextInfoLine2);
	ctx->Push(_showBackground);
	ctx->Push(_errorCode);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWarningMessageWithHeaderAndSubstringFlags call failed" << Log::Endl;
	}
}

EXPORT void Native_setWarningMessageWithHeaderUnk(const char* _entryHeader, const char* _entryLine1, int32_t _flags, const char* _entryLine2, bool _p4, int32_t _p5, int32_t& _p6, int32_t& _p7, bool _showBg, int32_t _p9, int32_t _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38B55259C2E078ED);
	ctx->Reset();
	ctx->Push(_entryHeader);
	ctx->Push(_entryLine1);
	ctx->Push(_flags);
	ctx->Push(_entryLine2);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_showBg);
	ctx->Push(_p9);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWarningMessageWithHeaderUnk call failed" << Log::Endl;
	}
}

EXPORT void Native_setWarningMessageWithAlert(const char* _labelTitle, const char* _labelMessage, int32_t _p2, int32_t _p3, const char* _labelMessage2, bool _p5, int32_t _p6, int32_t _p7, const char* _p8, const char* _p9, bool _background, int32_t _errorCode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15803FEC3B9A872B);
	ctx->Reset();
	ctx->Push(_labelTitle);
	ctx->Push(_labelMessage);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_labelMessage2);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_background);
	ctx->Push(_errorCode);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWarningMessageWithAlert call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getWarningMessageTitleHash() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81DF9ABA6C83DFF9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWarningMessageTitleHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_setWarningMessageListRow(int32_t _index, const char* _name, int32_t _cash, int32_t _rp, int32_t _lvl, int32_t _colour) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C5A80A9E096D529);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_name);
	ctx->Push(_cash);
	ctx->Push(_rp);
	ctx->Push(_lvl);
	ctx->Push(_colour);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWarningMessageListRow call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xDAF87174BE7454FF(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDAF87174BE7454FF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDAF87174BE7454FF call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeWarningMessageListItems() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6EF54AB721DC6242);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeWarningMessageListItems call failed" << Log::Endl;
	}
}

EXPORT bool Native_isWarningMessageActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE18B138FABC53103);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isWarningMessageActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_clearDynamicPauseMenuErrorMessage() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7792424AA0EAC32E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearDynamicPauseMenuErrorMessage call failed" << Log::Endl;
	}
}

EXPORT void Native_raceGalleryFullscreen(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5354C5BA2EA868A4);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native raceGalleryFullscreen call failed" << Log::Endl;
	}
}

EXPORT void Native_raceGalleryNextBlipSprite(int32_t _spriteId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1EAE6DD17B7A5EFA);
	ctx->Reset();
	ctx->Push(_spriteId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native raceGalleryNextBlipSprite call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_raceGalleryAddBlip(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x551DF99658DB6EE8);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native raceGalleryAddBlip call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_clearRaceGalleryBlips() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2708FC083123F9FF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearRaceGalleryBlips call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_forceSonarBlipsThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1121BFA1A1A522A8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceSonarBlipsThisFrame call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNorthRadarBlip() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F0CF9CB7E589B88);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNorthRadarBlip call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_displayPlayerNameTagsOnBlips(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82CEDC33687E1F50);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native displayPlayerNameTagsOnBlips call failed" << Log::Endl;
	}
}

EXPORT void Native__0x211C4EF450086857() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x211C4EF450086857);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x211C4EF450086857 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBF4F34A85CA2970C() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF4F34A85CA2970C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBF4F34A85CA2970C call failed" << Log::Endl;
	}
}

EXPORT void Native_activateFrontendMenu(int32_t _menuhash, bool _togglePause, int32_t _component) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF01D36B9C9D0C7B);
	ctx->Reset();
	ctx->Push(_menuhash);
	ctx->Push(_togglePause);
	ctx->Push(_component);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native activateFrontendMenu call failed" << Log::Endl;
	}
}

EXPORT void Native_restartFrontendMenu(int32_t _menuHash, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10706DC6AD2D49C0);
	ctx->Reset();
	ctx->Push(_menuHash);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native restartFrontendMenu call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getCurrentFrontendMenuVersion() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2309595AD6145265);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCurrentFrontendMenuVersion call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPauseMenuActive(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF47FC56C71569CF);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPauseMenuActive call failed" << Log::Endl;
	}
}

EXPORT void Native_disableFrontendThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D3465A73092F0E6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableFrontendThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_suppressFrontendRenderingThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA751764F0821256);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native suppressFrontendRenderingThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_allowPauseMenuWhenDeadThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC3FDDED67BCFC63);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native allowPauseMenuWhenDeadThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setFrontendActive(bool _active) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x745711A75AB09277);
	ctx->Reset();
	ctx->Push(_active);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFrontendActive call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPauseMenuActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB0034A223497FFCB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPauseMenuActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x2F057596F2BD0061() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F057596F2BD0061);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2F057596F2BD0061 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getPauseMenuState() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x272ACD84970869C5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPauseMenuState call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT vector3_t Native__0x5BFF36D6ED83E0AE() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BFF36D6ED83E0AE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5BFF36D6ED83E0AE call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT bool Native_isPauseMenuRestarting() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C491717107431C7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPauseMenuRestarting call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_logDebugInfo(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2162C446DFDF38FD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native logDebugInfo call failed" << Log::Endl;
	}
}

EXPORT void Native__0x77F16B447824DA6C(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77F16B447824DA6C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x77F16B447824DA6C call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCDCA26E80FAECB8F() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCDCA26E80FAECB8F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCDCA26E80FAECB8F call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2DE6C5E2E996F178(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DE6C5E2E996F178);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2DE6C5E2E996F178 call failed" << Log::Endl;
	}
}

EXPORT void Native_pauseMenuActivateContext(int32_t _contextHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD564BDD0472C936);
	ctx->Reset();
	ctx->Push(_contextHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pauseMenuActivateContext call failed" << Log::Endl;
	}
}

EXPORT void Native_pauseMenuDeactivateContext(int32_t _contextHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x444D8CF241EC25C5);
	ctx->Reset();
	ctx->Push(_contextHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pauseMenuDeactivateContext call failed" << Log::Endl;
	}
}

EXPORT bool Native_pauseMenuIsContextActive(int32_t _contextHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84698AB38D0C6636);
	ctx->Reset();
	ctx->Push(_contextHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pauseMenuIsContextActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_pauseMenuIsContextMenuActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A25ADC48F87841F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pauseMenuIsContextMenuActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xDE03620F8703A9DF() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE03620F8703A9DF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDE03620F8703A9DF call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x359AF31A4B52F5ED() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x359AF31A4B52F5ED);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x359AF31A4B52F5ED call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x13C4B962653A5280() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13C4B962653A5280);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x13C4B962653A5280 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0xC8E1071177A23BE5(int32_t& _p0, int32_t& _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8E1071177A23BE5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC8E1071177A23BE5 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x4895BDEA16E7C080(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4895BDEA16E7C080);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4895BDEA16E7C080 call failed" << Log::Endl;
	}
}

EXPORT void Native_pauseMenuSetBusySpinner(bool _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC78E239AC5B2DDB9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pauseMenuSetBusySpinner call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF06EBB91A81E09E3(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF06EBB91A81E09E3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF06EBB91A81E09E3 call failed" << Log::Endl;
	}
}

EXPORT bool Native_isFrontendReadyForControl() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BAB9A4E4F2FF5C7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isFrontendReadyForControl call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_takeControlOfFrontend() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC9264727EEC0F28);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native takeControlOfFrontend call failed" << Log::Endl;
	}
}

EXPORT void Native_releaseControlOfFrontend() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14621BB1DF14E2B2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native releaseControlOfFrontend call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x66E7CB63C97B7D20() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66E7CB63C97B7D20);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x66E7CB63C97B7D20 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x593FEAE1F73392D4() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x593FEAE1F73392D4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x593FEAE1F73392D4 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isNavigatingMenuContent() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E3CD0EF8A489541);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isNavigatingMenuContent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xF284AC67940C6812() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF284AC67940C6812);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF284AC67940C6812 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x2E22FEFA0100275E() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E22FEFA0100275E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2E22FEFA0100275E call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x0CF54F20DE43879C(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CF54F20DE43879C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0CF54F20DE43879C call failed" << Log::Endl;
	}
}

EXPORT void Native_getPauseMenuSelection(int32_t& _lastItemMenuId, int32_t& _selectedItemUniqueId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36C1451A88A09630);
	ctx->Reset();
	ctx->Push(_lastItemMenuId);
	ctx->Push(_selectedItemUniqueId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPauseMenuSelection call failed" << Log::Endl;
	}
}

EXPORT void Native_getPauseMenuSelectionData(int32_t& _lastItemMenuId, int32_t& _selectedItemMenuId, int32_t& _selectedItemUniqueId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E17BE53E1AAABAF);
	ctx->Reset();
	ctx->Push(_lastItemMenuId);
	ctx->Push(_selectedItemMenuId);
	ctx->Push(_selectedItemUniqueId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPauseMenuSelectionData call failed" << Log::Endl;
	}
}

EXPORT bool Native__0xA238192F33110615(int32_t& _p0, int32_t& _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA238192F33110615);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA238192F33110615 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getMenuPedIntStat(int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF4CED81CEBEDC6D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMenuPedIntStat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xCA6B2F7CE32AB653(int32_t _p0, int32_t& _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA6B2F7CE32AB653);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCA6B2F7CE32AB653 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getMenuPedMaskedIntStat(int32_t _p0, int32_t& _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90A6526CF0381030);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMenuPedMaskedIntStat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x24A49BEAF468DC90(int32_t _p0, int32_t& _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24A49BEAF468DC90);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x24A49BEAF468DC90 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getMenuPedFloatStat(int32_t _p0, float& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FBD7095FE7AE57F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMenuPedFloatStat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x8F08017F9D7C47BD(int32_t _p0, int32_t& _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F08017F9D7C47BD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8F08017F9D7C47BD call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getMenuPedBoolStat(int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x052991E59076E4E4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMenuPedBoolStat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_clearPedInPauseMenu() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E62BE5DC58E9E06);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedInPauseMenu call failed" << Log::Endl;
	}
}

EXPORT void Native_givePedToPauseMenu(int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC0BFBDC3BE00E14);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native givePedToPauseMenu call failed" << Log::Endl;
	}
}

EXPORT void Native_setPauseMenuPedLighting(bool _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3CA6050692BC61B0);
	ctx->Reset();
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPauseMenuPedLighting call failed" << Log::Endl;
	}
}

EXPORT void Native_setPauseMenuPedSleepState(bool _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xECF128344E9FF9F1);
	ctx->Reset();
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPauseMenuPedSleepState call failed" << Log::Endl;
	}
}

EXPORT void Native_openOnlinePoliciesMenu() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x805D7CBB36FD6C4C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native openOnlinePoliciesMenu call failed" << Log::Endl;
	}
}

EXPORT bool Native__0xF13FE2A80C05C561() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF13FE2A80C05C561);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF13FE2A80C05C561 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isOnlinePoliciesMenuActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F72CD94F7B5B68C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isOnlinePoliciesMenuActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_openSocialClubMenu() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75D3691713C3B05A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native openSocialClubMenu call failed" << Log::Endl;
	}
}

EXPORT void Native_closeSocialClubMenu() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2B32BE3FC1626C6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native closeSocialClubMenu call failed" << Log::Endl;
	}
}

EXPORT void Native_setSocialClubTour(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E778248D6685FE0);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSocialClubTour call failed" << Log::Endl;
	}
}

EXPORT bool Native_isSocialClubActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC406BE343FC4B9AF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSocialClubActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x1185A8087587322C(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1185A8087587322C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1185A8087587322C call failed" << Log::Endl;
	}
}

EXPORT void Native_forceCloseTextInputBox() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8817605C2BA76200);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceCloseTextInputBox call failed" << Log::Endl;
	}
}

EXPORT void Native__0x577599CCED639CA2(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x577599CCED639CA2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x577599CCED639CA2 call failed" << Log::Endl;
	}
}

EXPORT void Native_overrideMultiplayerChatPrefix(int32_t _gxtEntryHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A1738B4323FE2D9);
	ctx->Reset();
	ctx->Push(_gxtEntryHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native overrideMultiplayerChatPrefix call failed" << Log::Endl;
	}
}

EXPORT bool Native_isMultiplayerChatActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB118AF58B5F332A1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMultiplayerChatActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_closeMultiplayerChat() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1AC8F4AD40E22127);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native closeMultiplayerChat call failed" << Log::Endl;
	}
}

EXPORT void Native__0x7C226D5346D4D10A(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C226D5346D4D10A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7C226D5346D4D10A call failed" << Log::Endl;
	}
}

EXPORT void Native_overrideMultiplayerChatColour(int32_t _p0, int32_t _hudColor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF47E567B3630DD12);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_hudColor);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native overrideMultiplayerChatColour call failed" << Log::Endl;
	}
}

EXPORT void Native_setTextChatUnk(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DB21A44B09E8BA3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTextChatUnk call failed" << Log::Endl;
	}
}

EXPORT void Native_flagPlayerContextInTournament(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEF214315D276FD1);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native flagPlayerContextInTournament call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedHasAiBlip(int32_t _ped, bool _hasCone) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD30C50DF888D58B5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_hasCone);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedHasAiBlip call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedHasAiBlipWithColor(int32_t _ped, bool _hasCone, int32_t _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB13DCB4C6FAAD238);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_hasCone);
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedHasAiBlipWithColor call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesPedHaveAiBlip(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15B8ECF844EE67ED);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesPedHaveAiBlip call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedAiBlipGangId(int32_t _ped, int32_t _gangId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE52B8E7F85D39A08);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_gangId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAiBlipGangId call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedAiBlipHasCone(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3EED80DFF7325CAA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAiBlipHasCone call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedAiBlipForcedOn(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C4BBF625CA98C4E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAiBlipForcedOn call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedAiBlipNoticeRange(int32_t _ped, float _range) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97C65887D4B37FA9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_range);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAiBlipNoticeRange call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedAiBlipSprite(int32_t _ped, int32_t _spriteId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCFACD0DB9D7A57D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_spriteId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAiBlipSprite call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getAiBlip2(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7CD934010E115C2C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getAiBlip2 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getAiBlip(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56176892826A4FE8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getAiBlip call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_hasDirectorModeBeenTriggered() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA277800A9EAE340E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasDirectorModeBeenTriggered call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setDirectorModeClearTriggeredFlag() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2632482FD6B9AB87);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDirectorModeClearTriggeredFlag call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerIsInDirectorMode(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x808519373FD336A3);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerIsInDirectorMode call failed" << Log::Endl;
	}
}

EXPORT void Native__0x04655F9D075D0AE5(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04655F9D075D0AE5);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x04655F9D075D0AE5 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x243296A510B562B6() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x243296A510B562B6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x243296A510B562B6 call failed" << Log::Endl;
	}
}

EXPORT float Native_getInteriorHeading(int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF49B58631D9E22D9);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getInteriorHeading call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_getInteriorInfo(int32_t _interior, vector3_t& _position, int32_t& _nameHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x252BDC06B73FA6EA);
	ctx->Reset();
	ctx->Push(_interior);
	alt::INative::Vector3 converted_position { _position.x, 0, _position.y, 0, _position.z };
	ctx->Push(&converted_position);
	ctx->Push(_nameHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getInteriorInfo call failed" << Log::Endl;
	}
	_position.x = converted_position.x;
	_position.y = converted_position.y;
	_position.z = converted_position.z;
}

EXPORT int32_t Native_getInteriorGroupId(int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4A84ABF135EF91A);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getInteriorGroupId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT vector3_t Native_getOffsetFromInteriorInWorldCoords(int32_t _interior, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E3B3E6D66F6E22F);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getOffsetFromInteriorInWorldCoords call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT bool Native_isInteriorScene() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC72B5D7A1CBD54D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isInteriorScene call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isValidInterior(int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26B0E73D7EAAF4D3);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isValidInterior call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_clearRoomForEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB365FC0C4E27FFA7);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearRoomForEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_forceRoomForEntity(int32_t _entity, int32_t _interior, int32_t _roomHashKey) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52923C4710DD9907);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_interior);
	ctx->Push(_roomHashKey);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceRoomForEntity call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getRoomKeyFromEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47C2A06D4F5F424B);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRoomKeyFromEntity call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getKeyForEntityInRoom(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x399685DB942336BC);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getKeyForEntityInRoom call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getInteriorFromEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2107BA504071A6BB);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getInteriorFromEntity call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x82EBB79E258FA2B7(int32_t _entity, int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82EBB79E258FA2B7);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x82EBB79E258FA2B7 call failed" << Log::Endl;
	}
}

EXPORT void Native_clearInteriorForEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85D5422B2039A70D);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearInteriorForEntity call failed" << Log::Endl;
	}
}

EXPORT void Native__0x38C1CB1CB119A016(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38C1CB1CB119A016);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x38C1CB1CB119A016 call failed" << Log::Endl;
	}
}

EXPORT void Native_forceRoomForGameViewport(int32_t _interiorID, int32_t _roomHashKey) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x920D853F3E17F1DA);
	ctx->Reset();
	ctx->Push(_interiorID);
	ctx->Push(_roomHashKey);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceRoomForGameViewport call failed" << Log::Endl;
	}
}

EXPORT void Native__0xAF348AFCB575A441(const char* _roomName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF348AFCB575A441);
	ctx->Reset();
	ctx->Push(_roomName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAF348AFCB575A441 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x405DC2AEF6AF95B9(int32_t _roomHashKey) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x405DC2AEF6AF95B9);
	ctx->Reset();
	ctx->Push(_roomHashKey);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x405DC2AEF6AF95B9 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getRoomKeyForGameViewport() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6575914D2A0B450);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRoomKeyForGameViewport call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_clearRoomForGameViewport() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23B59D8912F94246);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearRoomForGameViewport call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getInteriorFromGameplayCam() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7D267EC6CA966C3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getInteriorFromGameplayCam call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getInteriorAtCoords(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB0F7F8663821D9C3);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getInteriorAtCoords call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_addPickupToInteriorRoomByName(int32_t _pickup, const char* _roomName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F6167F351168730);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push(_roomName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addPickupToInteriorRoomByName call failed" << Log::Endl;
	}
}

EXPORT void Native_pinInteriorInMemory(int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CA429C029CCF247);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pinInteriorInMemory call failed" << Log::Endl;
	}
}

EXPORT void Native_unpinInterior(int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x261CCE7EED010641);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native unpinInterior call failed" << Log::Endl;
	}
}

EXPORT bool Native_isInteriorReady(int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6726BDCCC1932F0E);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isInteriorReady call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x4C2330E61D3DEB56(int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C2330E61D3DEB56);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4C2330E61D3DEB56 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getInteriorAtCoordsWithType(float _x, float _y, float _z, const char* _interiorType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x05B7A89BD78797FC);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_interiorType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getInteriorAtCoordsWithType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getInteriorAtCoordsWithTypehash(float _x, float _y, float _z, int32_t _typeHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0F77ADB9F67E79D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_typeHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getInteriorAtCoordsWithTypehash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x483ACA1176CA93F1() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x483ACA1176CA93F1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x483ACA1176CA93F1 call failed" << Log::Endl;
	}
}

EXPORT bool Native_isCollisionMarkedOutside(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEA5AC2EDA7C33E8);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCollisionMarkedOutside call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getInteriorFromCollision(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC4CF9FCB29A4424);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getInteriorFromCollision call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x7ECDF98587E92DEC(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7ECDF98587E92DEC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7ECDF98587E92DEC call failed" << Log::Endl;
	}
}

EXPORT void Native_activateInteriorEntitySet(int32_t _interior, const char* _entitySetName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55E86AF2712B36A1);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push(_entitySetName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native activateInteriorEntitySet call failed" << Log::Endl;
	}
}

EXPORT void Native_deactivateInteriorEntitySet(int32_t _interior, const char* _entitySetName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x420BD37289EEE162);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push(_entitySetName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native deactivateInteriorEntitySet call failed" << Log::Endl;
	}
}

EXPORT bool Native_isInteriorEntitySetActive(int32_t _interior, const char* _entitySetName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35F7DD45E8C0A16D);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push(_entitySetName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isInteriorEntitySetActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setInteriorEntitySetColor(int32_t _interior, const char* _entitySetName, int32_t _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1F1920BAF281317);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push(_entitySetName);
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setInteriorEntitySetColor call failed" << Log::Endl;
	}
}

EXPORT void Native_refreshInterior(int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41F37C3427C75AE0);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native refreshInterior call failed" << Log::Endl;
	}
}

EXPORT void Native_enableExteriorCullModelThisFrame(int32_t _mapObjectHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA97F257D0151A6AB);
	ctx->Reset();
	ctx->Push(_mapObjectHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableExteriorCullModelThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_enableScriptCullModelThisFrame(int32_t _mapObjectHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50C375537449F369);
	ctx->Reset();
	ctx->Push(_mapObjectHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableScriptCullModelThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_disableInterior(int32_t _interior, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6170941419D7D8EC);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableInterior call failed" << Log::Endl;
	}
}

EXPORT bool Native_isInteriorDisabled(int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC5115A5A939DD15);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isInteriorDisabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_capInterior(int32_t _interior, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9175F941610DB54);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native capInterior call failed" << Log::Endl;
	}
}

EXPORT bool Native_isInteriorCapped(int32_t _interior) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92BAC8ACF88CEC26);
	ctx->Reset();
	ctx->Push(_interior);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isInteriorCapped call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x9E6542F0CE8E70A3(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E6542F0CE8E70A3);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9E6542F0CE8E70A3 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x7241CCB7D020DB69(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7241CCB7D020DB69);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7241CCB7D020DB69 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_createItemset(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35AD299F50D91B24);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createItemset call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_destroyItemset(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE18220B1C183EDA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native destroyItemset call failed" << Log::Endl;
	}
}

EXPORT bool Native_isItemsetValid(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1B1EA596344DFAB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isItemsetValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_addToItemset(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3945201F14637DD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addToItemset call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeFromItemset(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25E68244B0177686);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeFromItemset call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getItemsetSize(int32_t _x) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9127E83ABF7C631);
	ctx->Reset();
	ctx->Push(_x);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getItemsetSize call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getIndexedItemInItemset(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A197E2521EE2BAB);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIndexedItemInItemset call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isInItemset(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D0FC594D1E9C107);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isInItemset call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_cleanItemset(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41BC0D722FC04221);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cleanItemset call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xF2CA003F167E21D2() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2CA003F167E21D2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF2CA003F167E21D2 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_loadingscreenGetLoadFreemode() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF7D17BC6C85264C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native loadingscreenGetLoadFreemode call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_loadingscreenSetLoadFreemode(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB0C56BD3D808D863);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native loadingscreenSetLoadFreemode call failed" << Log::Endl;
	}
}

EXPORT bool Native_loadingscreenGetLoadFreemodeWithEventName() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8AA464D4E0F6ACCD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native loadingscreenGetLoadFreemodeWithEventName call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_loadingscreenSetLoadFreemodeWithEventName(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC309E94546FCDB5);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native loadingscreenSetLoadFreemodeWithEventName call failed" << Log::Endl;
	}
}

EXPORT bool Native_loadingscreenIsLoadingFreemode() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6DC823253FBB366);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native loadingscreenIsLoadingFreemode call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_loadingscreenSetIsLoadingFreemode(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7E7181C09F33B69);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native loadingscreenSetIsLoadingFreemode call failed" << Log::Endl;
	}
}

EXPORT void Native__0xFA1E0E893D915215(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA1E0E893D915215);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFA1E0E893D915215 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_localizationGetSystemLanguage() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x497420E022796B3F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native localizationGetSystemLanguage call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getCurrentLanguage() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2BDD44CC428A7EAE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCurrentLanguage call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_localizationGetSystemDateFormat() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8AE43AEC1A61314);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native localizationGetSystemDateFormat call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getAllocatedStackSize() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B3CA62B1EF19B62);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getAllocatedStackSize call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumberOfFreeStacksOfThisSize(int32_t _stackSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEAD16FC8F9DFC0F);
	ctx->Reset();
	ctx->Push(_stackSize);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumberOfFreeStacksOfThisSize call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setRandomSeed(int32_t _seed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x444D98F98C11F3EC);
	ctx->Reset();
	ctx->Push(_seed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRandomSeed call failed" << Log::Endl;
	}
}

EXPORT void Native_setTimeScale(float _timeScale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D408577D440E81E);
	ctx->Reset();
	ctx->Push(_timeScale);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTimeScale call failed" << Log::Endl;
	}
}

EXPORT void Native_setMissionFlag(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4301E5121A0ED73);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMissionFlag call failed" << Log::Endl;
	}
}

EXPORT bool Native_getMissionFlag() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA33CDCCDA663159E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMissionFlag call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setRandomEventFlag(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x971927086CFD2158);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRandomEventFlag call failed" << Log::Endl;
	}
}

EXPORT bool Native_getRandomEventFlag() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2D57F1D764117B1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRandomEventFlag call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT const char* Native_getGlobalCharBuffer() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24DA7D7667FD7B09);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getGlobalCharBuffer call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT void Native__0x4DCDF92BF64236CD(const char* _p0, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4DCDF92BF64236CD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4DCDF92BF64236CD call failed" << Log::Endl;
	}
}

EXPORT void Native__0x31125FD509D9043F(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31125FD509D9043F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x31125FD509D9043F call failed" << Log::Endl;
	}
}

EXPORT void Native__0xEBD3205A207939ED(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBD3205A207939ED);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEBD3205A207939ED call failed" << Log::Endl;
	}
}

EXPORT void Native__0x97E7E2C04245115B(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97E7E2C04245115B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x97E7E2C04245115B call failed" << Log::Endl;
	}
}

EXPORT void Native__0x916CA67D26FD1E37(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x916CA67D26FD1E37);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x916CA67D26FD1E37 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xEB078CA2B5E82ADD(const char* _p0, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB078CA2B5E82ADD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEB078CA2B5E82ADD call failed" << Log::Endl;
	}
}

EXPORT void Native__0x703CC7F60CBB2B57(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x703CC7F60CBB2B57);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x703CC7F60CBB2B57 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8951EB9C6906D3C8() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8951EB9C6906D3C8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8951EB9C6906D3C8 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBA4B8D83BDC75551(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA4B8D83BDC75551);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBA4B8D83BDC75551 call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasResumedFromSuspend() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8B9C0EC9E183F35);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasResumedFromSuspend call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x65D2EBB47E1CEC21(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65D2EBB47E1CEC21);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x65D2EBB47E1CEC21 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6F2135B6129620C1(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F2135B6129620C1);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6F2135B6129620C1 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8D74E26F54B4E5C3(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D74E26F54B4E5C3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8D74E26F54B4E5C3 call failed" << Log::Endl;
	}
}

EXPORT bool Native_getBaseElementMetadata(int32_t& _p0, int32_t& _p1, int32_t _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB335F761606DB47C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBaseElementMetadata call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getPrevWeatherTypeHashName() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x564B884A05EC45A3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPrevWeatherTypeHashName call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNextWeatherTypeHashName() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x711327CD09C8F162);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNextWeatherTypeHashName call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isPrevWeatherType(const char* _weatherType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44F28F86433B10A9);
	ctx->Reset();
	ctx->Push(_weatherType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPrevWeatherType call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isNextWeatherType(const char* _weatherType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FAA3A30BEC0F25D);
	ctx->Reset();
	ctx->Push(_weatherType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isNextWeatherType call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setWeatherTypePersist(const char* _weatherType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x704983DF373B198F);
	ctx->Reset();
	ctx->Push(_weatherType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWeatherTypePersist call failed" << Log::Endl;
	}
}

EXPORT void Native_setWeatherTypeNowPersist(const char* _weatherType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED712CA327900C8A);
	ctx->Reset();
	ctx->Push(_weatherType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWeatherTypeNowPersist call failed" << Log::Endl;
	}
}

EXPORT void Native_setWeatherTypeNow(const char* _weatherType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29B487C359E19889);
	ctx->Reset();
	ctx->Push(_weatherType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWeatherTypeNow call failed" << Log::Endl;
	}
}

EXPORT void Native_setWeatherTypeOvertimePersist(const char* _weatherType, float _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB5045B7C42B75BF);
	ctx->Reset();
	ctx->Push(_weatherType);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWeatherTypeOvertimePersist call failed" << Log::Endl;
	}
}

EXPORT void Native_setRandomWeatherType() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B05F884CF7E8020);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRandomWeatherType call failed" << Log::Endl;
	}
}

EXPORT void Native_clearWeatherTypePersist() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCC39339BEF76CF5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearWeatherTypePersist call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0CF97F497FE7D048(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CF97F497FE7D048);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0CF97F497FE7D048 call failed" << Log::Endl;
	}
}

EXPORT void Native_getWeatherTypeTransition(int32_t& _weatherType1, int32_t& _weatherType2, float& _percentWeather2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3BBE884A14BB413);
	ctx->Reset();
	ctx->Push(_weatherType1);
	ctx->Push(_weatherType2);
	ctx->Push(_percentWeather2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeatherTypeTransition call failed" << Log::Endl;
	}
}

EXPORT void Native_setWeatherTypeTransition(int32_t _weatherType1, int32_t _weatherType2, float _percentWeather2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x578C752848ECFA0C);
	ctx->Reset();
	ctx->Push(_weatherType1);
	ctx->Push(_weatherType2);
	ctx->Push(_percentWeather2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWeatherTypeTransition call failed" << Log::Endl;
	}
}

EXPORT void Native_setOverrideWeather(const char* _weatherType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA43D5C6FE51ADBEF);
	ctx->Reset();
	ctx->Push(_weatherType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setOverrideWeather call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1178E104409FE58C(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1178E104409FE58C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1178E104409FE58C call failed" << Log::Endl;
	}
}

EXPORT void Native_clearOverrideWeather() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x338D2E3477711050);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearOverrideWeather call failed" << Log::Endl;
	}
}

EXPORT void Native_waterOverrideSetShorewaveamplitude(float _amplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8F87EAD7533B176);
	ctx->Reset();
	ctx->Push(_amplitude);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waterOverrideSetShorewaveamplitude call failed" << Log::Endl;
	}
}

EXPORT void Native_waterOverrideSetShorewaveminamplitude(float _minAmplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3EAD29AB273ECE8);
	ctx->Reset();
	ctx->Push(_minAmplitude);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waterOverrideSetShorewaveminamplitude call failed" << Log::Endl;
	}
}

EXPORT void Native_waterOverrideSetShorewavemaxamplitude(float _maxAmplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7A1127490312C36);
	ctx->Reset();
	ctx->Push(_maxAmplitude);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waterOverrideSetShorewavemaxamplitude call failed" << Log::Endl;
	}
}

EXPORT void Native_waterOverrideSetOceannoiseminamplitude(float _minAmplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31727907B2C43C55);
	ctx->Reset();
	ctx->Push(_minAmplitude);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waterOverrideSetOceannoiseminamplitude call failed" << Log::Endl;
	}
}

EXPORT void Native_waterOverrideSetOceanwaveamplitude(float _amplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x405591EC8FD9096D);
	ctx->Reset();
	ctx->Push(_amplitude);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waterOverrideSetOceanwaveamplitude call failed" << Log::Endl;
	}
}

EXPORT void Native_waterOverrideSetOceanwaveminamplitude(float _minAmplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF751B16FB32ABC1D);
	ctx->Reset();
	ctx->Push(_minAmplitude);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waterOverrideSetOceanwaveminamplitude call failed" << Log::Endl;
	}
}

EXPORT void Native_waterOverrideSetOceanwavemaxamplitude(float _maxAmplitude) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3E6360DDE733E82);
	ctx->Reset();
	ctx->Push(_maxAmplitude);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waterOverrideSetOceanwavemaxamplitude call failed" << Log::Endl;
	}
}

EXPORT void Native_waterOverrideSetRipplebumpiness(float _bumpiness) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C9C0B1EEB1F9072);
	ctx->Reset();
	ctx->Push(_bumpiness);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waterOverrideSetRipplebumpiness call failed" << Log::Endl;
	}
}

EXPORT void Native_waterOverrideSetRippleminbumpiness(float _minBumpiness) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6216B116083A7CB4);
	ctx->Reset();
	ctx->Push(_minBumpiness);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waterOverrideSetRippleminbumpiness call failed" << Log::Endl;
	}
}

EXPORT void Native_waterOverrideSetRipplemaxbumpiness(float _maxBumpiness) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F5E6BB6B34540DA);
	ctx->Reset();
	ctx->Push(_maxBumpiness);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waterOverrideSetRipplemaxbumpiness call failed" << Log::Endl;
	}
}

EXPORT void Native_waterOverrideSetRippledisturb(float _disturb) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9854DFDE0D833D6);
	ctx->Reset();
	ctx->Push(_disturb);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waterOverrideSetRippledisturb call failed" << Log::Endl;
	}
}

EXPORT void Native_waterOverrideSetStrength(float _strength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC54A08C85AE4D410);
	ctx->Reset();
	ctx->Push(_strength);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waterOverrideSetStrength call failed" << Log::Endl;
	}
}

EXPORT void Native_waterOverrideFadeIn(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8434F1DFF41D6E7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waterOverrideFadeIn call failed" << Log::Endl;
	}
}

EXPORT void Native_waterOverrideFadeOut(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3C221ADDDE31A11);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waterOverrideFadeOut call failed" << Log::Endl;
	}
}

EXPORT void Native_setWind(float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC3A74E8384A9919);
	ctx->Reset();
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWind call failed" << Log::Endl;
	}
}

EXPORT void Native_setWindSpeed(float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE09ECEDBABE47FC);
	ctx->Reset();
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWindSpeed call failed" << Log::Endl;
	}
}

EXPORT float Native_getWindSpeed() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8CF1CC0AFCD3F12);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWindSpeed call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setWindDirection(float _direction) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB0F4468467B4528);
	ctx->Reset();
	ctx->Push(_direction);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWindDirection call failed" << Log::Endl;
	}
}

EXPORT vector3_t Native_getWindDirection() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F400FEF721170DA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWindDirection call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT void Native_setRainLevel(float _intensity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x643E26EA6E024D92);
	ctx->Reset();
	ctx->Push(_intensity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRainLevel call failed" << Log::Endl;
	}
}

EXPORT float Native_getRainLevel() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x96695E368AD855F3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRainLevel call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setSnowLevel(float _level) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F06937B0CDCBC1A);
	ctx->Reset();
	ctx->Push(_level);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSnowLevel call failed" << Log::Endl;
	}
}

EXPORT float Native_getSnowLevel() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5868A966E5BE3AE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getSnowLevel call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_forceLightningFlash() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6062E089251C898);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceLightningFlash call failed" << Log::Endl;
	}
}

EXPORT void Native__0x02DEAAC8F8EA7FE7(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02DEAAC8F8EA7FE7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x02DEAAC8F8EA7FE7 call failed" << Log::Endl;
	}
}

EXPORT void Native_preloadCloudHat(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11B56FBBF7224868);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native preloadCloudHat call failed" << Log::Endl;
	}
}

EXPORT void Native_loadCloudHat(const char* _name, float _transitionTime) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC4842A34657BFCB);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_transitionTime);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native loadCloudHat call failed" << Log::Endl;
	}
}

EXPORT void Native_unloadCloudHat(const char* _name, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA74802FB8D0B7814);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native unloadCloudHat call failed" << Log::Endl;
	}
}

EXPORT void Native_clearCloudHat() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x957E790EA1727B64);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearCloudHat call failed" << Log::Endl;
	}
}

EXPORT void Native_setCloudHatOpacity(float _opacity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF36199225D6D8C86);
	ctx->Reset();
	ctx->Push(_opacity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCloudHatOpacity call failed" << Log::Endl;
	}
}

EXPORT float Native_getCloudHatOpacity() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20AC25E781AE4A84);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCloudHatOpacity call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native_getGameTimer() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9CD27B0045628463);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getGameTimer call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT float Native_getFrameTime() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15C40837039FFAF7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFrameTime call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getBenchmarkTime() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE599A503B3837E1B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBenchmarkTime call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native_getFrameCount() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC8202EFC642E6F2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFrameCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT float Native_getRandomFloatInRange(float _startRange, float _endRange) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x313CE5879CEB6FCD);
	ctx->Reset();
	ctx->Push(_startRange);
	ctx->Push(_endRange);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRandomFloatInRange call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native_getRandomIntInRange(int32_t _startRange, int32_t _endRange) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD53343AA4FB7DD28);
	ctx->Reset();
	ctx->Push(_startRange);
	ctx->Push(_endRange);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRandomIntInRange call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getRandomIntInRange2(int32_t _startRange, int32_t _endRange) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2D49816A804D134);
	ctx->Reset();
	ctx->Push(_startRange);
	ctx->Push(_endRange);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRandomIntInRange2 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getGroundZFor3dCoord(float _x, float _y, float _z, float& _groundZ, bool _ignoreWater, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC906A7DAB05C8D2B);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_groundZ);
	ctx->Push(_ignoreWater);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getGroundZFor3dCoord call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getGroundZAndNormalFor3dCoord(float _x, float _y, float _z, float& _groundZ, vector3_t& _normal) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BDC7BFC57A81E76);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_groundZ);
	alt::INative::Vector3 converted_normal { _normal.x, 0, _normal.y, 0, _normal.z };
	ctx->Push(&converted_normal);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getGroundZAndNormalFor3dCoord call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_normal.x = converted_normal.x;
	_normal.y = converted_normal.y;
	_normal.z = converted_normal.z;
}

EXPORT bool Native_getGroundZFor3dCoord2(float _x, float _y, float _z, float& _groundZ, bool _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E82F0F362881B29);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_groundZ);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getGroundZFor3dCoord2 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT float Native_asin(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC843060B5765DCE7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native asin call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_acos(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D08B970013C34B6);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native acos call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_tan(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x632106CC96E82E91);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native tan call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_atan(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9D1795CD5043663);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native atan call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_atan2(float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8927CBF9D22261A4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native atan2 call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getDistanceBetweenCoords(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, bool _useZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1B760881820C952);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_useZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDistanceBetweenCoords call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getAngleBetween2dVectors(float _x1, float _y1, float _x2, float _y2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x186FC4BE848E1C92);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getAngleBetween2dVectors call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getHeadingFromVector2d(float _dx, float _dy) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FFB6B224F4B2926);
	ctx->Reset();
	ctx->Push(_dx);
	ctx->Push(_dy);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHeadingFromVector2d call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native__0x7F8F6405F4777AF6(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, float _p8, bool _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F8F6405F4777AF6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7F8F6405F4777AF6 call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT vector3_t Native__0x21C235BC64831E5A(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, float _p8, bool _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21C235BC64831E5A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x21C235BC64831E5A call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT bool Native__0xF56DFB7B61BE7276(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, float _p8, float _p9, float _p10, float _p11, float& _p12) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF56DFB7B61BE7276);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF56DFB7B61BE7276 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xA0AD167E4B39D9A2(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9, int32_t _p10, int32_t _p11, int32_t _p12, int32_t _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0AD167E4B39D9A2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	ctx->Push(_p13);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA0AD167E4B39D9A2 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setBit(int32_t& _address, int32_t _offset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x933D6A9EEC1BACD0);
	ctx->Reset();
	ctx->Push(_address);
	ctx->Push(_offset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBit call failed" << Log::Endl;
	}
}

EXPORT void Native_clearBit(int32_t& _address, int32_t _offset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE80492A9AC099A93);
	ctx->Reset();
	ctx->Push(_address);
	ctx->Push(_offset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearBit call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getHashKey(const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD24D37CC275948CC);
	ctx->Reset();
	ctx->Push(_string);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHashKey call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_slerpNearQuaternion(float _t, float _x, float _y, float _z, float _w, float _x1, float _y1, float _z1, float _w1, float& _outX, float& _outY, float& _outZ, float& _outW) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2F6A2FA49278625);
	ctx->Reset();
	ctx->Push(_t);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_w);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_w1);
	ctx->Push(_outX);
	ctx->Push(_outY);
	ctx->Push(_outZ);
	ctx->Push(_outW);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native slerpNearQuaternion call failed" << Log::Endl;
	}
}

EXPORT bool Native_isAreaOccupied(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, bool _p6, bool _p7, bool _p8, bool _p9, bool _p10, int32_t _p11, bool _p12) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA61B4DF533DCB56E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAreaOccupied call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x39455BF4F4F55186(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9, int32_t _p10, int32_t _p11, int32_t _p12) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39455BF4F4F55186);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x39455BF4F4F55186 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isPositionOccupied(float _x, float _y, float _z, float _range, bool _p4, bool _checkVehicles, bool _checkPeds, bool _p7, bool _p8, int32_t _ignoreEntity, bool _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADCDE75E1C60F32D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_range);
	ctx->Push(_p4);
	ctx->Push(_checkVehicles);
	ctx->Push(_checkPeds);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_ignoreEntity);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPositionOccupied call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPointObscuredByAMissionEntity(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE54E209C35FFA18D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPointObscuredByAMissionEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_clearArea(float _X, float _Y, float _Z, float _radius, bool _p4, bool _ignoreCopCars, bool _ignoreObjects, bool _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA56F01F3765B93A0);
	ctx->Reset();
	ctx->Push(_X);
	ctx->Push(_Y);
	ctx->Push(_Z);
	ctx->Push(_radius);
	ctx->Push(_p4);
	ctx->Push(_ignoreCopCars);
	ctx->Push(_ignoreObjects);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearArea call failed" << Log::Endl;
	}
}

EXPORT void Native_clearAreaLeaveVehicleHealth(float _x, float _y, float _z, float _radius, bool _p4, bool _p5, bool _p6, bool _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x957838AAF91BD12D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearAreaLeaveVehicleHealth call failed" << Log::Endl;
	}
}

EXPORT void Native_clearAreaOfVehicles(float _x, float _y, float _z, float _radius, bool _p4, bool _p5, bool _p6, bool _p7, bool _p8, bool _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01C7B9B38428AEB6);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearAreaOfVehicles call failed" << Log::Endl;
	}
}

EXPORT void Native_clearAngledAreaOfVehicles(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, bool _p7, bool _p8, bool _p9, bool _p10, bool _p11, int32_t _p12) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11DB3500F042A8AA);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearAngledAreaOfVehicles call failed" << Log::Endl;
	}
}

EXPORT void Native_clearAreaOfObjects(float _x, float _y, float _z, float _radius, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD9B9B385AAC7F5B);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearAreaOfObjects call failed" << Log::Endl;
	}
}

EXPORT void Native_clearAreaOfPeds(float _x, float _y, float _z, float _radius, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE31FD6CE464AC59);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearAreaOfPeds call failed" << Log::Endl;
	}
}

EXPORT void Native_clearAreaOfCops(float _x, float _y, float _z, float _radius, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04F8FC8FCF58F88D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearAreaOfCops call failed" << Log::Endl;
	}
}

EXPORT void Native_clearAreaOfProjectiles(float _x, float _y, float _z, float _radius, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A1CB9094635D1A6);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearAreaOfProjectiles call failed" << Log::Endl;
	}
}

EXPORT void Native__0x7EC6F9A478A6A512() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EC6F9A478A6A512);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7EC6F9A478A6A512 call failed" << Log::Endl;
	}
}

EXPORT void Native_setSaveMenuActive(bool _ignoreVehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9BF75D28165FF77);
	ctx->Reset();
	ctx->Push(_ignoreVehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSaveMenuActive call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x397BAA01068BAA96() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x397BAA01068BAA96);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x397BAA01068BAA96 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setCreditsActive(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB938B7E6D3C0620C);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCreditsActive call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB51B9AB9EF81868C(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB51B9AB9EF81868C);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB51B9AB9EF81868C call failed" << Log::Endl;
	}
}

EXPORT bool Native_haveCreditsReachedEnd() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x075F1D57402C93BA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native haveCreditsReachedEnd call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_terminateAllScriptsWithThisName(const char* _scriptName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DC711BC69C548DF);
	ctx->Reset();
	ctx->Push(_scriptName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native terminateAllScriptsWithThisName call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetScriptIsSafeForNetworkGame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9243BAC96D64C050);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetScriptIsSafeForNetworkGame call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_addHospitalRestart(float _x, float _y, float _z, float _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F464EF988465A81);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addHospitalRestart call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_disableHospitalRestart(int32_t _hospitalIndex, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8535819C450EBA8);
	ctx->Reset();
	ctx->Push(_hospitalIndex);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableHospitalRestart call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_addPoliceRestart(float _p0, float _p1, float _p2, float _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x452736765B31FC4B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addPoliceRestart call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_disablePoliceRestart(int32_t _policeIndex, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23285DED6EBD7EA3);
	ctx->Reset();
	ctx->Push(_policeIndex);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disablePoliceRestart call failed" << Log::Endl;
	}
}

EXPORT void Native_setRestartCustomPosition(float _x, float _y, float _z, float _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x706B5EDCAA7FA663);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRestartCustomPosition call failed" << Log::Endl;
	}
}

EXPORT void Native_clearRestartCustomPosition() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2716D40842EAF79);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearRestartCustomPosition call failed" << Log::Endl;
	}
}

EXPORT void Native_pauseDeathArrestRestart(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C2B3493FBF51C71);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pauseDeathArrestRestart call failed" << Log::Endl;
	}
}

EXPORT void Native_ignoreNextRestart(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21FFB63D8C615361);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ignoreNextRestart call failed" << Log::Endl;
	}
}

EXPORT void Native_setFadeOutAfterDeath(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A18E01DF2C87B86);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFadeOutAfterDeath call failed" << Log::Endl;
	}
}

EXPORT void Native_setFadeOutAfterArrest(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E0B4DC0D990A4E7);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFadeOutAfterArrest call failed" << Log::Endl;
	}
}

EXPORT void Native_setFadeInAfterDeathArrest(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA66D2796BA33F12);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFadeInAfterDeathArrest call failed" << Log::Endl;
	}
}

EXPORT void Native_setFadeInAfterLoad(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3D78F59DFE18D79);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFadeInAfterLoad call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_registerSaveHouse(float _p0, float _p1, float _p2, float _p3, int32_t& _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0714D0A7EEECA54);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerSaveHouse call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setSaveHouse(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F548CABEAE553BC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSaveHouse call failed" << Log::Endl;
	}
}

EXPORT bool Native_overrideSaveHouse(bool _p0, float _p1, float _p2, float _p3, float _p4, bool _p5, float _p6, float _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1162EA8AE9D24EEA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native overrideSaveHouse call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xA4A0065E39C9F25C(vector3_t& _p0, float& _p1, bool& _fadeInAfterLoad, bool& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4A0065E39C9F25C);
	ctx->Reset();
	alt::INative::Vector3 converted_p0 { _p0.x, 0, _p0.y, 0, _p0.z };
	ctx->Push(&converted_p0);
	ctx->Push(_p1);
	ctx->Push(_fadeInAfterLoad);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA4A0065E39C9F25C call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_p0.x = converted_p0.x;
	_p0.y = converted_p0.y;
	_p0.z = converted_p0.z;
}

EXPORT void Native_doAutoSave() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50EEAAD86232EE55);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doAutoSave call failed" << Log::Endl;
	}
}

EXPORT bool Native_getIsAutoSaveOff() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E04F06094C87047);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsAutoSaveOff call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isAutoSaveInProgress() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69240733738C19A0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAutoSaveInProgress call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasCodeRequestedAutosave() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2107A3773771186D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasCodeRequestedAutosave call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_clearCodeRequestedAutosave() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06462A961E94B67C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearCodeRequestedAutosave call failed" << Log::Endl;
	}
}

EXPORT void Native_beginReplayStats(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0E500246FF73D66);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginReplayStats call failed" << Log::Endl;
	}
}

EXPORT void Native_addReplayStatValue(int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69FE6DC87BD2A5E9);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addReplayStatValue call failed" << Log::Endl;
	}
}

EXPORT void Native_endReplayStats() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA23E821FBDF8A5F2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endReplayStats call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_haveReplayStatsBeenStored() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD642319C54AADEB6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native haveReplayStatsBeenStored call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getReplayStatMissionId() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B1F2E327B6B6FE1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getReplayStatMissionId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getReplayStatMissionType() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B626A0150E4D449);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getReplayStatMissionType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getReplayStatCount() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC9274A7EF6B2867);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getReplayStatCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getReplayStatAtIndex(int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8098C8D6597AAE18);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getReplayStatAtIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_clearReplayStats() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B1AB132A16FDA55);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearReplayStats call failed" << Log::Endl;
	}
}

EXPORT bool Native_queueMissionRepeatLoad() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72DE52178C291CB5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native queueMissionRepeatLoad call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_queueMissionRepeatSave() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44A0BDC559B35F6E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native queueMissionRepeatSave call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xEB2104E905C6F2E9() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB2104E905C6F2E9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEB2104E905C6F2E9 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getStatusOfMissionRepeatSave() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B5E102E4A42F2BF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getStatusOfMissionRepeatSave call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isMemoryCardInUse() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A75CE2956274ADD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMemoryCardInUse call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_shootSingleBulletBetweenCoords(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _damage, bool _p7, int32_t _weaponHash, int32_t _ownerPed, bool _isAudible, bool _isInvisible, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x867654CBC7606F2C);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_damage);
	ctx->Push(_p7);
	ctx->Push(_weaponHash);
	ctx->Push(_ownerPed);
	ctx->Push(_isAudible);
	ctx->Push(_isInvisible);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native shootSingleBulletBetweenCoords call failed" << Log::Endl;
	}
}

EXPORT void Native_shootSingleBulletBetweenCoordsIgnoreEntity(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _damage, bool _p7, int32_t _weaponHash, int32_t _ownerPed, bool _isAudible, bool _isInvisible, float _speed, int32_t _entity, int32_t _p14) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3A7742E0B7A2F8B);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_damage);
	ctx->Push(_p7);
	ctx->Push(_weaponHash);
	ctx->Push(_ownerPed);
	ctx->Push(_isAudible);
	ctx->Push(_isInvisible);
	ctx->Push(_speed);
	ctx->Push(_entity);
	ctx->Push(_p14);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native shootSingleBulletBetweenCoordsIgnoreEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_shootSingleBulletBetweenCoordsIgnoreEntityNew(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _damage, bool _p7, int32_t _weaponHash, int32_t _ownerPed, bool _isAudible, bool _isInvisible, float _speed, int32_t _entity, bool _p14, bool _p15, bool _p16, bool _p17, int32_t _p18, int32_t _p19, int32_t _p20) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFE5756E7407064A);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_damage);
	ctx->Push(_p7);
	ctx->Push(_weaponHash);
	ctx->Push(_ownerPed);
	ctx->Push(_isAudible);
	ctx->Push(_isInvisible);
	ctx->Push(_speed);
	ctx->Push(_entity);
	ctx->Push(_p14);
	ctx->Push(_p15);
	ctx->Push(_p16);
	ctx->Push(_p17);
	ctx->Push(_p18);
	ctx->Push(_p19);
	ctx->Push(_p20);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native shootSingleBulletBetweenCoordsIgnoreEntityNew call failed" << Log::Endl;
	}
}

EXPORT void Native_getModelDimensions(int32_t _modelHash, vector3_t& _minimum, vector3_t& _maximum) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03E8D3D5F549087A);
	ctx->Reset();
	ctx->Push(_modelHash);
	alt::INative::Vector3 converted_minimum { _minimum.x, 0, _minimum.y, 0, _minimum.z };
	ctx->Push(&converted_minimum);
	alt::INative::Vector3 converted_maximum { _maximum.x, 0, _maximum.y, 0, _maximum.z };
	ctx->Push(&converted_maximum);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getModelDimensions call failed" << Log::Endl;
	}
	_minimum.x = converted_minimum.x;
	_minimum.y = converted_minimum.y;
	_minimum.z = converted_minimum.z;
	_maximum.x = converted_maximum.x;
	_maximum.y = converted_maximum.y;
	_maximum.z = converted_maximum.z;
}

EXPORT void Native_setFakeWantedLevel(int32_t _fakeWantedLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1454F2448DE30163);
	ctx->Reset();
	ctx->Push(_fakeWantedLevel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFakeWantedLevel call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getFakeWantedLevel() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C9296CBCD1B971E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getFakeWantedLevel call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isBitSet(int32_t _address, int32_t _offset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA921AA820C25702F);
	ctx->Reset();
	ctx->Push(_address);
	ctx->Push(_offset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isBitSet call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_usingMissionCreator(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF14878FC50BEC6EE);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native usingMissionCreator call failed" << Log::Endl;
	}
}

EXPORT void Native_allowMissionCreatorWarp(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEA36202FC3382DF);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native allowMissionCreatorWarp call failed" << Log::Endl;
	}
}

EXPORT void Native_setMinigameInProgress(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19E00D7322C6F85B);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMinigameInProgress call failed" << Log::Endl;
	}
}

EXPORT bool Native_isMinigameInProgress() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B4A15E44DE0F478);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMinigameInProgress call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isThisAMinigameScript() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B30F65D7B710098);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isThisAMinigameScript call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isSniperInverted() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61A23B7EDA9BDA24);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSniperInverted call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_shouldUseMetricMeasurements() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3D15555431AB793);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native shouldUseMetricMeasurements call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getProfileSetting(int32_t _profileSetting) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC488FF2356EA7791);
	ctx->Reset();
	ctx->Push(_profileSetting);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getProfileSetting call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_areStringsEqual(const char* _string1, const char* _string2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C515FAB3FF9EA92);
	ctx->Reset();
	ctx->Push(_string1);
	ctx->Push(_string2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native areStringsEqual call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_compareStrings(const char* _str1, const char* _str2, bool _matchCase, int32_t _maxLength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E34710ECD4AB0EB);
	ctx->Reset();
	ctx->Push(_str1);
	ctx->Push(_str2);
	ctx->Push(_matchCase);
	ctx->Push(_maxLength);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native compareStrings call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_absi(int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0D31AD191A74F87);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native absi call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT float Native_absf(float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73D57CFFDD12C355);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native absf call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT bool Native_isSniperBulletInArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEFCF11B01287125);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSniperBulletInArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isProjectileInArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, bool _ownedByPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5270A8FBC098C3F8);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_ownedByPlayer);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isProjectileInArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isProjectileTypeInArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _type, bool _ownedByPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E0DC353342C4A6D);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_type);
	ctx->Push(_ownedByPlayer);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isProjectileTypeInArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isProjectileTypeInAngledArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, int32_t _p7, bool _ownedByPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0BC12401061DEA0);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push(_p7);
	ctx->Push(_ownedByPlayer);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isProjectileTypeInAngledArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isProjectileTypeWithinDistance(float _x, float _y, float _z, int32_t _projectileHash, float _radius, bool _ownedByPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34318593248C8FB2);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_projectileHash);
	ctx->Push(_radius);
	ctx->Push(_ownedByPlayer);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isProjectileTypeWithinDistance call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getCoordsOfProjectileTypeInArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _projectileHash, vector3_t& _projectilePos, bool _ownedByPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D7A43EC6A5FEA45);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_projectileHash);
	alt::INative::Vector3 converted_projectilePos { _projectilePos.x, 0, _projectilePos.y, 0, _projectilePos.z };
	ctx->Push(&converted_projectilePos);
	ctx->Push(_ownedByPlayer);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCoordsOfProjectileTypeInArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_projectilePos.x = converted_projectilePos.x;
	_projectilePos.y = converted_projectilePos.y;
	_projectilePos.z = converted_projectilePos.z;
}

EXPORT bool Native_getCoordsOfProjectileTypeWithinDistance(int32_t _ped, int32_t _weaponHash, float _distance, vector3_t& _outCoords, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFB4138EEFED7B81);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_distance);
	alt::INative::Vector3 converted_outCoords { _outCoords.x, 0, _outCoords.y, 0, _outCoords.z };
	ctx->Push(&converted_outCoords);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCoordsOfProjectileTypeWithinDistance call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_outCoords.x = converted_outCoords.x;
	_outCoords.y = converted_outCoords.y;
	_outCoords.z = converted_outCoords.z;
}

EXPORT bool Native_getProjectileNearPed(int32_t _ped, int32_t _weaponHash, float _distance, vector3_t& _outCoords, int32_t& _outProjectile, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82FDE6A57EE4EE44);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_distance);
	alt::INative::Vector3 converted_outCoords { _outCoords.x, 0, _outCoords.y, 0, _outCoords.z };
	ctx->Push(&converted_outCoords);
	ctx->Push(_outProjectile);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getProjectileNearPed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_outCoords.x = converted_outCoords.x;
	_outCoords.y = converted_outCoords.y;
	_outCoords.z = converted_outCoords.z;
}

EXPORT bool Native_isBulletInAngledArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, bool _ownedByPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A8B5F3C01E2B477);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push(_ownedByPlayer);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isBulletInAngledArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isBulletInArea(float _x, float _y, float _z, float _radius, bool _ownedByPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F2023999AD51C1F);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_ownedByPlayer);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isBulletInArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isBulletInBox(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, bool _ownedByPlayer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE0F6D7450D37351);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_ownedByPlayer);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isBulletInBox call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasBulletImpactedInArea(float _x, float _y, float _z, float _p3, bool _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9870ACFB89A90995);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasBulletImpactedInArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasBulletImpactedInBox(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, bool _p6, bool _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC8C5D7CFEAB8394);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasBulletImpactedInBox call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isOrbisVersion() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA72BC0B675B1519E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isOrbisVersion call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isDurangoVersion() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D982ADB1978442D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isDurangoVersion call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isXbox360Version() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6201B4DAF662A9D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isXbox360Version call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPs3Version() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCA1072C29D096C2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPs3Version call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPcVersion() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48AF36444B965238);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPcVersion call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isAussieVersion() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F1935CA1F724008);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAussieVersion call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isStringNull(const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF22B6C47C6EAB066);
	ctx->Reset();
	ctx->Push(_string);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isStringNull call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isStringNullOrEmpty(const char* _string) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA042B6957743895);
	ctx->Reset();
	ctx->Push(_string);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isStringNullOrEmpty call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_stringToInt(const char* _string, int32_t& _outInteger) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A5F40FE637EB584);
	ctx->Reset();
	ctx->Push(_string);
	ctx->Push(_outInteger);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stringToInt call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setBitsInRange(int32_t& _unkVar, int32_t _rangeStart, int32_t _rangeEnd, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EF07E15701D61ED);
	ctx->Reset();
	ctx->Push(_unkVar);
	ctx->Push(_rangeStart);
	ctx->Push(_rangeEnd);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBitsInRange call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getBitsInRange(int32_t _unkVar, int32_t _rangeStart, int32_t _rangeEnd) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53158863FCC0893A);
	ctx->Reset();
	ctx->Push(_unkVar);
	ctx->Push(_rangeStart);
	ctx->Push(_rangeEnd);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBitsInRange call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_addStuntJump(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _x3, float _y3, float _z3, float _x4, float _y4, float _z4, float _camX, float _camY, float _camZ, int32_t _p15, int32_t _p16, int32_t _p17) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A992DA297A4630C);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_x3);
	ctx->Push(_y3);
	ctx->Push(_z3);
	ctx->Push(_x4);
	ctx->Push(_y4);
	ctx->Push(_z4);
	ctx->Push(_camX);
	ctx->Push(_camY);
	ctx->Push(_camZ);
	ctx->Push(_p15);
	ctx->Push(_p16);
	ctx->Push(_p17);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addStuntJump call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_addStuntJumpAngled(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _radius1, float _x3, float _y3, float _z3, float _x4, float _y4, float _z4, float _radius2, float _camX, float _camY, float _camZ, int32_t _p17, int32_t _p18, int32_t _p19) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBE5D803A5360CBF);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_radius1);
	ctx->Push(_x3);
	ctx->Push(_y3);
	ctx->Push(_z3);
	ctx->Push(_x4);
	ctx->Push(_y4);
	ctx->Push(_z4);
	ctx->Push(_radius2);
	ctx->Push(_camX);
	ctx->Push(_camY);
	ctx->Push(_camZ);
	ctx->Push(_p17);
	ctx->Push(_p18);
	ctx->Push(_p19);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addStuntJumpAngled call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0xFB80AB299D2EE1BD(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB80AB299D2EE1BD);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFB80AB299D2EE1BD call failed" << Log::Endl;
	}
}

EXPORT void Native_deleteStuntJump(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC518000E39DAE1F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native deleteStuntJump call failed" << Log::Endl;
	}
}

EXPORT void Native_enableStuntJumpSet(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE369A5783B866016);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableStuntJumpSet call failed" << Log::Endl;
	}
}

EXPORT void Native_disableStuntJumpSet(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5272EBEDD4747F6);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableStuntJumpSet call failed" << Log::Endl;
	}
}

EXPORT void Native_setStuntJumpsCanTrigger(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD79185689F8FD5DF);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setStuntJumpsCanTrigger call failed" << Log::Endl;
	}
}

EXPORT bool Native_isStuntJumpInProgress() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A3F19700A4D0525);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isStuntJumpInProgress call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isStuntJumpMessageShowing() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2272B0A1343129F4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isStuntJumpMessageShowing call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getNumSuccessfulStuntJumps() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x996DD1E1E02F1008);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumSuccessfulStuntJumps call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getTotalSuccessfulStuntJumps() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6856EC3D35C81EA4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTotalSuccessfulStuntJumps call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_cancelStuntJump() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6B7B0ACD4E4B75E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cancelStuntJump call failed" << Log::Endl;
	}
}

EXPORT void Native_setGamePaused(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x577D1284D6873711);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGamePaused call failed" << Log::Endl;
	}
}

EXPORT void Native_setThisScriptCanBePaused(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA391C728106F7AF);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setThisScriptCanBePaused call failed" << Log::Endl;
	}
}

EXPORT void Native_setThisScriptCanRemoveBlipsCreatedByAnyScript(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB98236CAAECEF897);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setThisScriptCanRemoveBlipsCreatedByAnyScript call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasButtonCombinationJustBeenEntered(int32_t _hash, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x071E2A839DE82D90);
	ctx->Reset();
	ctx->Push(_hash);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasButtonCombinationJustBeenEntered call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasCheatStringJustBeenEntered(int32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x557E43C447E700A8);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasCheatStringJustBeenEntered call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xFA3FFB0EEBC288A3(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA3FFB0EEBC288A3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFA3FFB0EEBC288A3 call failed" << Log::Endl;
	}
}

EXPORT void Native_setInstancePriorityMode(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BAE5AD2508DF078);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setInstancePriorityMode call failed" << Log::Endl;
	}
}

EXPORT void Native_setInstancePriorityHint(int32_t _flag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5F0A8EBD3F361CE);
	ctx->Reset();
	ctx->Push(_flag);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setInstancePriorityHint call failed" << Log::Endl;
	}
}

EXPORT bool Native_isFrontendFading() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EA2B6AF97ECA6ED);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isFrontendFading call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_populateNow() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7472BB270D7B4F3E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native populateNow call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getIndexOfCurrentLevel() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCBAD6729F7B1F4FC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIndexOfCurrentLevel call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setGravityLevel(int32_t _level) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x740E14FAD5842351);
	ctx->Reset();
	ctx->Push(_level);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGravityLevel call failed" << Log::Endl;
	}
}

EXPORT void Native_startSaveData(int32_t& _p0, int32_t _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9575F812C6A7997);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startSaveData call failed" << Log::Endl;
	}
}

EXPORT void Native_stopSaveData() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74E20C9145FB66FD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopSaveData call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getSizeOfSaveData(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA09F896CE912481F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getSizeOfSaveData call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_registerIntToSave(int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34C9EE5986258415);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerIntToSave call failed" << Log::Endl;
	}
}

EXPORT void Native_registerInt64ToSave(int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA735353C77334EA0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerInt64ToSave call failed" << Log::Endl;
	}
}

EXPORT void Native_registerEnumToSave(int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10C2FA78D0E128A1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerEnumToSave call failed" << Log::Endl;
	}
}

EXPORT void Native_registerFloatToSave(int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7CAEC29ECB5DFEBB);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerFloatToSave call failed" << Log::Endl;
	}
}

EXPORT void Native_registerBoolToSave(int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8F4131414C835A1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerBoolToSave call failed" << Log::Endl;
	}
}

EXPORT void Native_registerTextLabelToSave(int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDB1232C5BEAE62F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerTextLabelToSave call failed" << Log::Endl;
	}
}

EXPORT void Native_registerTextLabelToSave2(int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F7794F28C6B2535);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerTextLabelToSave2 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x48F069265A0E4BEC(int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48F069265A0E4BEC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x48F069265A0E4BEC call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8269816F6CFD40F8(int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8269816F6CFD40F8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8269816F6CFD40F8 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xFAA457EF263E8763(int32_t& _p0, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAA457EF263E8763);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFAA457EF263E8763 call failed" << Log::Endl;
	}
}

EXPORT void Native_startSaveStructWithSize(int32_t& _p0, int32_t _size, const char* _structName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF737600CDDBEADD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_size);
	ctx->Push(_structName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startSaveStructWithSize call failed" << Log::Endl;
	}
}

EXPORT void Native_stopSaveStruct() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB1774DF12BB9F12);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopSaveStruct call failed" << Log::Endl;
	}
}

EXPORT void Native_startSaveArrayWithSize(int32_t& _p0, int32_t _size, const char* _arrayName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60FE567DF1B1AF9D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_size);
	ctx->Push(_arrayName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startSaveArrayWithSize call failed" << Log::Endl;
	}
}

EXPORT void Native_stopSaveArray() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04456F95153C6BE4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopSaveArray call failed" << Log::Endl;
	}
}

EXPORT void Native_copyMemory(int32_t& _dst, int32_t& _src, int32_t _size) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x213AEB2B90CBA7AC);
	ctx->Reset();
	ctx->Push(_dst);
	ctx->Push(_src);
	ctx->Push(_size);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native copyMemory call failed" << Log::Endl;
	}
}

EXPORT void Native_enableDispatchService(int32_t _dispatchService, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC0F817884CDD856);
	ctx->Reset();
	ctx->Push(_dispatchService);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableDispatchService call failed" << Log::Endl;
	}
}

EXPORT void Native_blockDispatchServiceResourceCreation(int32_t _dispatchService, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B2BD3773123EA2F);
	ctx->Reset();
	ctx->Push(_dispatchService);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native blockDispatchServiceResourceCreation call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getNumDispatchedUnitsForPlayer(int32_t _dispatchService) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB4A0C2D56441717);
	ctx->Reset();
	ctx->Push(_dispatchService);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumDispatchedUnitsForPlayer call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_createIncident(int32_t _dispatchService, float _x, float _y, float _z, int32_t _numUnits, float _radius, int32_t& _outIncidentID, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F892CAF67444AE7);
	ctx->Reset();
	ctx->Push(_dispatchService);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_numUnits);
	ctx->Push(_radius);
	ctx->Push(_outIncidentID);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createIncident call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_createIncidentWithEntity(int32_t _dispatchService, int32_t _ped, int32_t _numUnits, float _radius, int32_t& _outIncidentID, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x05983472F0494E60);
	ctx->Reset();
	ctx->Push(_dispatchService);
	ctx->Push(_ped);
	ctx->Push(_numUnits);
	ctx->Push(_radius);
	ctx->Push(_outIncidentID);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createIncidentWithEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_deleteIncident(int32_t _incidentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x556C1AA270D5A207);
	ctx->Reset();
	ctx->Push(_incidentId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native deleteIncident call failed" << Log::Endl;
	}
}

EXPORT bool Native_isIncidentValid(int32_t _incidentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8BC6461E629BEAA);
	ctx->Reset();
	ctx->Push(_incidentId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isIncidentValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setIncidentRequestedUnits(int32_t _incidentId, int32_t _dispatchService, int32_t _numUnits) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB08B85D860E7BA3C);
	ctx->Reset();
	ctx->Push(_incidentId);
	ctx->Push(_dispatchService);
	ctx->Push(_numUnits);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setIncidentRequestedUnits call failed" << Log::Endl;
	}
}

EXPORT void Native_setIncidentUnk(int32_t _incidentId, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD261BA3E7E998072);
	ctx->Reset();
	ctx->Push(_incidentId);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setIncidentUnk call failed" << Log::Endl;
	}
}

EXPORT bool Native_findSpawnPointInDirection(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _distance, vector3_t& _spawnPoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6874E2190B0C1972);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_distance);
	alt::INative::Vector3 converted_spawnPoint { _spawnPoint.x, 0, _spawnPoint.y, 0, _spawnPoint.z };
	ctx->Push(&converted_spawnPoint);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native findSpawnPointInDirection call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_spawnPoint.x = converted_spawnPoint.x;
	_spawnPoint.y = converted_spawnPoint.y;
	_spawnPoint.z = converted_spawnPoint.z;
}

EXPORT int32_t Native_addPopMultiplierArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _p6, float _p7, bool _p8, bool _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67F6413D3220E18D);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addPopMultiplierArea call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_doesPopMultiplierAreaExist(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1327E2FE9746BAEE);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesPopMultiplierAreaExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removePopMultiplierArea(int32_t _id, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB129E447A2EDA4BF);
	ctx->Reset();
	ctx->Push(_id);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removePopMultiplierArea call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPopMultiplierAreaUnk(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1312F4B242609CE3);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPopMultiplierAreaUnk call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_addPopMultiplierSphere(float _x, float _y, float _z, float _radius, float _pedMultiplier, float _vehicleMultiplier, bool _p6, bool _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32C7A7E8C43A1F80);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_pedMultiplier);
	ctx->Push(_vehicleMultiplier);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addPopMultiplierSphere call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_doesPopMultiplierSphereExist(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x171BAFB3C60389F4);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesPopMultiplierSphereExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removePopMultiplierSphere(int32_t _id, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6869BECDD8F2403);
	ctx->Reset();
	ctx->Push(_id);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removePopMultiplierSphere call failed" << Log::Endl;
	}
}

EXPORT void Native_enableTennisMode(int32_t _ped, bool _toggle, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28A04B411933F8A6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableTennisMode call failed" << Log::Endl;
	}
}

EXPORT bool Native_isTennisMode(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D5479D115290C3F);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isTennisMode call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_playTennisSwingAnim(int32_t _ped, const char* _animDict, const char* _animName, float _p3, float _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE266ED23311F24D4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_animDict);
	ctx->Push(_animName);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playTennisSwingAnim call failed" << Log::Endl;
	}
}

EXPORT bool Native_getTennisSwingAnimComplete(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17DF68D720AA77F8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTennisSwingAnimComplete call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x19BFED045C647C49(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19BFED045C647C49);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x19BFED045C647C49 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xE95B0C7D5BA3B96B(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE95B0C7D5BA3B96B);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE95B0C7D5BA3B96B call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_playTennisDiveAnim(int32_t _ped, int32_t _p1, float _p2, float _p3, float _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8FA9C42FC5D7C64B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playTennisDiveAnim call failed" << Log::Endl;
	}
}

EXPORT void Native__0x54F157E0336A3822(int32_t _ped, const char* _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54F157E0336A3822);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x54F157E0336A3822 call failed" << Log::Endl;
	}
}

EXPORT void Native_resetDispatchSpawnLocation() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5896F2BD5683A4E1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetDispatchSpawnLocation call failed" << Log::Endl;
	}
}

EXPORT void Native_setDispatchSpawnLocation(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD10F442036302D50);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDispatchSpawnLocation call failed" << Log::Endl;
	}
}

EXPORT void Native_resetDispatchIdealSpawnDistance() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77A84429DD9F0A15);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetDispatchIdealSpawnDistance call failed" << Log::Endl;
	}
}

EXPORT void Native_setDispatchIdealSpawnDistance(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FE601A64180D423);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDispatchIdealSpawnDistance call failed" << Log::Endl;
	}
}

EXPORT void Native_resetDispatchTimeBetweenSpawnAttempts(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB2DB0CAD13154B3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetDispatchTimeBetweenSpawnAttempts call failed" << Log::Endl;
	}
}

EXPORT void Native_setDispatchTimeBetweenSpawnAttempts(int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44F7CBC1BEB3327D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDispatchTimeBetweenSpawnAttempts call failed" << Log::Endl;
	}
}

EXPORT void Native_setDispatchTimeBetweenSpawnAttemptsMultiplier(int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48838ED9937A15D1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDispatchTimeBetweenSpawnAttemptsMultiplier call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_addDispatchSpawnBlockingAngledArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x918C7B2D2FF3928B);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addDispatchSpawnBlockingAngledArea call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_addDispatchSpawnBlockingArea(float _x1, float _y1, float _x2, float _y2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D4259F1FEB81DA9);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addDispatchSpawnBlockingArea call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_removeDispatchSpawnBlockingArea(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x264AC28B01B353A5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeDispatchSpawnBlockingArea call failed" << Log::Endl;
	}
}

EXPORT void Native_resetDispatchSpawnBlockingAreas() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC7BFD5C1D83EA75);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetDispatchSpawnBlockingAreas call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD9F692D349249528() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9F692D349249528);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD9F692D349249528 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE532EC1A63231B4F(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE532EC1A63231B4F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE532EC1A63231B4F call failed" << Log::Endl;
	}
}

EXPORT void Native_addTacticalAnalysisPoint(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8721407EE9C3FF6);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addTacticalAnalysisPoint call failed" << Log::Endl;
	}
}

EXPORT void Native_clearTacticalAnalysisPoints() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3CD58CCA6CDA852);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearTacticalAnalysisPoints call failed" << Log::Endl;
	}
}

EXPORT void Native_setRiotModeEnabled(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2587A48BC88DFADF);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRiotModeEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native_displayOnscreenKeyboardWithLongerInitialString(int32_t _p0, const char* _windowTitle, int32_t& _p2, const char* _defaultText, const char* _defaultConcat1, const char* _defaultConcat2, const char* _defaultConcat3, const char* _defaultConcat4, const char* _defaultConcat5, const char* _defaultConcat6, const char* _defaultConcat7, int32_t _maxInputLength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA78CFA0366592FE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_windowTitle);
	ctx->Push(_p2);
	ctx->Push(_defaultText);
	ctx->Push(_defaultConcat1);
	ctx->Push(_defaultConcat2);
	ctx->Push(_defaultConcat3);
	ctx->Push(_defaultConcat4);
	ctx->Push(_defaultConcat5);
	ctx->Push(_defaultConcat6);
	ctx->Push(_defaultConcat7);
	ctx->Push(_maxInputLength);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native displayOnscreenKeyboardWithLongerInitialString call failed" << Log::Endl;
	}
}

EXPORT void Native_displayOnscreenKeyboard(int32_t _p0, const char* _windowTitle, const char* _p2, const char* _defaultText, const char* _defaultConcat1, const char* _defaultConcat2, const char* _defaultConcat3, int32_t _maxInputLength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x00DC833F2568DBF6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_windowTitle);
	ctx->Push(_p2);
	ctx->Push(_defaultText);
	ctx->Push(_defaultConcat1);
	ctx->Push(_defaultConcat2);
	ctx->Push(_defaultConcat3);
	ctx->Push(_maxInputLength);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native displayOnscreenKeyboard call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_updateOnscreenKeyboard() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CF2B696BBF945AE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native updateOnscreenKeyboard call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT const char* Native_getOnscreenKeyboardResult() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8362B09B91893647);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getOnscreenKeyboardResult call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT void Native_cancelOnscreenKeyboard() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58A39BE597CE99CD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cancelOnscreenKeyboard call failed" << Log::Endl;
	}
}

EXPORT void Native_nextOnscreenKeyboardResultWillDisplayUsingTheseFonts(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3ED1438C1F5C6612);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native nextOnscreenKeyboardResultWillDisplayUsingTheseFonts call failed" << Log::Endl;
	}
}

EXPORT void Native_removeStealthKill(int32_t _hash, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6A12939F16D85BE);
	ctx->Reset();
	ctx->Push(_hash);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeStealthKill call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1EAE0A6E978894A2(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1EAE0A6E978894A2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1EAE0A6E978894A2 call failed" << Log::Endl;
	}
}

EXPORT void Native_setExplosiveAmmoThisFrame(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA66C71C98D5F2CFB);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setExplosiveAmmoThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setFireAmmoThisFrame(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11879CDD803D30F4);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFireAmmoThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setExplosiveMeleeThisFrame(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF1BED81BFDC0FE0);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setExplosiveMeleeThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setSuperJumpThisFrame(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57FFF03E423A4C0B);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSuperJumpThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setBeastModeActive(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x438822C279B73B93);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBeastModeActive call failed" << Log::Endl;
	}
}

EXPORT void Native_setForcePlayerToJump(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1183BCFEE0F93D1);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setForcePlayerToJump call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x6FDDF453C0C756EC() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FDDF453C0C756EC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6FDDF453C0C756EC call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xFB00CA71DA386228() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB00CA71DA386228);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFB00CA71DA386228 call failed" << Log::Endl;
	}
}

EXPORT bool Native_areProfileSettingsValid() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AA3BEFA29F03AD4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native areProfileSettingsValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xE3D969D2785FFB5E() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3D969D2785FFB5E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE3D969D2785FFB5E call failed" << Log::Endl;
	}
}

EXPORT void Native_forceGameStatePlaying() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0AA53F866B3134D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceGameStatePlaying call failed" << Log::Endl;
	}
}

EXPORT void Native_scriptRaceInit(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A60017F841A54F2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scriptRaceInit call failed" << Log::Endl;
	}
}

EXPORT void Native_scriptRaceShutdown() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1FF6BF9A63E5757F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scriptRaceShutdown call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1BB299305C3E8C13(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1BB299305C3E8C13);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1BB299305C3E8C13 call failed" << Log::Endl;
	}
}

EXPORT bool Native_scriptRaceGetPlayerSplitTime(int32_t _player, int32_t& _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EF5573A1F801A5C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scriptRaceGetPlayerSplitTime call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_startBenchmarkRecording() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92790862E36C2ADA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startBenchmarkRecording call failed" << Log::Endl;
	}
}

EXPORT void Native_stopBenchmarkRecording() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7DB36C24634F52B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopBenchmarkRecording call failed" << Log::Endl;
	}
}

EXPORT void Native_resetBenchmarkRecording() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x437138B6A830166A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetBenchmarkRecording call failed" << Log::Endl;
	}
}

EXPORT void Native_saveBenchmarkRecording() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37DEB0AA183FB6D8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native saveBenchmarkRecording call failed" << Log::Endl;
	}
}

EXPORT bool Native_uiIsSingleplayerPauseMenuActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA2F2061875EED90);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native uiIsSingleplayerPauseMenuActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_landingMenuIsActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BBBD13E5041A79E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native landingMenuIsActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isCommandLineBenchmarkValueSet() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA049A5BE0F04F2F8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCommandLineBenchmarkValueSet call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getBenchmarkIterationsFromCommandLine() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4750FC27570311EC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBenchmarkIterationsFromCommandLine call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getBenchmarkPassFromCommandLine() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B2366C3F2A5C8DF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBenchmarkPassFromCommandLine call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_restartGame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE574A662ACAEFBB1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native restartGame call failed" << Log::Endl;
	}
}

EXPORT void Native_forceSocialClubUpdate() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB6891F03362FB12);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceSocialClubUpdate call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasAsyncInstallFinished() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14832BF2ABA53FC5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasAsyncInstallFinished call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_cleanupAsyncInstall() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC79AE21974B01FB2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cleanupAsyncInstall call failed" << Log::Endl;
	}
}

EXPORT bool Native_isInPowerSavingMode() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x684A41975F077262);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isInPowerSavingMode call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getPowerSavingModeDuration() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xABB2FA71C83A1B72);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPowerSavingModeDuration call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPlayerIsInAnimalForm(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4EBB7E87AA0DBED4);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerIsInAnimalForm call failed" << Log::Endl;
	}
}

EXPORT bool Native_getIsPlayerInAnimalForm() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9689123E3F213AA5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsPlayerInAnimalForm call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPlayerRockstarEditorDisabled(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D8D44ADBBA61EF2);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerRockstarEditorDisabled call failed" << Log::Endl;
	}
}

EXPORT void Native__0x23227DF0B2115469() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23227DF0B2115469);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x23227DF0B2115469 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xD10282B6E3751BA0() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD10282B6E3751BA0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD10282B6E3751BA0 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x693478ACBD7F18E7() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x693478ACBD7F18E7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x693478ACBD7F18E7 call failed" << Log::Endl;
	}
}

EXPORT void Native_createMobilePhone(int32_t _phoneType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4E8E696C532FBC7);
	ctx->Reset();
	ctx->Push(_phoneType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createMobilePhone call failed" << Log::Endl;
	}
}

EXPORT void Native_destroyMobilePhone() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BC861DF703E5097);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native destroyMobilePhone call failed" << Log::Endl;
	}
}

EXPORT void Native_setMobilePhoneScale(float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCBDD322A73D6D932);
	ctx->Reset();
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMobilePhoneScale call failed" << Log::Endl;
	}
}

EXPORT void Native_setMobilePhoneRotation(float _rotX, float _rotY, float _rotZ, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB779C0CA917E865);
	ctx->Reset();
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMobilePhoneRotation call failed" << Log::Endl;
	}
}

EXPORT void Native_getMobilePhoneRotation(vector3_t& _rotation, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CEFB61F193070AE);
	ctx->Reset();
	alt::INative::Vector3 converted_rotation { _rotation.x, 0, _rotation.y, 0, _rotation.z };
	ctx->Push(&converted_rotation);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMobilePhoneRotation call failed" << Log::Endl;
	}
	_rotation.x = converted_rotation.x;
	_rotation.y = converted_rotation.y;
	_rotation.z = converted_rotation.z;
}

EXPORT void Native_setMobilePhonePosition(float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x693A5C6D6734085B);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMobilePhonePosition call failed" << Log::Endl;
	}
}

EXPORT void Native_getMobilePhonePosition(vector3_t& _position) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x584FDFDA48805B86);
	ctx->Reset();
	alt::INative::Vector3 converted_position { _position.x, 0, _position.y, 0, _position.z };
	ctx->Push(&converted_position);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMobilePhonePosition call failed" << Log::Endl;
	}
	_position.x = converted_position.x;
	_position.y = converted_position.y;
	_position.z = converted_position.z;
}

EXPORT void Native_scriptIsMovingMobilePhoneOffscreen(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF511F759238A5122);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scriptIsMovingMobilePhoneOffscreen call failed" << Log::Endl;
	}
}

EXPORT bool Native_canPhoneBeSeenOnScreen() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4E2813898C97A4B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canPhoneBeSeenOnScreen call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setMobilePhoneUnk(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x375A706A5C2FD084);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMobilePhoneUnk call failed" << Log::Endl;
	}
}

EXPORT void Native_cellCamMoveFinger(int32_t _direction) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95C9E72F3D7DEC9B);
	ctx->Reset();
	ctx->Push(_direction);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cellCamMoveFinger call failed" << Log::Endl;
	}
}

EXPORT void Native_cellCamSetLean(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44E44169EF70138E);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cellCamSetLean call failed" << Log::Endl;
	}
}

EXPORT void Native_cellCamActivate(bool _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDE8F069C542D126);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cellCamActivate call failed" << Log::Endl;
	}
}

EXPORT void Native_cellCamDisableThisFrame(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x015C49A93E3E086E);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cellCamDisableThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA2CCBE62CD4C91A4(int32_t& _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2CCBE62CD4C91A4);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA2CCBE62CD4C91A4 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1B0B4AEED5B9B41C(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B0B4AEED5B9B41C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1B0B4AEED5B9B41C call failed" << Log::Endl;
	}
}

EXPORT void Native__0x53F4892D18EC90A4(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53F4892D18EC90A4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x53F4892D18EC90A4 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x3117D84EFA60F77B(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3117D84EFA60F77B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3117D84EFA60F77B call failed" << Log::Endl;
	}
}

EXPORT void Native__0x15E69E2802C24B8D(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15E69E2802C24B8D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x15E69E2802C24B8D call failed" << Log::Endl;
	}
}

EXPORT void Native__0xAC2890471901861C(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC2890471901861C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAC2890471901861C call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD6ADE981781FCA09(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD6ADE981781FCA09);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD6ADE981781FCA09 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF1E22DC13F5EEBAD(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1E22DC13F5EEBAD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF1E22DC13F5EEBAD call failed" << Log::Endl;
	}
}

EXPORT void Native__0x466DA42C89865553(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x466DA42C89865553);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x466DA42C89865553 call failed" << Log::Endl;
	}
}

EXPORT bool Native_cellCamIsCharVisibleNoFaceCheck(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x439E9BC95B7E7FBE);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cellCamIsCharVisibleNoFaceCheck call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_getMobilePhoneRenderId(int32_t& _renderId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4A53E05F68B6FA1);
	ctx->Reset();
	ctx->Push(_renderId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMobilePhoneRenderId call failed" << Log::Endl;
	}
}

EXPORT void Native_networkInitializeCash(int32_t _wallet, int32_t _bank) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DA5ECD1A56CBA6D);
	ctx->Reset();
	ctx->Push(_wallet);
	ctx->Push(_bank);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkInitializeCash call failed" << Log::Endl;
	}
}

EXPORT void Native_networkDeleteCharacter(int32_t _characterSlot, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x05A50AF38947EB8D);
	ctx->Reset();
	ctx->Push(_characterSlot);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDeleteCharacter call failed" << Log::Endl;
	}
}

EXPORT void Native_networkManualDeleteCharacter(int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x821418C727FCACD7);
	ctx->Reset();
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkManualDeleteCharacter call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkGetIsHighEarner() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB2456B2040A6A67);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetIsHighEarner call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkClearCharacterWallet(int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA921DED15FDF28F5);
	ctx->Reset();
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClearCharacterWallet call failed" << Log::Endl;
	}
}

EXPORT void Native_networkGivePlayerJobshareCash(int32_t _amount, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB18DF9CB95E0105);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGivePlayerJobshareCash call failed" << Log::Endl;
	}
}

EXPORT void Native_networkReceivePlayerJobshareCash(int32_t _value, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56A3B51944C50598);
	ctx->Reset();
	ctx->Push(_value);
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkReceivePlayerJobshareCash call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkCanShareJobCash() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C2473301B1C66BA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCanShareJobCash call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkRefundCash(int32_t _index, const char* _context, const char* _reason, bool _unk) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9C812CD7C46E817);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_context);
	ctx->Push(_reason);
	ctx->Push(_unk);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRefundCash call failed" << Log::Endl;
	}
}

EXPORT void Native_networkDeductCash(int32_t _amount, const char* _p1, const char* _p2, bool _p3, bool _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x18B7AE224B087E26);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDeductCash call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkMoneyCanBet(int32_t _amount, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81404F3DC124FE5B);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkMoneyCanBet call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCanBet(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A54E33660DED67F);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCanBet call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCasinoCanUseGamblingType(int32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x158C16F5E4CF41F8);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCasinoCanUseGamblingType call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCasinoCanPurchaseChipsWithPvc() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x394DCDB9E836B7A9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCasinoCanPurchaseChipsWithPvc call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCasinoCanGamble(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF62F6D9528358FE4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCasinoCanGamble call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCasinoCanPurchaseChipsWithPvc2() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8968D4D8C6C40C11);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCasinoCanPurchaseChipsWithPvc2 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCasinoPurchaseChips(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BD101471C7F9EEC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCasinoPurchaseChips call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCasinoSellChips(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED44897CB336F480);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCasinoSellChips call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xCD0F5B5D932AE473() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD0F5B5D932AE473);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCD0F5B5D932AE473 call failed" << Log::Endl;
	}
}

EXPORT bool Native_canPayGoon(int32_t _p0, int32_t _p1, int32_t _amount, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9777734DAD16992F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_amount);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canPayGoon call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkEarnFromCashingOut(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFE9C9A1651B81E6);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromCashingOut call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromPickup(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED1517D3AF17C698);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromPickup call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromGangPickup(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA03D4ACE0A3284CE);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromGangPickup call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromAssassinateTargetKilled(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA700D8A9905F78A);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromAssassinateTargetKilled call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromArmourTruck(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF514621E8EA463D0);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromArmourTruck call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromCrateDrop(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1CC1B9EC3007A2A);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromCrateDrop call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromBetting(int32_t _amount, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x827A5BA1A44ACA6D);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromBetting call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromJob(int32_t _amount, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2CC4836834E8A98);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromJob call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromJobX2(int32_t _amount, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEBBF584665411D0);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromJobX2 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromPremiumJob(int32_t _amount, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8407624CEF2354B);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromPremiumJob call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromBendJob(int32_t _amount, const char* _heistHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61326EE6DF15B0CA);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_heistHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromBendJob call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromChallengeWin(int32_t _p0, int32_t& _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B171E6B2F64D8DF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromChallengeWin call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromBounty(int32_t _amount, int32_t& _gamerHandle, int32_t& _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x131BB5DA15453ACF);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_gamerHandle);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromBounty call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromImportExport(int32_t _amount, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF92A014A634442D6);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromImportExport call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromHoldups(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45B8154E077D9E4D);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromHoldups call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromProperty(int32_t _amount, int32_t _propertyName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x849648349D77F5C5);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_propertyName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromProperty call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromAiTargetKill(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x515B4A22E4D3C6D7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromAiTargetKill call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromNotBadsport(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4337511FA8221D36);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromNotBadsport call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromRockstar(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02CE1D6AC0FC73EA);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromRockstar call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromVehicle(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB539BD8A4C1EECF8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromPersonalVehicle(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F4D00167E41E0AD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromPersonalVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromDailyObjectives(int32_t _p0, const char* _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6EA318C91C1A8786);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromDailyObjectives call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromAmbientJob(int32_t _p0, const char* _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB6DB092FBAE29E6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromAmbientJob call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromJobBonus(int32_t _p0, int32_t& _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6816FB4416760775);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromJobBonus call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnJobBonusHeistAward(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D4FDBB035229669);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnJobBonusHeistAward call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnJobBonusFirstTimeBonus(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11B0A20C493F7E36);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnJobBonusFirstTimeBonus call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnGoon(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCDA1C62BE2777802);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnGoon call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnBoss(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x08B0CA7A6AB3AC32);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnBoss call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnBossAgency(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CB1BE0633C024A8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnBossAgency call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromWarehouse(int32_t _amount, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E4ADAFF1830F146);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromWarehouse call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromContraband(int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xECA658CE2A4E5A72);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromContraband call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromDestroyingContraband(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84C0116D012E8FC2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromDestroyingContraband call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6B7E4FB50D5F3D65(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B7E4FB50D5F3D65);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6B7E4FB50D5F3D65 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x31BA138F6304FB9F(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31BA138F6304FB9F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x31BA138F6304FB9F call failed" << Log::Endl;
	}
}

EXPORT void Native__0x55A1E095DB052FA5(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55A1E095DB052FA5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x55A1E095DB052FA5 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromBusinessProduct(int32_t _amount, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8586789730B10CAF);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromBusinessProduct call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromVehicleExport(int32_t _amount, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDEAD9A91EC768B3);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromVehicleExport call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromSmuggling(int32_t _amount, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEE612F2D71B0308);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromSmuggling call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnBountyHunterReward(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6B170F9A02E9E87);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnBountyHunterReward call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromBusinessBattle(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42FCE14F50F27291);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromBusinessBattle call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromClubManagementParticipation(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA75EAC69F59E96E7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromClubManagementParticipation call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromFmbbPhonecallMission(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5156361F26E2212);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromFmbbPhonecallMission call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromBusinessHubSell(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B39CF0D53F1C883);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromBusinessHubSell call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromFmbbBossWork(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1FDA0AA679C9919B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromFmbbBossWork call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFmbbWageBonus(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFFFBA1B1F7C0B6F4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFmbbWageBonus call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkCanSpendMoney(int32_t _p0, bool _p1, bool _p2, bool _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB3CAA6B422164DA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCanSpendMoney call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCanSpendMoney2(int32_t _p0, bool _p1, bool _p2, bool _p3, int32_t& _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7303E27CC6532080);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCanSpendMoney2 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkBuyItem(int32_t _amount, int32_t _item, int32_t _p2, int32_t _p3, bool _p4, const char* _item_name, int32_t _p6, int32_t _p7, int32_t _p8, bool _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0077C797F66A355);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_item);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_item_name);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkBuyItem call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentTaxi(int32_t _amount, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17C3A7D31EAE39F9);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentTaxi call failed" << Log::Endl;
	}
}

EXPORT void Native_networkPayEmployeeWage(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FD5ED82CBBE9989);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkPayEmployeeWage call failed" << Log::Endl;
	}
}

EXPORT void Native_networkPayUtilityBill(int32_t _amount, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFE08B35EC0C9EAE);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkPayUtilityBill call failed" << Log::Endl;
	}
}

EXPORT void Native_networkPayMatchEntryFee(int32_t _amount, const char* _matchId, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9346E14F2AF74D46);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_matchId);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkPayMatchEntryFee call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBetting(int32_t _amount, int32_t _p1, const char* _matchId, bool _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C436FD11FFA692F);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_matchId);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBetting call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentWager(int32_t _p0, int32_t _p1, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD99DB210089617FE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentWager call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentInStripclub(int32_t _p0, bool _p1, int32_t _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE99784E4467689C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentInStripclub call failed" << Log::Endl;
	}
}

EXPORT void Native_networkBuyHealthcare(int32_t _cost, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9B067E55253E3DD);
	ctx->Reset();
	ctx->Push(_cost);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkBuyHealthcare call failed" << Log::Endl;
	}
}

EXPORT void Native_networkBuyAirstrike(int32_t _cost, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x763B4BD305338F19);
	ctx->Reset();
	ctx->Push(_cost);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkBuyAirstrike call failed" << Log::Endl;
	}
}

EXPORT void Native_networkBuyBackupGang(int32_t _p0, int32_t _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3EDDAA42411D3B9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkBuyBackupGang call failed" << Log::Endl;
	}
}

EXPORT void Native_networkBuyHeliStrike(int32_t _cost, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81AA4610E3FD3A69);
	ctx->Reset();
	ctx->Push(_cost);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkBuyHeliStrike call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentAmmoDrop(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB162DC95C0A3317B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentAmmoDrop call failed" << Log::Endl;
	}
}

EXPORT void Native_networkBuyBounty(int32_t _amount, int32_t _victim, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B718E197453F2D9);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_victim);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkBuyBounty call failed" << Log::Endl;
	}
}

EXPORT void Native_networkBuyProperty(int32_t _cost, int32_t _propertyName, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x650A08A280870AF6);
	ctx->Reset();
	ctx->Push(_cost);
	ctx->Push(_propertyName);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkBuyProperty call failed" << Log::Endl;
	}
}

EXPORT void Native_networkBuySmokes(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75AF80E61248EEBD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkBuySmokes call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentHeliPickup(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7BF1D73DB2ECA492);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentHeliPickup call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBoatPickup(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x524EE43A37232C00);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBoatPickup call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBullShark(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6DD8458CE24012C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBullShark call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentCashDrop(int32_t _amount, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x289016EC778D60E0);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentCashDrop call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentHireMugger(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE404BFB981665BF0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentHireMugger call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentRobbedByMugger(int32_t _amount, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x995A65F15F581359);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentRobbedByMugger call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentHireMercenary(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7B80E2BF9D80BD6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentHireMercenary call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBuyWantedlevel(int32_t _p0, int32_t& _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1B13771A843C4F6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBuyWantedlevel call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBuyOfftheradar(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA628A745E2275C5D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBuyOfftheradar call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBuyRevealPlayers(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E176F1B18BC0637);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBuyRevealPlayers call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentCarwash(int32_t _p0, int32_t _p1, int32_t _p2, bool _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC03C719DB2F4306);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentCarwash call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentCinema(int32_t _p0, int32_t _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B38ECB05A63A685);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentCinema call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentTelescope(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FE61782AD94CC09);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentTelescope call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentHoldups(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9B86B9872039763);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentHoldups call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBuyPassiveMode(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D3A430D1A809179);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBuyPassiveMode call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBankInterest(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA230C9682556CF1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBankInterest call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentProstitutes(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB21B89501CFAC79E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentProstitutes call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentArrestBail(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x812F5488B1B2A299);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentArrestBail call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentPayVehicleInsurancePremium(int32_t _amount, int32_t _vehicleModel, int32_t& _gamerHandle, bool _notBankrupt, bool _hasTheMoney) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FF28D88C766E3E8);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_vehicleModel);
	ctx->Push(_gamerHandle);
	ctx->Push(_notBankrupt);
	ctx->Push(_hasTheMoney);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentPayVehicleInsurancePremium call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentCallPlayer(int32_t _p0, int32_t& _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xACDE7185B374177C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentCallPlayer call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBounty(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29B260B84947DFCC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBounty call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentFromRockstar(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A445B64ED7ABEB5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentFromRockstar call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x9B5016A6433A68C5() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B5016A6433A68C5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9B5016A6433A68C5 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT const char* Native_processCashGift(int32_t& _p0, int32_t& _p1, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20194D48EAEC9A41);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native processCashGift call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT void Native_networkSpentPlayerHealthcare(int32_t _p0, int32_t _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C99101F7FCE2EE5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentPlayerHealthcare call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentNoCops(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5BB406F4E04019F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentNoCops call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentRequestJob(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8204DA7934DF3155);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentRequestJob call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentRequestHeist(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D26502BB97BFE62);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentRequestHeist call failed" << Log::Endl;
	}
}

EXPORT void Native_networkBuyFairgroundRide(int32_t _amount, int32_t _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A7B3952DD64D2B5);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkBuyFairgroundRide call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x7C4FCCD2E4DEB394() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C4FCCD2E4DEB394);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7C4FCCD2E4DEB394 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkSpentJobSkip(int32_t _amount, const char* _matchId, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28F174A67B8D0C2F);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_matchId);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentJobSkip call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkSpentBoss(int32_t _amount, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFFBE02CD385356BD);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBoss call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkSpentPayGoon(int32_t _p0, int32_t _p1, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x08A1B82B91900682);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentPayGoon call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentPayBoss(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBC966A01C02BCA7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentPayBoss call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentMoveYacht(int32_t _amount, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7DF4E0545DFB56E);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentMoveYacht call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentRenameOrganization(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC4EE00A7B3BFB76);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentRenameOrganization call failed" << Log::Endl;
	}
}

EXPORT void Native_networkBuyContraband(int32_t _p0, int32_t _p1, int32_t _p2, bool _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30FD873ECE50E9F6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkBuyContraband call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentVipUtilityCharges(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5182A339A3474510);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentVipUtilityCharges call failed" << Log::Endl;
	}
}

EXPORT void Native__0x112209CE0290C03A(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x112209CE0290C03A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x112209CE0290C03A call failed" << Log::Endl;
	}
}

EXPORT void Native__0xED5FD7AF10F5E262(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED5FD7AF10F5E262);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xED5FD7AF10F5E262 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0D30EB83668E63C5(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D30EB83668E63C5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0D30EB83668E63C5 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentPaServiceDancer(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB49ECA122467D05F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentPaServiceDancer call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE23ADC6FCB1F29AE(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE23ADC6FCB1F29AE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE23ADC6FCB1F29AE call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentPaServiceHeliPickup(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0FE8E1FCD2B86B33);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentPaServiceHeliPickup call failed" << Log::Endl;
	}
}

EXPORT void Native__0x69EF772B192614C1(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69EF772B192614C1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x69EF772B192614C1 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8E243837643D9583(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E243837643D9583);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8E243837643D9583 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBD0EFB25CCA8F97A(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD0EFB25CCA8F97A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBD0EFB25CCA8F97A call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA95F667A755725DA(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA95F667A755725DA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA95F667A755725DA call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentPurchaseWarehouse(int32_t _amount, int32_t& _data, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33981D6804E62F49);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_data);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentPurchaseWarehouse call failed" << Log::Endl;
	}
}

EXPORT void Native__0x4128464231E3CA0B(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4128464231E3CA0B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4128464231E3CA0B call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2FAB6614CE22E196(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FAB6614CE22E196);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2FAB6614CE22E196 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentOrderWarehouseVehicle(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x05F04155A226FBBF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentOrderWarehouseVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentOrderBodyguardVehicle(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8B0B270B6E7C76E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentOrderBodyguardVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentJukebox(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BCDE0F640C773D2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentJukebox call failed" << Log::Endl;
	}
}

EXPORT void Native__0x998E18CEB44487FC(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x998E18CEB44487FC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x998E18CEB44487FC call failed" << Log::Endl;
	}
}

EXPORT void Native__0xFA07759E6FDDD7CF(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA07759E6FDDD7CF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFA07759E6FDDD7CF call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6FD97159FE3C971A(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FD97159FE3C971A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6FD97159FE3C971A call failed" << Log::Endl;
	}
}

EXPORT void Native__0x675D19C6067CAE08(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x675D19C6067CAE08);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x675D19C6067CAE08 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA51B086B0B2C0F7A(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA51B086B0B2C0F7A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA51B086B0B2C0F7A call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBaService(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7CCCBA28C4ECAF0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBaService call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBusiness(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0035BB914316F1E3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBusiness call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5F456788B05FAEAC(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F456788B05FAEAC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5F456788B05FAEAC call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentVehicleExportMods(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA75CCF58A60A5FD1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentVehicleExportMods call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB4C2EC463672474E(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4C2EC463672474E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB4C2EC463672474E call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2AFC2D19B50797F2(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2AFC2D19B50797F2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2AFC2D19B50797F2 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentImportExportRepair(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1952F3773BA18FE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentImportExportRepair call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentPurchaseHangar(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCB339CC970452DA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentPurchaseHangar call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentUpgradeHangar(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x615EB504B0788DAF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentUpgradeHangar call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentHangarUtilityCharges(int32_t _amount, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB18AC2ECBB15CB6A);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentHangarUtilityCharges call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentHangarStaffCharges(int32_t _amount, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1F1346FD57685D7);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentHangarStaffCharges call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBuyTruck(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC272C0AE01B4BD8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBuyTruck call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentUpgradeTruck(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x365E877C61D6988B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentUpgradeTruck call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBuyBunker(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12D148D26538D0F9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBuyBunker call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentUpgradeBunker(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C82D21A77C22D49);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentUpgradeBunker call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromSellBunker(int32_t _amount, int32_t _bunkerHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9251B6ABF2D0A5B4);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_bunkerHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromSellBunker call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBallisticEquipment(int32_t _amount, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D97630A8A0EF123);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBallisticEquipment call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromRdrBonus(int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A5349B773584675);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromRdrBonus call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromWagePayment(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35F8DA0E8A31EF1B);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromWagePayment call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromWagePaymentBonus(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x005ACA7100BD101D);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromWagePaymentBonus call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBuyBase(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4EA3F425C7744D21);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBuyBase call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentUpgradeBase(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DD3F33A5D55EA6F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentUpgradeBase call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBuyTiltrotor(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CCE73BC7A11E885);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBuyTiltrotor call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentUpgradeTiltrotor(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x165E135D6DFA2907);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentUpgradeTiltrotor call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentEmployAssassins(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BBBD92186E1F1C5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentEmployAssassins call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentGangopsCannon(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x771ADB0E7635B7BF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentGangopsCannon call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentGangopsStartMission(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA947AE8880D5C18);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentGangopsStartMission call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentCasinoHeistSkipMission(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x487009DD91D93429);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentCasinoHeistSkipMission call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromSellBase(int32_t _amount, int32_t _baseNameHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E1E2FF3F4EC11AA);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_baseNameHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromSellBase call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromTargetRefund(int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B669CF2299A271F);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromTargetRefund call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromGangopsWages(int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DCB19ABAB0380A8);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromGangopsWages call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromGangopsWagesBonus(int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15BB2A5C757EB91F);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromGangopsWagesBonus call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromDarChallenge(int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCAC672087B4A24AB);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromDarChallenge call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromDoomsdayFinaleBonus(int32_t _amount, int32_t _vehicleHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x128A747F4A230952);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_vehicleHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromDoomsdayFinaleBonus call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromGangopsAwards(int32_t _amount, const char* _unk, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9A31475F530DFDA);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_unk);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromGangopsAwards call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromGangopsElite(int32_t _amount, const char* _unk, int32_t _actIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2597A0D4A4FC2C77);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_unk);
	ctx->Push(_actIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromGangopsElite call failed" << Log::Endl;
	}
}

EXPORT void Native_networkRivalDeliveryCompleted(int32_t _earnedMoney) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B882107C23A9022);
	ctx->Reset();
	ctx->Push(_earnedMoney);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRivalDeliveryCompleted call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentGangopsStartStrand(int32_t _type, int32_t _amount, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA19EC0786E326E06);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_amount);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentGangopsStartStrand call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentGangopsTripSkip(int32_t _amount, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5ECE6FD7B4EC8D6A);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentGangopsTripSkip call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromGangopsJobsPrepParticipation(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED26584F6BDCBBFD);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromGangopsJobsPrepParticipation call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromGangopsJobsSetup(int32_t _amount, const char* _unk) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9160796D47A2CF8);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_unk);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromGangopsJobsSetup call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromGangopsJobsFinale(int32_t _amount, const char* _unk) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C121FC9545E0D52);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_unk);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromGangopsJobsFinale call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2A7CEC72C3443BCC(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A7CEC72C3443BCC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2A7CEC72C3443BCC call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE0F82D68C7039158(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0F82D68C7039158);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE0F82D68C7039158 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB4DEAE67F35E2ACD(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4DEAE67F35E2ACD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB4DEAE67F35E2ACD call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromBbEventBonus(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDD8D2440DAF1590);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromBbEventBonus call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2A93C46AAB1EACC9(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A93C46AAB1EACC9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2A93C46AAB1EACC9 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x226C284C830D0CA8(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x226C284C830D0CA8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x226C284C830D0CA8 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromHackerTruckMission(int32_t _p0, int32_t _amount, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8815FE993896AD3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_amount);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromHackerTruckMission call failed" << Log::Endl;
	}
}

EXPORT void Native__0xED76D195E6E3BF7F(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED76D195E6E3BF7F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xED76D195E6E3BF7F call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1DC9B749E7AE282B(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DC9B749E7AE282B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1DC9B749E7AE282B call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC6E74CF8C884C880(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6E74CF8C884C880);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC6E74CF8C884C880 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x65482BFD0923C8A1(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65482BFD0923C8A1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x65482BFD0923C8A1 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentRdrhatchetBonus(int32_t _amount, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE284D46FFDB82E36);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentRdrhatchetBonus call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentNightclubEntryFee(int32_t _player, int32_t _amount, int32_t _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x876056684281655D);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentNightclubEntryFee call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentNightclubBarDrink(int32_t _amount, int32_t _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD21B016E4289465);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentNightclubBarDrink call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBountyHunterMission(int32_t _amount, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1BEA0CD93470BB1F);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBountyHunterMission call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentRehireDj(int32_t _amount, int32_t _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6C8A544E4CF14FC);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentRehireDj call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentArenaJoinSpectator(int32_t _amount, int32_t _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14EAEA58F93B55AF);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentArenaJoinSpectator call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromArenaSkillLevelProgression(int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE08256F972C7BB2C);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromArenaSkillLevelProgression call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromArenaCareerProgression(int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F99F70C61F14619);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromArenaCareerProgression call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentMakeItRain(int32_t _amount, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE5F5A060439C2F5D);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentMakeItRain call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBuyArena(int32_t _amount, bool _p1, bool _p2, const char* _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40D5DA9550B7CB46);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBuyArena call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentUpgradeArena(int32_t _amount, bool _p1, bool _p2, const char* _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x037ABB06825D7AB1);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentUpgradeArena call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentArenaSpectatorBox(int32_t _amount, int32_t _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7049BF858601DC0F);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentArenaSpectatorBox call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentSpinTheWheelPayment(int32_t _amount, int32_t _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A5BD1D0000B339C);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentSpinTheWheelPayment call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromSpinTheWheelCash(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x676C48776CACBB5A);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromSpinTheWheelCash call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentArenaPremium(int32_t _amount, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x619496D837EFD920);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentArenaPremium call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromArenaWar(int32_t _amount, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x631F1CB8FB4130AA);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromArenaWar call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromAssassinateTargetKilled2(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E7AE8AABE8B7C0D);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromAssassinateTargetKilled2 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromBbEventCargo(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA82959062361B259);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromBbEventCargo call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromRcTimeTrial(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFF49EE984E7AAE8);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromRcTimeTrial call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromDailyObjectiveEvent(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5128DF14A5BB86FC);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromDailyObjectiveEvent call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentCasinoMembership(int32_t _amount, bool _p1, bool _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFBBE0570EDF39D46);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentCasinoMembership call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBuyCasino(int32_t _amount, bool _p1, bool _p2, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34A6FC4D06C4DA0F);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBuyCasino call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentUpgradeCasino(int32_t _amount, bool _p1, bool _p2, int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4740D62BC1B4EBEA);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentUpgradeCasino call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentCasinoGeneric(int32_t _amount, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88BF9B612B84D3C3);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentCasinoGeneric call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromTimeTrialWin(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0819DB99FD2FBBD8);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromTimeTrialWin call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromCollectablesActionFigures(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5517F90043466049);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromCollectablesActionFigures call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromCompleteCollection(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83AD64F53F4E9483);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromCompleteCollection call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromSellingVehicle(int32_t _amount, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BCB27A057DF7B7F);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromSellingVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromCasinoMissionReward(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x566FD402B25787DE);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromCasinoMissionReward call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromCasinoStoryMissionReward(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC95ED552157E092);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromCasinoStoryMissionReward call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromCasinoMissionParticipation(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x09E8F18641BE2575);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromCasinoMissionParticipation call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromCasinoAward(int32_t _amount, int32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x973A9781A34F8DEB);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromCasinoAward call failed" << Log::Endl;
	}
}

EXPORT void Native__0x870289A558348378(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x870289A558348378);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x870289A558348378 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5574637681911FDA(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5574637681911FDA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5574637681911FDA call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentCasinoHeist(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9, int32_t _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD30E8392F407C328);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentCasinoHeist call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB5B58E24868CB09E(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5B58E24868CB09E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB5B58E24868CB09E call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentArcadeGame(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAD3D81F2C3A1458);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentArcadeGame call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentArcadeGeneric(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43AA7FAC4E6D6687);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentArcadeGeneric call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnCasinoHeist(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72E7C7B9615FA3C3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnCasinoHeist call failed" << Log::Endl;
	}
}

EXPORT void Native__0x4C3B75694F7E0D9C(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C3B75694F7E0D9C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4C3B75694F7E0D9C call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD29334ED1A256DBF(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD29334ED1A256DBF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD29334ED1A256DBF call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA95CFB4E02390842(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA95CFB4E02390842);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA95CFB4E02390842 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0DD362F14F18942A(int32_t _amount, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0DD362F14F18942A);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0DD362F14F18942A call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnCasinoHeistBonus(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3EC7471E6909798A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnCasinoHeistBonus call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromCollectionItem(int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84FF63BD4966F33D);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromCollectionItem call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnCollectableCompletedCollection(int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C9B198AF5A54FA6);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnCollectableCompletedCollection call failed" << Log::Endl;
	}
}

EXPORT void Native__0xDE68E30D89F97132(int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE68E30D89F97132);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDE68E30D89F97132 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE2E244AB823B4483(int32_t _amount, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2E244AB823B4483);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE2E244AB823B4483 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBeachPartyGeneric(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54ABA22FA6371249);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBeachPartyGeneric call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentSubmarine(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C8BC1488527AAAB);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentSubmarine call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentCasinoClubGeneric(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC991C255AA6D90B2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentCasinoClubGeneric call failed" << Log::Endl;
	}
}

EXPORT void Native__0x90CD7C6871FBF1B4(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90CD7C6871FBF1B4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x90CD7C6871FBF1B4 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentUpgradeSub(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89049A84065CE68E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentUpgradeSub call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentIslandHeist(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE86689E5F82DE429);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentIslandHeist call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnIslandHeist(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD21D111C46BA9F15);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnIslandHeist call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA51338E0DCCD4065(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA51338E0DCCD4065);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA51338E0DCCD4065 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE2BB399D90942091(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2BB399D90942091);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE2BB399D90942091 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentCarclubMembership(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1464E17207CD36E2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentCarclubMembership call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentCarclub(int32_t _p0, bool _p1, bool _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x925227803A0EAA1B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentCarclub call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentAutoshopModifications(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BEA350D7C48061B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentAutoshopModifications call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentCarclubTakeover(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1E46824E6FB92B5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentCarclubTakeover call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentBuyAutoshop(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEB7E5D1FEB20869);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentBuyAutoshop call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentUpgradeAutoshop(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD829AA198FDC46C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentUpgradeAutoshop call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromAutoshopBusiness(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36A7FD5A7194B03E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromAutoshopBusiness call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromAutoshopIncome(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC66D1CF99ED7FE25);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromAutoshopIncome call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromCarclubMembership(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC6227792A188E2E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromCarclubMembership call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromVehicleAutoshop(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x533073E8A596008C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromVehicleAutoshop call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromVehicleAutoshopBonus(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE65AFE7308E32B2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromVehicleAutoshopBonus call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromTunerAward(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB846F547D3792DF6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromTunerAward call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromTunerFinale(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCB266247193AC61);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromTunerFinale call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEarnFromUpgradeAutoshopLocation(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC10322A8D3E061EE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEarnFromUpgradeAutoshopLocation call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentImAbility(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93AA4165CB67E925);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentImAbility call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSpentFromBank(int32_t _p0, int32_t _p1, int32_t _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9F7A469460E7A4A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSpentFromBank call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_networkGetVcBankBalance() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76EF28DA05EA395A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetVcBankBalance call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetVcWalletBalance(int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA40F9C2623F6A8B5);
	ctx->Reset();
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetVcWalletBalance call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetVcBalance() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CBAD97E059E1B94);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetVcBalance call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetEvcBalance() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D1E75F91C07DEE5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetEvcBalance call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetPvcBalance() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F54F3B6C202FB4E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPvcBalance call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT const char* Native_networkGetStringWalletBalance(int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9B10B529DCFB33B);
	ctx->Reset();
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetStringWalletBalance call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_networkGetStringBankBalance() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6FA3979BED01B81);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetStringBankBalance call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_networkGetStringBankWalletBalance() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x700AF71AE615E6DD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetStringBankWalletBalance call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT bool Native_networkGetVcWalletBalanceIsNotLessThan(int32_t _amount, int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED5AB8860415BABA);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetVcWalletBalanceIsNotLessThan call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkGetVcBankBalanceIsNotLessThan(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA31FD6A0865B6D14);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetVcBankBalanceIsNotLessThan call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkGetVcBankWalletBalanceIsNotLessThan(int32_t _amount, int32_t _characterSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC18531D7019A535);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_characterSlot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetVcBankWalletBalanceIsNotLessThan call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetPvcTransferBalance() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13A8DE2FD77D04F3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPvcTransferBalance call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x08E8EEADFD0DC4A0(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x08E8EEADFD0DC4A0);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x08E8EEADFD0DC4A0 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCanReceivePlayerCash(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D17BE59D2123284);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCanReceivePlayerCash call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetRemainingTransferBalance() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA560AC9EEB1E19B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetRemainingTransferBalance call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_withdrawVc(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF70EFA14FE091429);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native withdrawVc call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_depositVc(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE260E0BB9CD995AC);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native depositVc call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xE154B48B68EF72BC(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE154B48B68EF72BC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE154B48B68EF72BC call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x6FCF8DDEA146C45B(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FCF8DDEA146C45B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6FCF8DDEA146C45B call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverUseServerTransactions() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D2708796355B20B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverUseServerTransactions call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverCatalogItemExists(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD4D7EAF8A30F637);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverCatalogItemExists call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverCatalogItemExistsHash(int32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x247F0F73A182EA0B);
	ctx->Reset();
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverCatalogItemExistsHash call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_netGameserverGetPrice(int32_t _itemHash, int32_t _categoryHash, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC27009422FCCA88D);
	ctx->Reset();
	ctx->Push(_itemHash);
	ctx->Push(_categoryHash);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverGetPrice call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_netGameserverCatalogIsReady() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C4487461E9B0DCB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverCatalogIsReady call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverIsCatalogValid() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B949A1E6AEC8F6A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverIsCatalogValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x85F6C9ABA1DE2BCF() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85F6C9ABA1DE2BCF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x85F6C9ABA1DE2BCF call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x357B152EF96C30B6() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x357B152EF96C30B6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x357B152EF96C30B6 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_netGameserverGetCatalogState(int32_t& _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF38DAFBB49EDE5E);
	ctx->Reset();
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverGetCatalogState call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xE3E5A7C64CA2C6ED() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3E5A7C64CA2C6ED);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE3E5A7C64CA2C6ED call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x0395CB47B022E62C(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0395CB47B022E62C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0395CB47B022E62C call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverStartSession(int32_t _charSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA135AC892A58FC07);
	ctx->Reset();
	ctx->Push(_charSlot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverStartSession call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x72EB7BA9B69BF6AB() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72EB7BA9B69BF6AB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x72EB7BA9B69BF6AB call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x170910093218C8B9(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x170910093218C8B9);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x170910093218C8B9 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xC13C38E47EA5DF31(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC13C38E47EA5DF31);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC13C38E47EA5DF31 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverIsSessionValid(int32_t _charSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB24F0944DA203D9E);
	ctx->Reset();
	ctx->Push(_charSlot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverIsSessionValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x74A0FD0688F1EE45(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74A0FD0688F1EE45);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x74A0FD0688F1EE45 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_netGameserverSessionApplyReceivedData(int32_t _charSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F41D51BA3BCD1F1);
	ctx->Reset();
	ctx->Push(_charSlot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverSessionApplyReceivedData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverIsSessionRefreshPending() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x810E8431C0614BF9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverIsSessionRefreshPending call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverGetBalance(bool _inventory, bool _playerbalance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35A1B3E1D1315CFA);
	ctx->Reset();
	ctx->Push(_inventory);
	ctx->Push(_playerbalance);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverGetBalance call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x613F125BA3BD2EB9() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x613F125BA3BD2EB9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x613F125BA3BD2EB9 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverGetTransactionManagerData(int32_t& _p0, bool& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x897433D292B44130);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverGetTransactionManagerData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverBasketStart(int32_t& _transactionId, int32_t _categoryHash, int32_t _actionHash, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x279F08B1A4B29B7E);
	ctx->Reset();
	ctx->Push(_transactionId);
	ctx->Push(_categoryHash);
	ctx->Push(_actionHash);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverBasketStart call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverBasketDelete() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA336E7F40C0A0D0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverBasketDelete call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverBasketEnd() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA65568121DF2EA26);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverBasketEnd call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverBasketAddItem(int32_t& _itemData, int32_t _quantity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF30980718C8ED876);
	ctx->Reset();
	ctx->Push(_itemData);
	ctx->Push(_quantity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverBasketAddItem call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverBasketIsFull() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27F76CC6C55AD30E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverBasketIsFull call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverBasketApplyServerData(int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1A0450ED46A7812);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverBasketApplyServerData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverCheckoutStart(int32_t _transactionId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39BE7CEA8D9CC8E6);
	ctx->Reset();
	ctx->Push(_transactionId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverCheckoutStart call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverBeginService(int32_t& _transactionId, int32_t _categoryHash, int32_t _itemHash, int32_t _actionTypeHash, int32_t _value, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C5FD37B5499582E);
	ctx->Reset();
	ctx->Push(_transactionId);
	ctx->Push(_categoryHash);
	ctx->Push(_itemHash);
	ctx->Push(_actionTypeHash);
	ctx->Push(_value);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverBeginService call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverEndService(int32_t _transactionId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2A99A9B524BEFFF);
	ctx->Reset();
	ctx->Push(_transactionId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverEndService call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverDeleteCharacterSlot(int32_t _slot, bool _transfer, int32_t _reason) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51F1A8E48C3D2F6D);
	ctx->Reset();
	ctx->Push(_slot);
	ctx->Push(_transfer);
	ctx->Push(_reason);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverDeleteCharacterSlot call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_netGameserverDeleteCharacterSlotGetStatus() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A6D923DFFC9BD89);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverDeleteCharacterSlotGetStatus call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_netGameserverDeleteSetTelemetryNonceSeed() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x112CEF1615A1139F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverDeleteSetTelemetryNonceSeed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverTransferBankToWallet(int32_t _charSlot, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD47A2C1BA117471D);
	ctx->Reset();
	ctx->Push(_charSlot);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverTransferBankToWallet call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverTransferWalletToBank(int32_t _charSlot, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2F7FE5309181C7D);
	ctx->Reset();
	ctx->Push(_charSlot);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverTransferWalletToBank call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_netGameserverTransferCashGetStatus() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23789E777D14CE44);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverTransferCashGetStatus call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_netGameserverTransferCashGetStatus2() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x350AA5EBC03D3BD2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverTransferCashGetStatus2 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_netGameserverTransferCashSetTelemetryNonceSeed() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x498C1E05CE5F7877);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverTransferCashSetTelemetryNonceSeed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_netGameserverSetTelemetryNonceSeed(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9507D4271988E1AE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netGameserverSetTelemetryNonceSeed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT const char* Native_getOnlineVersion() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCA9373EF340AC0A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getOnlineVersion call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT bool Native_networkIsSignedIn() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x054354A99211EB96);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsSignedIn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsSignedOnline() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1077788E268557C2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsSignedOnline call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xBD545D44CCE70597() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD545D44CCE70597);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBD545D44CCE70597 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xEBCAB9E5048434F4() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBCAB9E5048434F4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEBCAB9E5048434F4 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x74FB3E29E6D10FA9() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74FB3E29E6D10FA9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x74FB3E29E6D10FA9 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x7808619F31FF22DB() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7808619F31FF22DB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7808619F31FF22DB call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xA0FA4EC6A05DA44E() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0FA4EC6A05DA44E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA0FA4EC6A05DA44E call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkHasValidRosCredentials() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85443FF4C328F53B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasValidRosCredentials call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x8D11E61A4ABF49CC() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D11E61A4ABF49CC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8D11E61A4ABF49CC call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsCloudAvailable() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A4CF4F48AD77302);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsCloudAvailable call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHasSocialClubAccount() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67A5589628E0CFF6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasSocialClubAccount call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkAreSocialClubPoliciesCurrent() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA9775570DB788CF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAreSocialClubPoliciesCurrent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsHost() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DB296B814EDDA07);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsHost call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x4237E822315D8BA9() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4237E822315D8BA9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4237E822315D8BA9 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHaveOnlinePrivileges() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25CB5A9F37BFD063);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHaveOnlinePrivileges call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHasAgeRestrictedProfile() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1353F87E89946207);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasAgeRestrictedProfile call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHaveUserContentPrivileges(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72D918C99BCACC54);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHaveUserContentPrivileges call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHaveCommunicationPrivileges(int32_t _p0, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAEEF48CDF5B6CE7C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHaveCommunicationPrivileges call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x78321BEA235FD8CD(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78321BEA235FD8CD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x78321BEA235FD8CD call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCheckUserContentPrivileges(int32_t _p0, int32_t _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x595F028698072DD9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCheckUserContentPrivileges call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCheckCommunicationPrivileges(int32_t _p0, int32_t _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83F28CE49FBBFFBA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCheckCommunicationPrivileges call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x07EAB372C8841D99(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07EAB372C8841D99);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x07EAB372C8841D99 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x906CA41A4B74ECA4() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x906CA41A4B74ECA4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x906CA41A4B74ECA4 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x023ACAB2DC9DC4A4() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x023ACAB2DC9DC4A4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x023ACAB2DC9DC4A4 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkHasSocialNetworkingSharingPriv() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76BF03FADBF154F5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasSocialNetworkingSharingPriv call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetAgeGroup() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9614B71F8ADB982B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetAgeGroup call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x0CF6CC51AA18F0F8(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CF6CC51AA18F0F8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0CF6CC51AA18F0F8 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x64E5C4CC82847B73() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x64E5C4CC82847B73);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x64E5C4CC82847B73 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x1F7BC3539F9E0224() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F7BC3539F9E0224);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1F7BC3539F9E0224 call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkHaveOnlinePrivilege2() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EA784D197556507);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHaveOnlinePrivilege2 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xA8ACB6459542A8C8() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8ACB6459542A8C8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA8ACB6459542A8C8 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x83FE8D7229593017() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83FE8D7229593017);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x83FE8D7229593017 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x53C10C8BD774F2C9() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53C10C8BD774F2C9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x53C10C8BD774F2C9 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkCanBail() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x580CE4438479CC61);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCanBail call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkBail(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95914459A87EBA28);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkBail call failed" << Log::Endl;
	}
}

EXPORT void Native__0x283B6062A2C01E9B() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x283B6062A2C01E9B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x283B6062A2C01E9B call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x8B4FFC790CA131EF(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B4FFC790CA131EF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8B4FFC790CA131EF call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkTransitionTrack(int32_t _hash, int32_t _p1, int32_t _p2, int32_t _state, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3BFED92026A2AAD);
	ctx->Reset();
	ctx->Push(_hash);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_state);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkTransitionTrack call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x04918A41BC9B8157(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04918A41BC9B8157);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x04918A41BC9B8157 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkCanAccessMultiplayer(int32_t& _loadingState) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF50DA1A3F8B1BA4);
	ctx->Reset();
	ctx->Push(_loadingState);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCanAccessMultiplayer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsMultiplayerDisabled() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9747292807126EDA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsMultiplayerDisabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCanEnterMultiplayer() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E782A910C362C25);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCanEnterMultiplayer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkSessionEnter(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _maxPlayers, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x330ED4D05491934F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_maxPlayers);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionEnter call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkSessionFriendMatchmaking(int32_t _p0, int32_t _p1, int32_t _maxPlayers, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CFC76E0D087C994);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_maxPlayers);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionFriendMatchmaking call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkSessionCrewMatchmaking(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _maxPlayers, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94BC51E9449D917F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_maxPlayers);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionCrewMatchmaking call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkSessionActivityQuickmatch(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE3E347A87ACEB82);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionActivityQuickmatch call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkSessionHost(int32_t _p0, int32_t _maxPlayers, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F3D4ED9BEE4E61D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_maxPlayers);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionHost call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkSessionHostClosed(int32_t _p0, int32_t _maxPlayers) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED34C0C02C098BB7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_maxPlayers);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionHostClosed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkSessionHostFriendsOnly(int32_t _p0, int32_t _maxPlayers) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9CFD27A5D578D83);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_maxPlayers);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionHostFriendsOnly call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkSessionIsClosedFriends() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFBCFA2EA2E206890);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionIsClosedFriends call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkSessionIsClosedCrew() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74732C6CA90DA2B4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionIsClosedCrew call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkSessionIsSolo() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3929C2379B60CCE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionIsSolo call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkSessionIsPrivate() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEF70AA5B3F89BA1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionIsPrivate call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkSessionEnd(bool _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA02E59562D711006);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionEnd call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xB9351A07A0D458B1(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9351A07A0D458B1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB9351A07A0D458B1 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkSessionKickPlayer(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA8904DC5F304220);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionKickPlayer call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkSessionGetKickVote(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD6D09A6F32F49EF1);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionGetKickVote call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x041C7F2A6C9894E6(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x041C7F2A6C9894E6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x041C7F2A6C9894E6 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkJoinPreviouslyFailedSession() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59DF79317F85A7E0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkJoinPreviouslyFailedSession call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkJoinPreviouslyFailedTransition() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFFE1E5B792D92B34);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkJoinPreviouslyFailedTransition call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkSessionSetMatchmakingGroup(int32_t _matchmakingGroup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49EC8030F5015F8B);
	ctx->Reset();
	ctx->Push(_matchmakingGroup);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionSetMatchmakingGroup call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSessionSetMatchmakingGroupMax(int32_t _playerType, int32_t _playerCount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B6A4DD0AF9CE215);
	ctx->Reset();
	ctx->Push(_playerType);
	ctx->Push(_playerCount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionSetMatchmakingGroupMax call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_networkSessionGetMatchmakingGroupFree(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56CE820830EF040B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionGetMatchmakingGroupFree call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkSessionAddActiveMatchmakingGroup(int32_t _groupId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCAE55F48D3D7875C);
	ctx->Reset();
	ctx->Push(_groupId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionAddActiveMatchmakingGroup call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF49ABC20D8552257(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF49ABC20D8552257);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF49ABC20D8552257 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x4811BBAC21C5FCD5(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4811BBAC21C5FCD5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4811BBAC21C5FCD5 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5539C3EBF104A53A(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5539C3EBF104A53A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5539C3EBF104A53A call failed" << Log::Endl;
	}
}

EXPORT void Native__0x702BC4D605522539(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x702BC4D605522539);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x702BC4D605522539 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSessionSetMatchmakingPropertyId(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F52E880AAF6C8CA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionSetMatchmakingPropertyId call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSessionSetMatchmakingMentalState(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1EEA2DDA9FFA69D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionSetMatchmakingMentalState call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5ECD378EE64450AB(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5ECD378EE64450AB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5ECD378EE64450AB call failed" << Log::Endl;
	}
}

EXPORT void Native__0x59D421683D31835A(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59D421683D31835A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x59D421683D31835A call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1153FA02A659051C() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1153FA02A659051C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1153FA02A659051C call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSessionValidateJoin(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC19F6C8E7865A6FF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionValidateJoin call failed" << Log::Endl;
	}
}

EXPORT void Native_networkAddFollowers(int32_t& _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x236406F60CF216D6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAddFollowers call failed" << Log::Endl;
	}
}

EXPORT void Native_networkClearFollowers() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x058F43EC59A8631A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClearFollowers call failed" << Log::Endl;
	}
}

EXPORT void Native_networkGetGlobalMultiplayerClock(int32_t& _hours, int32_t& _minutes, int32_t& _seconds) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D03BFBD643B2A02);
	ctx->Reset();
	ctx->Push(_hours);
	ctx->Push(_minutes);
	ctx->Push(_seconds);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetGlobalMultiplayerClock call failed" << Log::Endl;
	}
}

EXPORT void Native__0x600F8CB31C7AAB6E(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x600F8CB31C7AAB6E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x600F8CB31C7AAB6E call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_networkGetTargetingMode() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFFA5BE8381C3314);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetTargetingMode call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkFindGamersInCrew(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE532D6811B3A4D2A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkFindGamersInCrew call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkFindMatchedGamers(int32_t _p0, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7B2CFDE5C9F700D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkFindMatchedGamers call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsFindingGamers() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDDDF64C91BFCF0AA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsFindingGamers call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkDidFindGamersSucceed() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9B83B77929D8863);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDidFindGamersSucceed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetNumFoundGamers() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1B043EE79A916FB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetNumFoundGamers call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkGetFoundGamer(int32_t& _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DCFF2AFB68B3476);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetFoundGamer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkClearFoundGamers() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D14CCEE1B40381A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClearFoundGamers call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkQueueGamerForStatus(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85A0EF54A500882C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkQueueGamerForStatus call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkGetGamerStatusFromQueue() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CC848A861D01493);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetGamerStatusFromQueue call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsGettingGamerStatus() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94A8394D150B013A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsGettingGamerStatus call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkDidGetGamerStatusSucceed() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AE17C6B0134B7F1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDidGetGamerStatusSucceed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkGetGamerStatusResult(int32_t& _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02A8BEC6FD9AF660);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetGamerStatusResult call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkClearGetGamerStatus() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x86E0660E4F5C956D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClearGetGamerStatus call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSessionJoinInvite() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6F8AB8A4189CF3A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionJoinInvite call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSessionCancelInvite() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FBF47B1B36D36F9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionCancelInvite call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSessionForceCancelInvite() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA29177F7703B5644);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionForceCancelInvite call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkHasPendingInvite() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC8C7B9B88C4A668);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasPendingInvite call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xC42DD763159F3461() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC42DD763159F3461);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC42DD763159F3461 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkAcceptInvite() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62A0296C1BB1CEB3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAcceptInvite call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkSessionWasInvited() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23DFB504655D0CE4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionWasInvited call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkSessionGetInviter(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE57397B4A3429DD0);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionGetInviter call failed" << Log::Endl;
	}
}

EXPORT bool Native__0xD313DE83394AF134() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD313DE83394AF134);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD313DE83394AF134 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xBDB6F89C729CF388() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBDB6F89C729CF388);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBDB6F89C729CF388 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkSuppressInvite(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0682D67EF1FBA3D);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSuppressInvite call failed" << Log::Endl;
	}
}

EXPORT void Native_networkBlockInvites(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34F9E9049454A7A0);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkBlockInvites call failed" << Log::Endl;
	}
}

EXPORT void Native_networkBlockJoinQueueInvites(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFEB8AF24FC1D0BB);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkBlockJoinQueueInvites call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF814FEC6A19FD6E0() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF814FEC6A19FD6E0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF814FEC6A19FD6E0 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkBlockKickedPlayers(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B07B9CE4D390375);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkBlockKickedPlayers call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetScriptReadyForEvents(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7AC752103856FB20);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetScriptReadyForEvents call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsOfflineInvitePending() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74698374C45701D2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsOfflineInvitePending call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkClearOfflineInvitePending() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x140E6A44870A11CE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClearOfflineInvitePending call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSessionHostSinglePlayer(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC74C33FCA52856D5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionHostSinglePlayer call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSessionLeaveSinglePlayer() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3442775428FD2DAA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionLeaveSinglePlayer call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsGameInProgress() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10FAB35428CCC9D7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsGameInProgress call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsSessionActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD83C2B94E7508980);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsSessionActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsInSession() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA97246103B63917);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsInSession call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsSessionStarted() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DE624D2FC4B603F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsSessionStarted call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsSessionBusy() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4435D66A8E2905E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsSessionBusy call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCanSessionEnd() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4EEBC3694E49C572);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCanSessionEnd call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x4C9034162368E206() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C9034162368E206);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4C9034162368E206 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkSessionMarkVisible(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x271CC6AB59EBF9A5);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionMarkVisible call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkSessionIsVisible() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA416D68C631496A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionIsVisible call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkSessionBlockJoinRequests(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA73667484D7037C3);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionBlockJoinRequests call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSessionChangeSlots(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4AB419E0D86ACAE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionChangeSlots call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_networkSessionGetPrivateSlots() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53AFD64C6758F2F9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionGetPrivateSlots call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkSessionVoiceHost() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C1556705F864230);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionVoiceHost call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSessionVoiceLeave() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6793E42BE02B575D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionVoiceLeave call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSessionVoiceConnectToPlayer(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xABD5E88B8A2D3DB2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionVoiceConnectToPlayer call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSessionVoiceRespondToRequest(bool _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F8413B7FC2AA6B9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionVoiceRespondToRequest call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSessionVoiceSetTimeout(int32_t _timeout) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B8ED3DB018927B1);
	ctx->Reset();
	ctx->Push(_timeout);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionVoiceSetTimeout call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkSessionIsInVoiceSession() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x855BC38818F6F684);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionIsInVoiceSession call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xB5D3453C98456528() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5D3453C98456528);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB5D3453C98456528 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkSessionIsVoiceSessionBusy() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF0912DDF7C4CB4B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSessionIsVoiceSessionBusy call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkSendTextMessage(const char* _message, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A214F2EC889B100);
	ctx->Reset();
	ctx->Push(_message);
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSendTextMessage call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkSetActivitySpectator(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75138790B4359A74);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetActivitySpectator call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsActivitySpectator() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12103B9E0C9F92FB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsActivitySpectator call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x0E4F77F7B9D74D84(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E4F77F7B9D74D84);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0E4F77F7B9D74D84 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetActivitySpectatorMax(int32_t _maxSpectators) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D277B76D1D12222);
	ctx->Reset();
	ctx->Push(_maxSpectators);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetActivitySpectatorMax call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_networkGetActivityPlayerNum(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73E2B500410DA5A2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetActivityPlayerNum call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkIsActivitySpectatorFromHandle(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2763BBAA72A7BCB9);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsActivitySpectatorFromHandle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHostTransition(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, bool _p5, bool _p6, int32_t _p7, int32_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA60BB5CE242BB254);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHostTransition call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkDoTransitionQuickmatch(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71FB0EBCD4915D56);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDoTransitionQuickmatch call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkDoTransitionQuickmatchAsync(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA091A5E44F0072E5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDoTransitionQuickmatchAsync call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkDoTransitionQuickmatchWithGroup(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t& _p4, int32_t _p5, int32_t _p6, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C4AB58491FDC98A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDoTransitionQuickmatchWithGroup call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkJoinGroupActivity() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA06509A691D12BE4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkJoinGroupActivity call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x1888694923EF4591() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1888694923EF4591);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1888694923EF4591 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB13E88E655E5A3BC() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB13E88E655E5A3BC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB13E88E655E5A3BC call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsTransitionClosedFriends() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6512765E3BE78C50);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsTransitionClosedFriends call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsTransitionClosedCrew() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0DBD5D7E3C5BEC3B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsTransitionClosedCrew call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsTransitionSolo() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DC577201723960A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsTransitionSolo call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsTransitionPrivate() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A6AA44FF8E931E6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsTransitionPrivate call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x617F49C2668E6155() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x617F49C2668E6155);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x617F49C2668E6155 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x261E97AD7BCF3D40(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x261E97AD7BCF3D40);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x261E97AD7BCF3D40 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x39917E1B4CB0F911(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39917E1B4CB0F911);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x39917E1B4CB0F911 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2CE9D95E4051AECD(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CE9D95E4051AECD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2CE9D95E4051AECD call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetTransitionCreatorHandle(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF26739BCD9907D5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetTransitionCreatorHandle call failed" << Log::Endl;
	}
}

EXPORT void Native_networkClearTransitionCreatorHandle() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB3272229A82C759);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClearTransitionCreatorHandle call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkInviteGamersToTransition(int32_t& _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A595C32F77DFF76);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkInviteGamersToTransition call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkSetGamerInvitedToTransition(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA2C8073411ECDB6);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetGamerInvitedToTransition call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkLeaveTransition() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD23A1A815D21DB19);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkLeaveTransition call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkLaunchTransition() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DCF46CB1A4F0884);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkLaunchTransition call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xA2E9C1AB8A92E8CD(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2E9C1AB8A92E8CD);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA2E9C1AB8A92E8CD call failed" << Log::Endl;
	}
}

EXPORT void Native_networkBailTransition(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAA572036990CD1B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkBailTransition call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkDoTransitionToGame(bool _p0, int32_t _maxPlayers) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E9BB38102A589B0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_maxPlayers);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDoTransitionToGame call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkDoTransitionToNewGame(bool _p0, int32_t _maxPlayers, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4665F51EFED00034);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_maxPlayers);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDoTransitionToNewGame call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkDoTransitionToFreemode(int32_t& _p0, int32_t _p1, bool _p2, int32_t _players, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3AAD8B2FCA1E289F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_players);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDoTransitionToFreemode call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkDoTransitionToNewFreemode(int32_t& _p0, int32_t& _p1, int32_t _players, bool _p3, bool _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E80A5BA8109F974);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_players);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDoTransitionToNewFreemode call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsTransitionToGame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D7696D8F4FA6CB7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsTransitionToGame call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetTransitionMembers(int32_t& _data, int32_t _dataCount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73B000F7FBC55829);
	ctx->Reset();
	ctx->Push(_data);
	ctx->Push(_dataCount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetTransitionMembers call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkApplyTransitionParameter(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x521638ADA1BA0D18);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkApplyTransitionParameter call failed" << Log::Endl;
	}
}

EXPORT void Native_networkApplyTransitionParameterString(int32_t _p0, const char* _string, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBEFC2E77084F599);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_string);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkApplyTransitionParameterString call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkSendTransitionGamerInstruction(int32_t& _gamerHandle, const char* _p1, int32_t _p2, int32_t _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31D1D2B858D25E6B);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSendTransitionGamerInstruction call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkMarkTransitionGamerAsFullyJoined(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5728BB6D63E3FF1D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkMarkTransitionGamerAsFullyJoined call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsTransitionHost() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B824797C9BF2159);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsTransitionHost call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsTransitionHostFromHandle(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B5C83BA3EFE6A10);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsTransitionHostFromHandle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkGetTransitionHost(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65042B9774C4435E);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetTransitionHost call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsInTransition() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68049AEFF83D8F0A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsInTransition call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsTransitionStarted() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53FA83401D9C07FE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsTransitionStarted call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsTransitionBusy() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x520F3282A53D26B7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsTransitionBusy call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsTransitionMatchmaking() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x292564C735375EDF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsTransitionMatchmaking call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xC571D0E77D8BBC29() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC571D0E77D8BBC29);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC571D0E77D8BBC29 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x1398582B7F72B3ED(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1398582B7F72B3ED);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1398582B7F72B3ED call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1F8E00FB18239600(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F8E00FB18239600);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1F8E00FB18239600 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF6F4383B7C92F11A(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6F4383B7C92F11A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF6F4383B7C92F11A call failed" << Log::Endl;
	}
}

EXPORT void Native_networkOpenTransitionMatchmaking() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B3A8F7CA3A38FDE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkOpenTransitionMatchmaking call failed" << Log::Endl;
	}
}

EXPORT void Native_networkCloseTransitionMatchmaking() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43F4DBA69710E01E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCloseTransitionMatchmaking call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsTransitionOpenToMatchmaking() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37A4494483B9F5C9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsTransitionOpenToMatchmaking call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkSetTransitionVisibilityLock(bool _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C978FDA19692C2C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetTransitionVisibilityLock call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsTransitionVisibilityLocked() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0A484CB2F829FBE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsTransitionVisibilityLocked call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkSetTransitionActivityId(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30DE938B516F0AD2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetTransitionActivityId call failed" << Log::Endl;
	}
}

EXPORT void Native_networkChangeTransitionSlots(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEEDA5E6D7080987);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkChangeTransitionSlots call failed" << Log::Endl;
	}
}

EXPORT void Native__0x973D76AA760A6CB6(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x973D76AA760A6CB6);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x973D76AA760A6CB6 call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkHasPlayerStartedTransition(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9AC9CCBFA8C29795);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasPlayerStartedTransition call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkAreTransitionDetailsValid(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2615AA2A695930C1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAreTransitionDetailsValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkJoinTransition(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D060B08CD63321A);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkJoinTransition call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHasInvitedGamerToTransition(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7284A47B3540E6CF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasInvitedGamerToTransition call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x3F9990BF5F22759C(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F9990BF5F22759C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3F9990BF5F22759C call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsActivitySession() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x05095437424397FA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsActivitySession call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x4A9FDE3A5A6D0437(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A9FDE3A5A6D0437);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4A9FDE3A5A6D0437 call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkSendInviteViaPresence(int32_t& _gamerHandle, int32_t& _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3C7A6AFDB244624);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSendInviteViaPresence call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkSendPresenceTransitionInvite(int32_t& _p0, int32_t& _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC116FF9B4D488291);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSendPresenceTransitionInvite call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x1171A97A3D3981B6(int32_t& _p0, int32_t& _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1171A97A3D3981B6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1171A97A3D3981B6 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x742B58F723233ED9(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x742B58F723233ED9);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x742B58F723233ED9 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetNumPresenceInvites() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEFA968912D0F78D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetNumPresenceInvites call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkAcceptPresenceInvite(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA91550DF9318B22);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAcceptPresenceInvite call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkRemovePresenceInvite(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0210268DB0974B1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRemovePresenceInvite call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetPresenceInviteId(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFF09646E12EC386);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPresenceInviteId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetPresenceInviteInviter(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4962CC4AA2F345B7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPresenceInviteInviter call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkGetPresenceInviteHandle(int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38D5B0FEBB086F75);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPresenceInviteHandle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetPresenceInviteSessionId(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26E1CD96B0903D60);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPresenceInviteSessionId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetPresenceInviteContentId(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24409FC4C55CB22D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPresenceInviteContentId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetPresenceInvitePlaylistLength(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD39B3FFF8FFDD5BF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPresenceInvitePlaylistLength call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetPresenceInvitePlaylistCurrent(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x728C4CC7920CD102);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPresenceInvitePlaylistCurrent call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkGetPresenceInviteFromAdmin(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DBF2DF0AEB7D289);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPresenceInviteFromAdmin call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkGetPresenceInviteIsTournament(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8806CEBFABD3CE05);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPresenceInviteIsTournament call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHasFollowInvite() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76D9B976C4C09FDE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasFollowInvite call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkActionFollowInvite() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC88156EBB786F8D5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkActionFollowInvite call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkClearFollowInvite() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x439BFDE3CD0610F6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClearFollowInvite call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0xEBF8284D8CADEB53() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBF8284D8CADEB53);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEBF8284D8CADEB53 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkRemoveTransitionInvite(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7524B431B2E6F7EE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRemoveTransitionInvite call failed" << Log::Endl;
	}
}

EXPORT void Native_networkRemoveAllTransitionInvite() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x726E0375C7A26368);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRemoveAllTransitionInvite call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF083835B70BA9BFE() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF083835B70BA9BFE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF083835B70BA9BFE call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkInviteGamers(int32_t& _p0, int32_t _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D80CD1D0E6327DE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkInviteGamers call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHasInvitedGamer(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D86CD31E8976ECE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasInvitedGamer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x71DC455F5CD1C2B1(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71DC455F5CD1C2B1);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x71DC455F5CD1C2B1 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x3855FB5EB2C5E8B2(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3855FB5EB2C5E8B2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3855FB5EB2C5E8B2 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkGetCurrentlySelectedGamerHandleFromInviteMenu(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74881E6BCAE2327C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetCurrentlySelectedGamerHandleFromInviteMenu call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkSetCurrentlySelectedGamerHandleFromInviteMenu(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7206F674F2A3B1BB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetCurrentlySelectedGamerHandleFromInviteMenu call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkSetInviteOnCallForInviteMenu(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66F010A4B031A331);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetInviteOnCallForInviteMenu call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkCheckDataManagerSucceededForHandle(int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44B37CDCAE765AAE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCheckDataManagerSucceededForHandle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x4AD490AE1536933B(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AD490AE1536933B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4AD490AE1536933B call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x0D77A82DC2D0DA59(int32_t& _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D77A82DC2D0DA59);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0D77A82DC2D0DA59 call failed" << Log::Endl;
	}
}

EXPORT bool Native_filloutPmPlayerList(int32_t& _gamerHandle, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCBBD7C4991B64809);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native filloutPmPlayerList call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_filloutPmPlayerListWithNames(int32_t& _p0, int32_t& _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x716B6DB9D1886106);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native filloutPmPlayerListWithNames call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_refreshPlayerListStats(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE26CCFF8094D8C74);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native refreshPlayerListStats call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkSetCurrentDataManagerHandle(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x796A87B3B68D1F3D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetCurrentDataManagerHandle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsInPlatformParty() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FC5650B0271CB57);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsInPlatformParty call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetPlatformPartyUnk() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01ABCE5E7CBDA196);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPlatformPartyUnk call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetPlatformPartyMembers(int32_t& _data, int32_t _dataSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x120364DE2845DAF8);
	ctx->Reset();
	ctx->Push(_data);
	ctx->Push(_dataSize);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPlatformPartyMembers call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkIsInPlatformPartyChat() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD8B834A8BA05048);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsInPlatformPartyChat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsChattingInPlatformParty(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DE9945BCC9AEC52);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsChattingInPlatformParty call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x2BF66D2E7414F686() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2BF66D2E7414F686);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2BF66D2E7414F686 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x14922ED3E38761F0() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14922ED3E38761F0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x14922ED3E38761F0 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x6CE50E47F5543D0C() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CE50E47F5543D0C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6CE50E47F5543D0C call failed" << Log::Endl;
	}
}

EXPORT void Native__0xFA2888E3833C8E96() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA2888E3833C8E96);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFA2888E3833C8E96 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x25D990F8E0E3F13C() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25D990F8E0E3F13C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x25D990F8E0E3F13C call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSeedRandomNumberGenerator(int32_t _seed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1B84178F8674195);
	ctx->Reset();
	ctx->Push(_seed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSeedRandomNumberGenerator call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_networkGetRandomInt() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x599E4FA1F87EB5FF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetRandomInt call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetRandomIntRanged(int32_t _rangeStart, int32_t _rangeEnd) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE30CF56F1EFA5F43);
	ctx->Reset();
	ctx->Push(_rangeStart);
	ctx->Push(_rangeEnd);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetRandomIntRanged call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkPlayerIsCheater() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x655B91F1495A9090);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkPlayerIsCheater call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkPlayerGetCheaterReason() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x172F75B6EE2233BA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkPlayerGetCheaterReason call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkPlayerIsBadsport() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19D8DA0E5A68045A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkPlayerIsBadsport call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_triggerScriptCrcCheckOnPlayer(int32_t _player, int32_t _p1, int32_t _scriptHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46FB3ED415C7641C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_scriptHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native triggerScriptCrcCheckOnPlayer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xA12D3A5A3753CC23() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA12D3A5A3753CC23);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA12D3A5A3753CC23 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xF287F506767CC8A9() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF287F506767CC8A9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF287F506767CC8A9 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_remoteCheatDetected(int32_t _player, int32_t _a, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x472841A026D26D8B);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_a);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native remoteCheatDetected call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_badSportPlayerLeftDetected(int32_t& _gamerHandle, int32_t _event, int32_t _amountReceived) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC5E3AF5289DCA81);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	ctx->Push(_event);
	ctx->Push(_amountReceived);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native badSportPlayerLeftDetected call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkApplyPedScarData(int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE66C690248F11150);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkApplyPedScarData call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetThisScriptIsNetworkScript(int32_t _maxNumMissionParticipants, bool _p1, int32_t _instanceId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CA59E306ECB80A5);
	ctx->Reset();
	ctx->Push(_maxNumMissionParticipants);
	ctx->Push(_p1);
	ctx->Push(_instanceId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetThisScriptIsNetworkScript call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsThisScriptMarked(int32_t _p0, bool _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1110739EEADB592);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsThisScriptMarked call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkGetThisScriptIsNetworkScript() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2910669969E9535E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetThisScriptIsNetworkScript call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetMaxNumParticipants() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6C90FBC38E395EE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetMaxNumParticipants call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetNumParticipants() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x18D0456E86604654);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetNumParticipants call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetScriptStatus() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57D158647A6BFABF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetScriptStatus call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkRegisterHostBroadcastVariables(int32_t& _unkVars, int32_t _numVars) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E9B2F01C50DF595);
	ctx->Reset();
	ctx->Push(_unkVars);
	ctx->Push(_numVars);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRegisterHostBroadcastVariables call failed" << Log::Endl;
	}
}

EXPORT void Native_networkRegisterPlayerBroadcastVariables(int32_t& _unkVars, int32_t _numVars) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3364AA97340CA215);
	ctx->Reset();
	ctx->Push(_unkVars);
	ctx->Push(_numVars);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRegisterPlayerBroadcastVariables call failed" << Log::Endl;
	}
}

EXPORT void Native__0xEA8C0DDB10E2822A(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA8C0DDB10E2822A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEA8C0DDB10E2822A call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD6D7478CA62B8D41(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD6D7478CA62B8D41);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD6D7478CA62B8D41 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkFinishBroadcastingData() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x64F62AFB081E260D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkFinishBroadcastingData call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkHasReceivedHostBroadcastData() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D10B3795F3FC886);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasReceivedHostBroadcastData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetPlayerIndex(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24FB80D107371267);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPlayerIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetParticipantIndex(int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B84DF6AF2A46938);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetParticipantIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetPlayerIndexFromPed(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C0E2E0125610278);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPlayerIndexFromPed call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetNumConnectedPlayers() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4A79DD2D9600654);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetNumConnectedPlayers call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkIsPlayerConnected(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93DC1BE4E1ABE9D1);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsPlayerConnected call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetTotalNumPlayers() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF61D4B4702EE9EB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetTotalNumPlayers call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkIsParticipantActive(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FF8FF40B6357D45);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsParticipantActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsPlayerActive(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8DFD30D6973E135);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsPlayerActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsPlayerAParticipant(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3CA58F6CB7CBD784);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsPlayerAParticipant call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsHostOfThisScript() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83CD99A1E6061AB5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsHostOfThisScript call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetHostOfThisScript() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7B4D79B01FA7A5C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetHostOfThisScript call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetHostOfScript(const char* _scriptName, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D6A14F1F9A736FC);
	ctx->Reset();
	ctx->Push(_scriptName);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetHostOfScript call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkSetMissionFinished() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B3D11CD9FFCDFC9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetMissionFinished call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsScriptActive(const char* _scriptName, int32_t _player, bool _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D40DF90FAD26098);
	ctx->Reset();
	ctx->Push(_scriptName);
	ctx->Push(_player);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsScriptActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsScriptActiveByHash(int32_t _scriptHash, int32_t _p1, bool _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA7DE67F5FE5EE13);
	ctx->Reset();
	ctx->Push(_scriptHash);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsScriptActiveByHash call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x560B423D73015E77(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x560B423D73015E77);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x560B423D73015E77 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetNumScriptParticipants(int32_t& _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3658E8CD94FC121A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetNumScriptParticipants call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetInstanceIdOfThisScript() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x638A3A81733086DB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetInstanceIdOfThisScript call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetPositionHashOfThisScript() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x257ED0FADF750BCF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPositionHashOfThisScript call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkIsPlayerAParticipantOnScript(int32_t _player1, const char* _script, int32_t _player2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1AD5B71586B94820);
	ctx->Reset();
	ctx->Push(_player1);
	ctx->Push(_script);
	ctx->Push(_player2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsPlayerAParticipantOnScript call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x2302C0264EA58D31() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2302C0264EA58D31);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2302C0264EA58D31 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x741A3D8380319A81() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x741A3D8380319A81);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x741A3D8380319A81 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_participantId() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90986E8876CE0A83);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native participantId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_participantIdToInt() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57A3BDDAD8E5AA0A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native participantIdToInt call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x2DA41ED6E1FCD7A5(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DA41ED6E1FCD7A5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2DA41ED6E1FCD7A5 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetDestroyerOfNetworkId(int32_t _netId, int32_t& _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A1ADEEF01740A24);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetDestroyerOfNetworkId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xC434133D9BA52777(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC434133D9BA52777);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC434133D9BA52777 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x83660B734994124D(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83660B734994124D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x83660B734994124D call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkGetDestroyerOfEntity(int32_t _p0, int32_t _p1, int32_t& _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4CACA84440FA26F6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetDestroyerOfEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetEntityKillerOfPlayer(int32_t _player, int32_t& _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42B2DAA6B596F5F8);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetEntityKillerOfPlayer call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkResurrectLocalPlayer(float _x, float _y, float _z, float _heading, bool _unk, bool _changetime, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA23C49EAA83ACFB);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(_unk);
	ctx->Push(_changetime);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkResurrectLocalPlayer call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetLocalPlayerInvincibleTime(int32_t _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D95C7E2D7E07307);
	ctx->Reset();
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetLocalPlayerInvincibleTime call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsLocalPlayerInvincible() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A8694B48715B000);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsLocalPlayerInvincible call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkDisableInvincibleFlashing(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DD368BF06983221);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDisableInvincibleFlashing call failed" << Log::Endl;
	}
}

EXPORT void Native_networkPedForceGameStateUpdate(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0BC9BCD24A511D5);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkPedForceGameStateUpdate call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetLocalPlayerSyncLookAt(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x524FF0AEFF9C3973);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetLocalPlayerSyncLookAt call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkHasEntityBeenRegisteredWithThisThread(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB07D3185E11657A5);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasEntityBeenRegisteredWithThisThread call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetNetworkIdFromEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA11700682F3AD45C);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetNetworkIdFromEntity call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetEntityFromNetworkId(int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE4E5D9B0A4FF560);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetEntityFromNetworkId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkGetEntityIsNetworked(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7827959479DCC78);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetEntityIsNetworked call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkGetEntityIsLocal(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0991549DE4D64762);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetEntityIsLocal call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkRegisterEntityAsNetworked(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06FAACD625D80CAA);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRegisterEntityAsNetworked call failed" << Log::Endl;
	}
}

EXPORT void Native_networkUnregisterNetworkedEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7368E683BB9038D6);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkUnregisterNetworkedEntity call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkDoesNetworkIdExist(int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38CE16C96BD11344);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDoesNetworkIdExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkDoesEntityExistWithNetworkId(int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x18A47D074708FD68);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDoesEntityExistWithNetworkId call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkRequestControlOfNetworkId(int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA670B3662FAFFBD0);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRequestControlOfNetworkId call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHasControlOfNetworkId(int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D36070FE0215186);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasControlOfNetworkId call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsNetworkIdAClone(int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7242F8B741CE1086);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsNetworkIdAClone call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkRequestControlOfEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB69317BF5E782347);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRequestControlOfEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkRequestControlOfDoor(int32_t _doorID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x870DDFD5A4A796E4);
	ctx->Reset();
	ctx->Push(_doorID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRequestControlOfDoor call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHasControlOfEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01BF60A500E28887);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasControlOfEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHasControlOfPickup(int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BC9495F0B3B6FA6);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasControlOfPickup call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHasControlOfDoor(int32_t _doorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB3C68ADB06195DF);
	ctx->Reset();
	ctx->Push(_doorHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasControlOfDoor call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsDoorNetworked(int32_t _doorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC01E93FAC20C3346);
	ctx->Reset();
	ctx->Push(_doorHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsDoorNetworked call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_vehToNet(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4C94523F023419C);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native vehToNet call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_pedToNet(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0EDEC3C276198689);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pedToNet call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_objToNet(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99BFDC94A603E541);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native objToNet call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_netToVeh(int32_t _netHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x367B936610BA360C);
	ctx->Reset();
	ctx->Push(_netHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netToVeh call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_netToPed(int32_t _netHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBDCD95FC216A8B3E);
	ctx->Reset();
	ctx->Push(_netHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netToPed call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_netToObj(int32_t _netHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8515F5FEA14CB3F);
	ctx->Reset();
	ctx->Push(_netHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netToObj call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_netToEnt(int32_t _netHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFFEAB45A9A9094A);
	ctx->Reset();
	ctx->Push(_netHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native netToEnt call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkGetLocalHandle(int32_t& _gamerHandle, int32_t _gamerHandleSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE86051786B66CD8E);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	ctx->Push(_gamerHandleSize);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetLocalHandle call failed" << Log::Endl;
	}
}

EXPORT void Native_networkHandleFromUserId(const char* _userId, int32_t& _gamerHandle, int32_t _gamerHandleSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCD51DD8F87AEC5C);
	ctx->Reset();
	ctx->Push(_userId);
	ctx->Push(_gamerHandle);
	ctx->Push(_gamerHandleSize);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHandleFromUserId call failed" << Log::Endl;
	}
}

EXPORT void Native_networkHandleFromMemberId(const char* _memberId, int32_t& _gamerHandle, int32_t _gamerHandleSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0FD21BED61E5C4C);
	ctx->Reset();
	ctx->Push(_memberId);
	ctx->Push(_gamerHandle);
	ctx->Push(_gamerHandleSize);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHandleFromMemberId call failed" << Log::Endl;
	}
}

EXPORT void Native_networkHandleFromPlayer(int32_t _player, int32_t& _gamerHandle, int32_t _gamerHandleSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x388EB2B86C73B6B3);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_gamerHandle);
	ctx->Push(_gamerHandleSize);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHandleFromPlayer call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_networkHashFromPlayerHandle(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC1D768F2F5D6C05);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHashFromPlayerHandle call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkHashFromGamerHandle(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58575AC3CF2CA8EC);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHashFromGamerHandle call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkHandleFromFriend(int32_t _friendIndex, int32_t& _gamerHandle, int32_t _gamerHandleSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD45CB817D7E177D2);
	ctx->Reset();
	ctx->Push(_friendIndex);
	ctx->Push(_gamerHandle);
	ctx->Push(_gamerHandleSize);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHandleFromFriend call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkGamertagFromHandleStart(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F0C0A981D73FA56);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGamertagFromHandleStart call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkGamertagFromHandlePending() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB071E27958EF4CF0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGamertagFromHandlePending call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkGamertagFromHandleSucceeded() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD00798DBA7523DD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGamertagFromHandleSucceeded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT const char* Native_networkGetGamertagFromHandle(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x426141162EBE5CDB);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetGamertagFromHandle call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT int32_t Native_networkDisplaynamesFromHandlesStart(int32_t& _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD66C9E72B3CC4982);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDisplaynamesFromHandlesStart call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetDisplaynamesFromHandles(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58CC181719256197);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetDisplaynamesFromHandles call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkAreHandlesTheSame(int32_t& _gamerHandle1, int32_t& _gamerHandle2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57DBA049E110F217);
	ctx->Reset();
	ctx->Push(_gamerHandle1);
	ctx->Push(_gamerHandle2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAreHandlesTheSame call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsHandleValid(int32_t& _gamerHandle, int32_t _gamerHandleSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F79B93B0A8E4133);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	ctx->Push(_gamerHandleSize);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsHandleValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetPlayerFromGamerHandle(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE5F689CF5A0A49D);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPlayerFromGamerHandle call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT const char* Native_networkMemberIdFromGamerHandle(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC82630132081BB6F);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkMemberIdFromGamerHandle call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT bool Native_networkIsGamerInMySession(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F10B05DDF8D16E9);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsGamerInMySession call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkShowProfileUi(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x859ED1CEA343FCA8);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkShowProfileUi call failed" << Log::Endl;
	}
}

EXPORT const char* Native_networkPlayerGetName(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7718D2E2060837D2);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkPlayerGetName call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_networkPlayerGetUserid(int32_t _player, int32_t& _userID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4927FC39CD0869A0);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_userID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkPlayerGetUserid call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT bool Native_networkPlayerIsRockstarDev(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x544ABDDA3B409B6D);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkPlayerIsRockstarDev call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkPlayerIndexIsCheater(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x565E430DB3B05BEC);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkPlayerIndexIsCheater call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetEntityNetScriptId(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x815F18AD865F057F);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetEntityNetScriptId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x37D5F739FD494675(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37D5F739FD494675);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x37D5F739FD494675 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkIsInactiveProfile(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E58745504313A2E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsInactiveProfile call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetMaxFriends() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFEBB0D5D8F687D2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetMaxFriends call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetFriendCount() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x203F1CFD823B27A4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetFriendCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT const char* Native_networkGetFriendName(int32_t _friendIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE11EBBB2A783FE8B);
	ctx->Reset();
	ctx->Push(_friendIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetFriendName call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_networkGetFriendNameFromIndex(int32_t _friendIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4164F227D052E293);
	ctx->Reset();
	ctx->Push(_friendIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetFriendNameFromIndex call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT bool Native_networkIsFriendOnline(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x425A44533437B64D);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsFriendOnline call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsFriendHandleOnline(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87EB7A3FFCB314DB);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsFriendHandleOnline call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsFriendInSameTitle(const char* _friendName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2EA9A3BEDF3F17B8);
	ctx->Reset();
	ctx->Push(_friendName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsFriendInSameTitle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsFriendInMultiplayer(const char* _friendName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57005C18827F3A28);
	ctx->Reset();
	ctx->Push(_friendName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsFriendInMultiplayer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsFriend(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A24A179F9B31654);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsFriend call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkIsPendingFriend(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BE73DA6984A6E33);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsPendingFriend call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkIsAddingFriend() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6EA101606F6E4D81);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsAddingFriend call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkAddFriend(int32_t& _gamerHandle, const char* _message) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E02D73914064223);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	ctx->Push(_message);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAddFriend call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsFriendIndexOnline(int32_t _friendIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAD8F2A42B844821);
	ctx->Reset();
	ctx->Push(_friendIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsFriendIndexOnline call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkSetPlayerIsPassive(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B857666604B1A74);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetPlayerIsPassive call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkGetPlayerOwnsWaypoint(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82377B65E943F72D);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPlayerOwnsWaypoint call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCanSetWaypoint() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC927EC229934AF60);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCanSetWaypoint call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x4C2A9FDC22377075() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C2A9FDC22377075);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4C2A9FDC22377075 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xB309EBEA797E001F(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB309EBEA797E001F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB309EBEA797E001F call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x26F07DD83A5F7F98() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26F07DD83A5F7F98);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x26F07DD83A5F7F98 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkHasHeadset() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE870F9F1F7B4F1FA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasHeadset call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x7D395EA61622E116(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D395EA61622E116);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7D395EA61622E116 call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsLocalTalking() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0D2AF00BCC234CA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsLocalTalking call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkGamerHasHeadset(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2FD55CB574BCC55);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGamerHasHeadset call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsGamerTalking(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71C33B22606CD88A);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsGamerTalking call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCanCommunicateWithGamer2(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F5D1AD832AEB06C);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCanCommunicateWithGamer2 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCanCommunicateWithGamer(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA150A4F065806B1F);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCanCommunicateWithGamer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsGamerMutedByMe(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE60DE011B6C7978);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsGamerMutedByMe call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkAmIMutedByGamer(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF02A2C93F1F26DA);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAmIMutedByGamer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsGamerBlockedByMe(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE944C4F5AF1B5883);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsGamerBlockedByMe call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkAmIBlockedByGamer(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15337C7C268A27B2);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAmIBlockedByGamer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCanViewGamerUserContent(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB57A49545BA53CE7);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCanViewGamerUserContent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHasViewGamerUserContentResult(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCA4318E1AB03F1F);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasViewGamerUserContentResult call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCanPlayMultiplayerWithGamer(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07DD29D5E22763F1);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCanPlayMultiplayerWithGamer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkCanGamerPlayMultiplayerWithMe(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x135F9B7B7ADD2185);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCanGamerPlayMultiplayerWithMe call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsPlayerTalking(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x031E11F3D447647E);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsPlayerTalking call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkPlayerHasHeadset(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3FB99A8B08D18FD6);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkPlayerHasHeadset call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsPlayerMutedByMe(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C71288AE68EDE39);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsPlayerMutedByMe call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkAmIMutedByPlayer(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D6981DFC91A8604);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAmIMutedByPlayer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsPlayerBlockedByMe(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57AF1F8E27483721);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsPlayerBlockedByMe call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkAmIBlockedByPlayer(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87F395D957D4353D);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAmIBlockedByPlayer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT float Native_networkGetPlayerLoudness(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21A1684A25C2867F);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPlayerLoudness call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_networkSetTalkerProximity(float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCBF12D65F95AD686);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetTalkerProximity call failed" << Log::Endl;
	}
}

EXPORT float Native_networkGetTalkerProximity() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84F0F13120B4E098);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetTalkerProximity call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_networkSetVoiceActive(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBABEC9E69A91C57B);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetVoiceActive call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCFEB46DCD7D8D5EB(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFEB46DCD7D8D5EB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCFEB46DCD7D8D5EB call failed" << Log::Endl;
	}
}

EXPORT void Native_networkOverrideTransitionChat(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF66059A131AA269);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkOverrideTransitionChat call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetTeamOnlyChat(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5B4883AC32F24C3);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetTeamOnlyChat call failed" << Log::Endl;
	}
}

EXPORT void Native__0x265559DA40B3F327(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x265559DA40B3F327);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x265559DA40B3F327 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x4348BFDA56023A2F(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4348BFDA56023A2F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4348BFDA56023A2F call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkOverrideTeamRestrictions(int32_t _team, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F697A66CE78674E);
	ctx->Reset();
	ctx->Push(_team);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkOverrideTeamRestrictions call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetOverrideSpectatorMode(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70DA3BF8DACD3210);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetOverrideSpectatorMode call failed" << Log::Endl;
	}
}

EXPORT void Native__0x3C5C1E2C2FF814B1(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C5C1E2C2FF814B1);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3C5C1E2C2FF814B1 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9D7AFCBF21C51712(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D7AFCBF21C51712);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9D7AFCBF21C51712 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetNoSpectatorChat(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF46A1E03E8755980);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetNoSpectatorChat call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6A5D89D7769A40D8(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A5D89D7769A40D8);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6A5D89D7769A40D8 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkOverrideChatRestrictions(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3039AE5AD2C9C0C4);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkOverrideChatRestrictions call failed" << Log::Endl;
	}
}

EXPORT void Native_networkOverrideSendRestrictions(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97DD4C5944CC2E6A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkOverrideSendRestrictions call failed" << Log::Endl;
	}
}

EXPORT void Native_networkOverrideSendRestrictionsAll(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57B192B4D4AD23D5);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkOverrideSendRestrictionsAll call failed" << Log::Endl;
	}
}

EXPORT void Native_networkOverrideReceiveRestrictions(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDDF73E2B1FEC5AB4);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkOverrideReceiveRestrictions call failed" << Log::Endl;
	}
}

EXPORT void Native_networkOverrideReceiveRestrictionsAll(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0FF2862B61A58AF9);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkOverrideReceiveRestrictionsAll call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetVoiceChannel(int32_t _channel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF6212C2EFEF1A23);
	ctx->Reset();
	ctx->Push(_channel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetVoiceChannel call failed" << Log::Endl;
	}
}

EXPORT void Native_networkClearVoiceChannel() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE036A705F989E049);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClearVoiceChannel call failed" << Log::Endl;
	}
}

EXPORT void Native_networkApplyVoiceProximityOverride(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBD2056652689917);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkApplyVoiceProximityOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_networkClearVoiceProximityOverride() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF03755696450470C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClearVoiceProximityOverride call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5E3AA4CA2B6FB0EE(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E3AA4CA2B6FB0EE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5E3AA4CA2B6FB0EE call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCA575C391FEA25CC(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA575C391FEA25CC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCA575C391FEA25CC call failed" << Log::Endl;
	}
}

EXPORT void Native__0xADB57E5B663CCA8B(int32_t _p0, float& _p1, float& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADB57E5B663CCA8B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xADB57E5B663CCA8B call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8EF52ACAECC51D9C(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EF52ACAECC51D9C);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8EF52ACAECC51D9C call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsTextChatActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FCF4D7069B09026);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsTextChatActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_shutdownAndLaunchSinglePlayerGame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x593850C16A36B692);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native shutdownAndLaunchSinglePlayerGame call failed" << Log::Endl;
	}
}

EXPORT bool Native_shutdownAndLoadMostRecentSave() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9ECA15ADFE141431);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native shutdownAndLoadMostRecentSave call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkSetFriendlyFireOption(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF808475FA571D823);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetFriendlyFireOption call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetRichPresence(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DCCACDCFC569362);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetRichPresence call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetRichPresenceString(int32_t _p0, const char* _textLabel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E200C2BCF4164EB);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_textLabel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetRichPresenceString call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_networkGetTimeoutTime() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5ED0356A0CE3A34F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetTimeoutTime call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkLeavePedBehindBeforeWarp(int32_t _player, float _x, float _y, float _z, bool _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9769F811D1785B03);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkLeavePedBehindBeforeWarp call failed" << Log::Endl;
	}
}

EXPORT void Native_networkLeavePedBehindBeforeCutscene(int32_t _player, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF22E0F32968E967);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkLeavePedBehindBeforeCutscene call failed" << Log::Endl;
	}
}

EXPORT void Native_removeAllStickyBombsFromEntity(int32_t _entity, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x715135F4B82AC90D);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeAllStickyBombsFromEntity call failed" << Log::Endl;
	}
}

EXPORT void Native__0x17C9E241111A674D(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17C9E241111A674D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x17C9E241111A674D call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x2E4C123D1C8A710E(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E4C123D1C8A710E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2E4C123D1C8A710E call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkClanServiceIsValid() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x579CCED0265D4896);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanServiceIsValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkClanPlayerIsActive(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB124B57F571D8F18);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanPlayerIsActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkClanPlayerGetDesc(int32_t& _clanDesc, int32_t _bufferSize, int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEE6EACBE8874FBA);
	ctx->Reset();
	ctx->Push(_clanDesc);
	ctx->Push(_bufferSize);
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanPlayerGetDesc call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkClanIsRockstarClan(int32_t& _clanDesc, int32_t _bufferSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7543BB439F63792B);
	ctx->Reset();
	ctx->Push(_clanDesc);
	ctx->Push(_bufferSize);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanIsRockstarClan call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkClanGetUiFormattedTag(int32_t& _clanDesc, int32_t _bufferSize, const char*& _formattedTag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF45352426FF3A4F0);
	ctx->Reset();
	ctx->Push(_clanDesc);
	ctx->Push(_bufferSize);
	ctx->Push(_formattedTag);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanGetUiFormattedTag call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_networkClanGetLocalMembershipsCount() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F471B79ACC90BEF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanGetLocalMembershipsCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkClanGetMembershipDesc(int32_t& _memberDesc, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48DE78AF2C8885B8);
	ctx->Reset();
	ctx->Push(_memberDesc);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanGetMembershipDesc call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkClanDownloadMembership(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA989044E70010ABE);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanDownloadMembership call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkClanDownloadMembershipPending(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B9E023DC6EBEDC0);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanDownloadMembershipPending call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkClanAnyDownloadMembershipPending() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3F64A6A91432477);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanAnyDownloadMembershipPending call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkClanRemoteMembershipsAreInCache(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB6E6FEE99D866B2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanRemoteMembershipsAreInCache call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkClanGetMembershipCount(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAB11F6C4ADBC2C1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanGetMembershipCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkClanGetMembershipValid(int32_t& _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48A59CF88D43DF0E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanGetMembershipValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkClanGetMembership(int32_t& _p0, int32_t& _clanMembership, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8BC2011F67B3411);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_clanMembership);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanGetMembership call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkClanJoin(int32_t _clanDesc) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FAAA4F4FC71F87F);
	ctx->Reset();
	ctx->Push(_clanDesc);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanJoin call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkClanAnimation(const char* _animDict, const char* _animName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x729E3401F0430686);
	ctx->Reset();
	ctx->Push(_animDict);
	ctx->Push(_animName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanAnimation call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x2B51EDBEFC301339(int32_t _p0, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B51EDBEFC301339);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2B51EDBEFC301339 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xC32EA7A2F6CA7557() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC32EA7A2F6CA7557);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC32EA7A2F6CA7557 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkClanGetEmblemTxdName(int32_t& _netHandle, const char*& _txdName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5835D9CD92E83184);
	ctx->Reset();
	ctx->Push(_netHandle);
	ctx->Push(_txdName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanGetEmblemTxdName call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkClanRequestEmblem(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13518FF1C6B28938);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanRequestEmblem call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkClanIsEmblemReady(int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA134777FF7F33331);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanIsEmblemReady call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkClanReleaseEmblem(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x113E6E3E50E286B0);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClanReleaseEmblem call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_networkGetPrimaryClanDataClear() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9AA46BADAD0E27ED);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPrimaryClanDataClear call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkGetPrimaryClanDataCancel() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x042E4B70B93E6054);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPrimaryClanDataCancel call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkGetPrimaryClanDataStart(int32_t& _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE86D8191B762107);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPrimaryClanDataStart call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetPrimaryClanDataPending() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5074DB804E28CE7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPrimaryClanDataPending call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetPrimaryClanDataSuccess() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B4F04F19376A0BA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPrimaryClanDataSuccess call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkGetPrimaryClanDataNew(int32_t& _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC080FF658B2E41DA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPrimaryClanDataNew call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setNetworkIdCanMigrate(int32_t _netId, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x299EEB23175895FC);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNetworkIdCanMigrate call failed" << Log::Endl;
	}
}

EXPORT void Native_setNetworkIdExistsOnAllMachines(int32_t _netId, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE05E81A888FA63C8);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNetworkIdExistsOnAllMachines call failed" << Log::Endl;
	}
}

EXPORT void Native_setNetworkIdAlwaysExistsForPlayer(int32_t _netId, int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8A024587329F36A);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNetworkIdAlwaysExistsForPlayer call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9D724B400A7E8FFC(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D724B400A7E8FFC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9D724B400A7E8FFC call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetEntityCanBlend(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD830567D88A1E873);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetEntityCanBlend call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0379DAF89BA09AA5(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0379DAF89BA09AA5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0379DAF89BA09AA5 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetEntityInvisibleToNetwork(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1CA12B18AEF5298);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetEntityInvisibleToNetwork call failed" << Log::Endl;
	}
}

EXPORT void Native_setNetworkIdVisibleInCutscene(int32_t _netId, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6928482543022B4);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNetworkIdVisibleInCutscene call failed" << Log::Endl;
	}
}

EXPORT void Native__0x32EBD154CB6B8B99(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32EBD154CB6B8B99);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x32EBD154CB6B8B99 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x76B3F29D3F967692(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76B3F29D3F967692);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x76B3F29D3F967692 call failed" << Log::Endl;
	}
}

EXPORT void Native_setNetworkCutsceneEntities(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAA553E7DD28A457);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNetworkCutsceneEntities call failed" << Log::Endl;
	}
}

EXPORT void Native__0x3FA36981311FA4FF(int32_t _netId, bool _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3FA36981311FA4FF);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3FA36981311FA4FF call failed" << Log::Endl;
	}
}

EXPORT bool Native_isNetworkIdOwnedByParticipant(int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1607996431332DF);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isNetworkIdOwnedByParticipant call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setLocalPlayerVisibleInCutscene(bool _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1065D68947E7B6E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setLocalPlayerVisibleInCutscene call failed" << Log::Endl;
	}
}

EXPORT void Native_setLocalPlayerInvisibleLocally(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE5F773C1A1D9D168);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setLocalPlayerInvisibleLocally call failed" << Log::Endl;
	}
}

EXPORT void Native_setLocalPlayerVisibleLocally(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7619364C82D3BF14);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setLocalPlayerVisibleLocally call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerInvisibleLocally(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12B37D54667DB0B8);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerInvisibleLocally call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerVisibleLocally(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAA10F1FAFB11AF2);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerVisibleLocally call failed" << Log::Endl;
	}
}

EXPORT void Native_fadeOutLocalPlayer(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x416DBD4CD6ED8DD2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native fadeOutLocalPlayer call failed" << Log::Endl;
	}
}

EXPORT void Native_networkFadeOutEntity(int32_t _entity, bool _normal, bool _slow) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE564951F95E09ED);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_normal);
	ctx->Push(_slow);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkFadeOutEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_networkFadeInEntity(int32_t _entity, bool _state, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F4ED342ACEFE62D);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_state);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkFadeInEntity call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsPlayerFading(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x631DC5DFF4B110E3);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsPlayerFading call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsEntityFading(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x422F32CC7E56ABAD);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsEntityFading call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlayerInCutscene(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE73092F4157CD126);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerInCutscene call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setEntityVisibleInCutscene(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0031D3C8F36AB82);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityVisibleInCutscene call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityLocallyInvisible(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE135A9FF3F5D05D8);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityLocallyInvisible call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityLocallyVisible(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x241E289B5C059EDC);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityLocallyVisible call failed" << Log::Endl;
	}
}

EXPORT bool Native_isDamageTrackerActiveOnNetworkId(int32_t _netID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E192E33AD436366);
	ctx->Reset();
	ctx->Push(_netID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isDamageTrackerActiveOnNetworkId call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_activateDamageTrackerOnNetworkId(int32_t _netID, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD45B1FFCCD52FF19);
	ctx->Reset();
	ctx->Push(_netID);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native activateDamageTrackerOnNetworkId call failed" << Log::Endl;
	}
}

EXPORT bool Native_isDamageTrackerActiveOnPlayer(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2092A1EAA7FD45F);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isDamageTrackerActiveOnPlayer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_activateDamageTrackerOnPlayer(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBEC0816FF5ACBCDA);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native activateDamageTrackerOnPlayer call failed" << Log::Endl;
	}
}

EXPORT bool Native_isSphereVisibleToAnotherMachine(float _p0, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD82CF8E64C8729D8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSphereVisibleToAnotherMachine call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isSphereVisibleToPlayer(int32_t _p0, float _p1, float _p2, float _p3, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC3A310219E5DA62);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSphereVisibleToPlayer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_reserveNetworkMissionObjects(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E5C93BD0C32FBF8);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native reserveNetworkMissionObjects call failed" << Log::Endl;
	}
}

EXPORT void Native_reserveNetworkMissionPeds(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB60FEBA45333D36F);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native reserveNetworkMissionPeds call failed" << Log::Endl;
	}
}

EXPORT void Native_reserveNetworkMissionVehicles(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76B02E21ED27A469);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native reserveNetworkMissionVehicles call failed" << Log::Endl;
	}
}

EXPORT void Native_reserveNetworkLocalObjects(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x797F9C5E661D920E);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native reserveNetworkLocalObjects call failed" << Log::Endl;
	}
}

EXPORT void Native_reserveNetworkLocalPeds(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C8DF5D129595281);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native reserveNetworkLocalPeds call failed" << Log::Endl;
	}
}

EXPORT void Native_reserveNetworkLocalVehicles(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42613035157E4208);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native reserveNetworkLocalVehicles call failed" << Log::Endl;
	}
}

EXPORT bool Native_canRegisterMissionObjects(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x800DD4721A8B008B);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canRegisterMissionObjects call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_canRegisterMissionPeds(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCBF4FEF9FA5D781);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canRegisterMissionPeds call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_canRegisterMissionVehicles(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7277F1F2E085EE74);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canRegisterMissionVehicles call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_canRegisterMissionPickups(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A49D1CB6E34AF72);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canRegisterMissionPickups call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xE16AA70CE9BEEDC3(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE16AA70CE9BEEDC3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE16AA70CE9BEEDC3 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_canRegisterMissionEntities(int32_t _ped_amt, int32_t _vehicle_amt, int32_t _object_amt, int32_t _pickup_amt) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69778E7564BADE6D);
	ctx->Reset();
	ctx->Push(_ped_amt);
	ctx->Push(_vehicle_amt);
	ctx->Push(_object_amt);
	ctx->Push(_pickup_amt);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canRegisterMissionEntities call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getNumReservedMissionObjects(bool _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA81B5F10BC43AC2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumReservedMissionObjects call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumReservedMissionPeds(bool _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F13D5AE5CB17E17);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumReservedMissionPeds call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumReservedMissionVehicles(bool _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF3A965906452031);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumReservedMissionVehicles call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumCreatedMissionObjects(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12B6281B6C6706C0);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumCreatedMissionObjects call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumCreatedMissionPeds(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB215C4B56A7FAE7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumCreatedMissionPeds call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumCreatedMissionVehicles(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CD9AB83489430EA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumCreatedMissionVehicles call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0xE42D626EEC94E5D9(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE42D626EEC94E5D9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE42D626EEC94E5D9 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getMaxNumNetworkObjects() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7BE335216B5EC7C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMaxNumNetworkObjects call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getMaxNumNetworkPeds() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C1F7D49C39D2289);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMaxNumNetworkPeds call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getMaxNumNetworkVehicles() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AFCE529F69B21FF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMaxNumNetworkVehicles call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getMaxNumNetworkPickups() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA72835064DD63E4C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMaxNumNetworkPickups call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0xBA7F0B77D80A4EB7(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA7F0B77D80A4EB7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBA7F0B77D80A4EB7 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0F1A4B45B7693B95(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F1A4B45B7693B95);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0F1A4B45B7693B95 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getNetworkTime() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A5487FE9FAA6B48);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNetworkTime call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNetworkTimeAccurate() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89023FBBF9200E9F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNetworkTimeAccurate call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_hasNetworkTimeStarted() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46718ACEEDEAFC84);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasNetworkTimeStarted call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getTimeOffset(int32_t _timeA, int32_t _timeB) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x017008CCDAD48503);
	ctx->Reset();
	ctx->Push(_timeA);
	ctx->Push(_timeB);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTimeOffset call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isTimeLessThan(int32_t _timeA, int32_t _timeB) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB2CF5148012C8D0);
	ctx->Reset();
	ctx->Push(_timeA);
	ctx->Push(_timeB);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isTimeLessThan call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isTimeMoreThan(int32_t _timeA, int32_t _timeB) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE350F8651E4346C);
	ctx->Reset();
	ctx->Push(_timeA);
	ctx->Push(_timeB);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isTimeMoreThan call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isTimeEqualTo(int32_t _timeA, int32_t _timeB) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5BC95857BD6D512);
	ctx->Reset();
	ctx->Push(_timeA);
	ctx->Push(_timeB);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isTimeEqualTo call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getTimeDifference(int32_t _timeA, int32_t _timeB) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2C6FC031D46FFF0);
	ctx->Reset();
	ctx->Push(_timeA);
	ctx->Push(_timeB);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTimeDifference call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT const char* Native_getTimeAsString(int32_t _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E23B1777A927DAD);
	ctx->Reset();
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTimeAsString call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_getCloudTimeAsString() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF12E6CD06C73D69E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCloudTimeAsString call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT int32_t Native_getCloudTimeAsInt() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A73240B49945C76);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCloudTimeAsInt call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_convertPosixTime(int32_t _posixTime, int32_t& _timeStructure) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC97AF97FA68E5D5);
	ctx->Reset();
	ctx->Push(_posixTime);
	ctx->Push(_timeStructure);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native convertPosixTime call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetInSpectatorMode(bool _toggle, int32_t _playerPed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x423DE3854BB50894);
	ctx->Reset();
	ctx->Push(_toggle);
	ctx->Push(_playerPed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetInSpectatorMode call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetInSpectatorModeExtended(bool _toggle, int32_t _playerPed, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x419594E137637120);
	ctx->Reset();
	ctx->Push(_toggle);
	ctx->Push(_playerPed);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetInSpectatorModeExtended call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetInFreeCamMode(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC18DB55AE19E046);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetInFreeCamMode call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetChoiceMigrateOptions(bool _toggle, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C707A667DF8B9FA);
	ctx->Reset();
	ctx->Push(_toggle);
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetChoiceMigrateOptions call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsInSpectatorMode() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x048746E388762E11);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsInSpectatorMode call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkSetInMpCutscene(bool _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9CA5DE655269FEC4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetInMpCutscene call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsInMpCutscene() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CC27C9FA2040220);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsInMpCutscene call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsPlayerInMpCutscene(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63F9EE203C3619F2);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsPlayerInMpCutscene call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xFAC18E7356BD3210() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAC18E7356BD3210);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFAC18E7356BD3210 call failed" << Log::Endl;
	}
}

EXPORT void Native_setNetworkVehicleRespotTimer(int32_t _netId, int32_t _time, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC51713AB6EC36E8);
	ctx->Reset();
	ctx->Push(_netId);
	ctx->Push(_time);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNetworkVehicleRespotTimer call failed" << Log::Endl;
	}
}

EXPORT void Native_setNetworkVehicleAsGhost(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6274C4712850841E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNetworkVehicleAsGhost call failed" << Log::Endl;
	}
}

EXPORT void Native_setNetworkVehiclePositionUpdateMultiplier(int32_t _vehicle, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2A707979FE754DC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNetworkVehiclePositionUpdateMultiplier call failed" << Log::Endl;
	}
}

EXPORT void Native_setNetworkEnableVehiclePositionCorrection(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x838DA0936A24ED4D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNetworkEnableVehiclePositionCorrection call failed" << Log::Endl;
	}
}

EXPORT void Native_setLocalPlayerAsGhost(bool _toggle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FFE9B4144F9712F);
	ctx->Reset();
	ctx->Push(_toggle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setLocalPlayerAsGhost call failed" << Log::Endl;
	}
}

EXPORT bool Native_isEntityGhostedToLocalPlayer(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21D04D7BC538C146);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityGhostedToLocalPlayer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x13F1FCB111B820B0(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13F1FCB111B820B0);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x13F1FCB111B820B0 call failed" << Log::Endl;
	}
}

EXPORT void Native_setRelationshipToPlayer(int32_t _player, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7C511FA1C5BDA38);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRelationshipToPlayer call failed" << Log::Endl;
	}
}

EXPORT void Native_setGhostedEntityAlpha(int32_t _alpha) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x658500AE6D723A7E);
	ctx->Reset();
	ctx->Push(_alpha);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGhostedEntityAlpha call failed" << Log::Endl;
	}
}

EXPORT void Native_resetGhostedEntityAlpha() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17330EBF2F2124A8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetGhostedEntityAlpha call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetEntityGhostedWithOwner(int32_t _entity, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4BA166079D658ED4);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetEntityGhostedWithOwner call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD7B6C73CAD419BCF(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7B6C73CAD419BCF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD7B6C73CAD419BCF call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x7EF7649B64D7FF10(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EF7649B64D7FF10);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7EF7649B64D7FF10 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_usePlayerColourInsteadOfTeamColour(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77758139EC9B66C7);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native usePlayerColourInsteadOfTeamColour call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_networkCreateSynchronisedScene(float _x, float _y, float _z, float _xRot, float _yRot, float _zRot, int32_t _rotationOrder, bool _useOcclusionPortal, bool _looped, float _p9, float _animTime, float _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7CD6BC4C2BBDD526);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_rotationOrder);
	ctx->Push(_useOcclusionPortal);
	ctx->Push(_looped);
	ctx->Push(_p9);
	ctx->Push(_animTime);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCreateSynchronisedScene call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkAddPedToSynchronisedScene(int32_t _ped, int32_t _netScene, const char* _animDict, const char* _animnName, float _speed, float _speedMultiplier, int32_t _duration, int32_t _flag, float _playbackRate, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x742A637471BCECD9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_netScene);
	ctx->Push(_animDict);
	ctx->Push(_animnName);
	ctx->Push(_speed);
	ctx->Push(_speedMultiplier);
	ctx->Push(_duration);
	ctx->Push(_flag);
	ctx->Push(_playbackRate);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAddPedToSynchronisedScene call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA5EAFE473E45C442(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5EAFE473E45C442);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA5EAFE473E45C442 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkAddEntityToSynchronisedScene(int32_t _entity, int32_t _netScene, const char* _animDict, const char* _animName, float _speed, float _speedMulitiplier, int32_t _flag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2404D68CBC855FA);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_netScene);
	ctx->Push(_animDict);
	ctx->Push(_animName);
	ctx->Push(_speed);
	ctx->Push(_speedMulitiplier);
	ctx->Push(_flag);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAddEntityToSynchronisedScene call failed" << Log::Endl;
	}
}

EXPORT void Native__0x45F35C0EDC33B03B(int32_t _netScene, int32_t _modelHash, float _x, float _y, float _z, float _p5, const char* _p6, float _p7, float _p8, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45F35C0EDC33B03B);
	ctx->Reset();
	ctx->Push(_netScene);
	ctx->Push(_modelHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x45F35C0EDC33B03B call failed" << Log::Endl;
	}
}

EXPORT void Native_networkAddSynchronisedSceneCamera(int32_t _netScene, const char* _animDict, const char* _animName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF8BD3B0BD6D42D7);
	ctx->Reset();
	ctx->Push(_netScene);
	ctx->Push(_animDict);
	ctx->Push(_animName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAddSynchronisedSceneCamera call failed" << Log::Endl;
	}
}

EXPORT void Native_networkAttachSynchronisedSceneToEntity(int32_t _netScene, int32_t _entity, int32_t _bone) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x478DCBD2A98B705A);
	ctx->Reset();
	ctx->Push(_netScene);
	ctx->Push(_entity);
	ctx->Push(_bone);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAttachSynchronisedSceneToEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_networkStartSynchronisedScene(int32_t _netScene) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A1B3FCDB36C8697);
	ctx->Reset();
	ctx->Push(_netScene);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkStartSynchronisedScene call failed" << Log::Endl;
	}
}

EXPORT void Native_networkStopSynchronisedScene(int32_t _netScene) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC254481A4574CB2F);
	ctx->Reset();
	ctx->Push(_netScene);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkStopSynchronisedScene call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_networkGetLocalSceneFromNetworkId(int32_t _netId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02C40BF885C567B6);
	ctx->Reset();
	ctx->Push(_netId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetLocalSceneFromNetworkId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0xC9B43A33D09CADA7(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9B43A33D09CADA7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC9B43A33D09CADA7 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x144DA052257AE7D8(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x144DA052257AE7D8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x144DA052257AE7D8 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xFB1F9381E80FA13F(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB1F9381E80FA13F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFB1F9381E80FA13F call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkStartRespawnSearchForPlayer(int32_t _player, float _x, float _y, float _z, float _radius, float _p5, float _p6, float _p7, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A6FFA2433E2F14C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkStartRespawnSearchForPlayer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkStartRespawnSearchInAngledAreaForPlayer(int32_t _player, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, float _p8, float _p9, float _p10, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4BA92A18502BCA61);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkStartRespawnSearchInAngledAreaForPlayer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkQueryRespawnResults(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C891A251567DFCE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkQueryRespawnResults call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkCancelRespawnSearch() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB8F2A6F3DF08CBE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCancelRespawnSearch call failed" << Log::Endl;
	}
}

EXPORT void Native_networkGetRespawnResult(int32_t _randomInt, vector3_t& _coordinates, float& _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x371EA43692861CF1);
	ctx->Reset();
	ctx->Push(_randomInt);
	alt::INative::Vector3 converted_coordinates { _coordinates.x, 0, _coordinates.y, 0, _coordinates.z };
	ctx->Push(&converted_coordinates);
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetRespawnResult call failed" << Log::Endl;
	}
	_coordinates.x = converted_coordinates.x;
	_coordinates.y = converted_coordinates.y;
	_coordinates.z = converted_coordinates.z;
}

EXPORT int32_t Native_networkGetRespawnResultFlags(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C34F1208B8923FD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetRespawnResultFlags call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkStartSoloTutorialSession() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17E0198B3882C2CB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkStartSoloTutorialSession call failed" << Log::Endl;
	}
}

EXPORT void Native__0xFB680D403909DC70(int32_t _teamId, int32_t _instanceId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB680D403909DC70);
	ctx->Reset();
	ctx->Push(_teamId);
	ctx->Push(_instanceId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFB680D403909DC70 call failed" << Log::Endl;
	}
}

EXPORT void Native_networkEndTutorialSession() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0AFAFF5A51D72F7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEndTutorialSession call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsInTutorialSession() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADA24309FE08DACF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsInTutorialSession call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xB37E4E6A2388CA7B() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB37E4E6A2388CA7B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB37E4E6A2388CA7B call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsTutorialSessionChangePending() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35F0B98A8387274D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsTutorialSessionChangePending call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetPlayerTutorialSessionInstance(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B39236746714134);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPlayerTutorialSessionInstance call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkIsPlayerEqualToIndex(int32_t _player, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DE986FC9A87C474);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsPlayerEqualToIndex call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkConcealPlayer(int32_t _player, bool _toggle, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBDF066252829606);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkConcealPlayer call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsPlayerConcealed(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x919B3C98ED8292F9);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsPlayerConcealed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkConcealEntity(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1632BE0AC1E62876);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkConcealEntity call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsEntityConcealed(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71302EC70689052A);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsEntityConcealed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkOverrideClockTime(int32_t _hours, int32_t _minutes, int32_t _seconds) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE679E3E06E363892);
	ctx->Reset();
	ctx->Push(_hours);
	ctx->Push(_minutes);
	ctx->Push(_seconds);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkOverrideClockTime call failed" << Log::Endl;
	}
}

EXPORT void Native_networkOverrideClockMillisecondsPerGameMinute(int32_t _ms) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42BF1D2E723B6D7E);
	ctx->Reset();
	ctx->Push(_ms);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkOverrideClockMillisecondsPerGameMinute call failed" << Log::Endl;
	}
}

EXPORT void Native_networkClearClockTimeOverride() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD972DF67326F966E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClearClockTimeOverride call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsClockTimeOverridden() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7C95D322FF57522);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsClockTimeOverridden call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkAddEntityArea(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x494C8FB299290269);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAddEntityArea call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkAddEntityAngledArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x376C6375BA60293A);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAddEntityAngledArea call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkAddEntityDisplayedBoundaries(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25B99872D588A101);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAddEntityDisplayedBoundaries call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x2B1C623823DB0D9D(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B1C623823DB0D9D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2B1C623823DB0D9D call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkRemoveEntityArea(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93CF869BAA0C4874);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRemoveEntityArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkEntityAreaDoesExist(int32_t _areaHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE64A3CA08DFA37A9);
	ctx->Reset();
	ctx->Push(_areaHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEntityAreaDoesExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x4DF7CFFF471A7FB1(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4DF7CFFF471A7FB1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4DF7CFFF471A7FB1 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkEntityAreaIsOccupied(int32_t _areaHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A2D4E8BF4265B0F);
	ctx->Reset();
	ctx->Push(_areaHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkEntityAreaIsOccupied call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkUseHighPrecisionBlending(int32_t _netID, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B1813ABA29016C5);
	ctx->Reset();
	ctx->Push(_netID);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkUseHighPrecisionBlending call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA6FCECCF4721D679(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6FCECCF4721D679);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA6FCECCF4721D679 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x95BAF97C82464629(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95BAF97C82464629);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x95BAF97C82464629 call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkRequestCloudBackgroundScripts() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x924426BFFD82E915);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRequestCloudBackgroundScripts call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsCloudBackgroundScriptRequestPending() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8132C0EB8B2B3293);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsCloudBackgroundScriptRequestPending call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkRequestCloudTunables() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42FB3B532D526E6C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRequestCloudTunables call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsTunableCloudRequestPending() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0467C11ED88B7D28);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsTunableCloudRequestPending call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetTunableCloudCrc() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10BD227A753B0D84);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetTunableCloudCrc call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_networkDoesTunableExist(const char* _tunableContext, const char* _tunableName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85E5F8B9B898B20A);
	ctx->Reset();
	ctx->Push(_tunableContext);
	ctx->Push(_tunableName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDoesTunableExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkAccessTunableInt(const char* _tunableContext, const char* _tunableName, int32_t& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BE1146DFD5D4468);
	ctx->Reset();
	ctx->Push(_tunableContext);
	ctx->Push(_tunableName);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAccessTunableInt call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkAccessTunableFloat(const char* _tunableContext, const char* _tunableName, float& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE5608CA7BC163A5F);
	ctx->Reset();
	ctx->Push(_tunableContext);
	ctx->Push(_tunableName);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAccessTunableFloat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkAccessTunableBool(const char* _tunableContext, const char* _tunableName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA6A47A573ABB75A);
	ctx->Reset();
	ctx->Push(_tunableContext);
	ctx->Push(_tunableName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAccessTunableBool call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkDoesTunableExistHash(int32_t _tunableContext, int32_t _tunableName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4E53E1419D81127);
	ctx->Reset();
	ctx->Push(_tunableContext);
	ctx->Push(_tunableName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDoesTunableExistHash call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkAllocateTunablesRegistrationDataMap() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAFC23AEE23868DB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAllocateTunablesRegistrationDataMap call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkAccessTunableIntHash(int32_t _tunableContext, int32_t _tunableName, int32_t& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40FCE03E50E8DBE8);
	ctx->Reset();
	ctx->Push(_tunableContext);
	ctx->Push(_tunableName);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAccessTunableIntHash call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkRegisterTunableIntHash(int32_t _contextHash, int32_t _nameHash, int32_t& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A8B55FDA4C8DDEF);
	ctx->Reset();
	ctx->Push(_contextHash);
	ctx->Push(_nameHash);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRegisterTunableIntHash call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkAccessTunableFloatHash(int32_t _tunableContext, int32_t _tunableName, float& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x972BC203BBC4C4D5);
	ctx->Reset();
	ctx->Push(_tunableContext);
	ctx->Push(_tunableName);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAccessTunableFloatHash call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkRegisterTunableFloatHash(int32_t _contextHash, int32_t _nameHash, float& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1950DAE9848A4739);
	ctx->Reset();
	ctx->Push(_contextHash);
	ctx->Push(_nameHash);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRegisterTunableFloatHash call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkAccessTunableBoolHash(int32_t _tunableContext, int32_t _tunableName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA16B69D93D71A45);
	ctx->Reset();
	ctx->Push(_tunableContext);
	ctx->Push(_tunableName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAccessTunableBoolHash call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkRegisterTunableBoolHash(int32_t _contextHash, int32_t _nameHash, bool& _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x697F508861875B42);
	ctx->Reset();
	ctx->Push(_contextHash);
	ctx->Push(_nameHash);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkRegisterTunableBoolHash call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkTryAccessTunableBoolHash(int32_t _tunableContext, int32_t _tunableName, bool _defaultValue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7420099936CE286);
	ctx->Reset();
	ctx->Push(_tunableContext);
	ctx->Push(_tunableName);
	ctx->Push(_defaultValue);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkTryAccessTunableBoolHash call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_networkGetContentModifierListId(int32_t _contentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x187382F8A3E0A6C3);
	ctx->Reset();
	ctx->Push(_contentHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetContentModifierListId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x7DB53B37A2F211A0() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7DB53B37A2F211A0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7DB53B37A2F211A0 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkResetBodyTracker() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72433699B4E6DD64);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkResetBodyTracker call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_networkGetNumBodyTrackers() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD38C4A6D047C019D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetNumBodyTrackers call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x2E0BF682CC778D49(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E0BF682CC778D49);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2E0BF682CC778D49 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x0EDE326D47CD0F3E(int32_t _ped, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0EDE326D47CD0F3E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0EDE326D47CD0F3E call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkSetVehicleWheelsDestructible(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x890E2C5ABED7236D);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetVehicleWheelsDestructible call failed" << Log::Endl;
	}
}

EXPORT void Native__0x38B7C51AB1EDC7D8(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38B7C51AB1EDC7D8);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x38B7C51AB1EDC7D8 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x3FC795691834481D(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3FC795691834481D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3FC795691834481D call failed" << Log::Endl;
	}
}

EXPORT void Native_networkExplodeVehicle(int32_t _vehicle, bool _isAudible, bool _isInvisible, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x301A42153C9AD707);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_isAudible);
	ctx->Push(_isInvisible);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkExplodeVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2A5E0621DD815A9A(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A5E0621DD815A9A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2A5E0621DD815A9A call failed" << Log::Endl;
	}
}

EXPORT void Native_networkUseLogarithmicBlendingThisFrame(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD71A4ECAB22709E);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkUseLogarithmicBlendingThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_networkOverrideCoordsAndHeading(int32_t _entity, float _x, float _y, float _z, float _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7E30DE9272B6D49);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkOverrideCoordsAndHeading call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE6717E652B8C8D8A(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6717E652B8C8D8A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE6717E652B8C8D8A call failed" << Log::Endl;
	}
}

EXPORT void Native_networkDisableProximityMigration(int32_t _netID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x407091CF6037118E);
	ctx->Reset();
	ctx->Push(_netID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDisableProximityMigration call failed" << Log::Endl;
	}
}

EXPORT void Native_networkSetPropertyId(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1775961C2FBBCB5C);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkSetPropertyId call failed" << Log::Endl;
	}
}

EXPORT void Native_networkClearPropertyId() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2B82527CA77053E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkClearPropertyId call failed" << Log::Endl;
	}
}

EXPORT void Native__0x367EF5E2F439B4C6(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x367EF5E2F439B4C6);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x367EF5E2F439B4C6 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x94538037EE44F5CF(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94538037EE44F5CF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x94538037EE44F5CF call failed" << Log::Endl;
	}
}

EXPORT void Native_networkCacheLocalPlayerHeadBlendData() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD0BE0BFC927EAC1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkCacheLocalPlayerHeadBlendData call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkHasCachedPlayerHeadBlendData(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x237D5336A9A54108);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasCachedPlayerHeadBlendData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkApplyCachedPlayerHeadBlendData(int32_t _ped, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99B72C7ABDE5C910);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkApplyCachedPlayerHeadBlendData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getNumCommerceItems() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2EAC213D5EA0623);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumCommerceItems call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isCommerceDataValid() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA14EEF5B7CD2C30);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCommerceDataValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xB606E6CC59664972(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB606E6CC59664972);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB606E6CC59664972 call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x1D4DC17C38FEAFF0() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D4DC17C38FEAFF0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1D4DC17C38FEAFF0 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT const char* Native_getCommerceItemId(int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x662635855957C411);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCommerceItemId call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_getCommerceItemName(int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4271092CA7EDF48);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCommerceItemName call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_getCommerceProductPrice(int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA94551B50B4932C);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCommerceProductPrice call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT int32_t Native_getCommerceItemNumCats(int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A7776C709904AB0);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCommerceItemNumCats call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT const char* Native_getCommerceItemCat(int32_t _index, int32_t _index2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F44CBF56D79FAC0);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_index2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCommerceItemCat call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT void Native_openCommerceStore(const char* _p0, const char* _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58C21165F6545892);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native openCommerceStore call failed" << Log::Endl;
	}
}

EXPORT bool Native_isCommerceStoreOpen() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2EAC52B4019E2782);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCommerceStoreOpen call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setStoreEnabled(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9641A9FF718E9C5E);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setStoreEnabled call failed" << Log::Endl;
	}
}

EXPORT bool Native_requestCommerceItemImage(int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2F952104FC6DD4B);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestCommerceItemImage call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_releaseAllCommerceItemImages() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72D0706CD6CCDB58);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native releaseAllCommerceItemImages call failed" << Log::Endl;
	}
}

EXPORT const char* Native_getCommerceItemTexturename(int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x722F5D28B61C5EA8);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCommerceItemTexturename call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT bool Native_isStoreAvailableToUser() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x883D79C4071E18B3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isStoreAvailableToUser call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x265635150FB0D82E() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x265635150FB0D82E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x265635150FB0D82E call failed" << Log::Endl;
	}
}

EXPORT void Native__0x444C4525ECE0A4B9() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x444C4525ECE0A4B9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x444C4525ECE0A4B9 call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x59328EB08C5CEB2B() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59328EB08C5CEB2B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x59328EB08C5CEB2B call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xFAE628F1E9ADB239(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAE628F1E9ADB239);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFAE628F1E9ADB239 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x754615490A029508() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x754615490A029508);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x754615490A029508 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x155467ACA0F55705() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x155467ACA0F55705);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x155467ACA0F55705 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_cloudDeleteMemberFile(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC64DED7EF0D2FE37);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cloudDeleteMemberFile call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_cloudHasRequestCompleted(int32_t _handle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C61B39930D045DA);
	ctx->Reset();
	ctx->Push(_handle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cloudHasRequestCompleted call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_cloudDidRequestSucceed(int32_t _handle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A3D5568AF297CD5);
	ctx->Reset();
	ctx->Push(_handle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cloudDidRequestSucceed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_cloudCheckAvailability() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F18196C8D38768D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cloudCheckAvailability call failed" << Log::Endl;
	}
}

EXPORT bool Native_cloudIsCheckingAvailability() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7ABAC5DE675EE3B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cloudIsCheckingAvailability call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_cloudGetAvailabilityCheckResult() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B0CC10720653F3B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native cloudGetAvailabilityCheckResult call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x8B0C2964BA471961() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B0C2964BA471961);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8B0C2964BA471961 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x88B588B41FF7868E() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88B588B41FF7868E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x88B588B41FF7868E call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x67FC09BC554A75E5() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67FC09BC554A75E5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x67FC09BC554A75E5 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_clearLaunchParams() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x966DD84FB6A46017);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearLaunchParams call failed" << Log::Endl;
	}
}

EXPORT bool Native_ugcCopyContent(int32_t& _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x152D90E4C1B4738A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcCopyContent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x9FEDF86898F100E9() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FEDF86898F100E9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9FEDF86898F100E9 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_ugcHasCreateFinished() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E24341A7F92A74B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcHasCreateFinished call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_ugcDidCreateSucceed() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24E4E51FC16305F9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcDidCreateSucceed call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_ugcGetCreateResult() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFBC5E768C7A77A6A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetCreateResult call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_ugcGetCreateContentId() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC55A0B40FFB1ED23);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetCreateContentId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_ugcClearCreateResult() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17440AA15D1D3739);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcClearCreateResult call failed" << Log::Endl;
	}
}

EXPORT bool Native_ugcQueryMyContent(int32_t _p0, int32_t _p1, int32_t& _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BF438815F5D96EA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcQueryMyContent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x692D58DF40657E8C(int32_t _p0, int32_t _p1, int32_t _p2, const char* _p3, int32_t _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x692D58DF40657E8C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x692D58DF40657E8C call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcQueryByContentId(const char* _contentId, bool _latestVersion, const char* _contentTypeName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x158EC424F35EC469);
	ctx->Reset();
	ctx->Push(_contentId);
	ctx->Push(_latestVersion);
	ctx->Push(_contentTypeName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcQueryByContentId call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcQueryByContentIds(int32_t& _data, int32_t _count, bool _latestVersion, const char* _contentTypeName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7397A83F7A2A462);
	ctx->Reset();
	ctx->Push(_data);
	ctx->Push(_count);
	ctx->Push(_latestVersion);
	ctx->Push(_contentTypeName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcQueryByContentIds call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcQueryRecentlyCreatedContent(int32_t _offset, int32_t _count, const char* _contentTypeName, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D4CB481FAC835E8);
	ctx->Reset();
	ctx->Push(_offset);
	ctx->Push(_count);
	ctx->Push(_contentTypeName);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcQueryRecentlyCreatedContent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcGetBookmarkedContent(int32_t _p0, int32_t _p1, const char* _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5A4B59980401588);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetBookmarkedContent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcGetMyContent(int32_t _p0, int32_t _p1, const char* _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3195F8DD0D531052);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetMyContent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcGetFriendContent(int32_t _p0, int32_t _p1, const char* _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9E1CCAE8BA4C281);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetFriendContent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcGetCrewContent(int32_t _p0, int32_t _p1, int32_t _p2, const char* _p3, int32_t& _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F6E2821885CAEE2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetCrewContent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcGetGetByCategory(int32_t _p0, int32_t _p1, int32_t _p2, const char* _p3, int32_t& _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x678BB03C1A3BD51E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetGetByCategory call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_setBalanceAddMachine(const char* _contentId, const char* _contentTypeName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x815E5E3073DA1D67);
	ctx->Reset();
	ctx->Push(_contentId);
	ctx->Push(_contentTypeName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBalanceAddMachine call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_setBalanceAddMachines(int32_t& _data, int32_t _dataCount, const char* _contentTypeName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8322EEB38BE7C26);
	ctx->Reset();
	ctx->Push(_data);
	ctx->Push(_dataCount);
	ctx->Push(_contentTypeName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBalanceAddMachines call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xA7862BC5ED1DFD7E(int32_t _p0, int32_t _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7862BC5ED1DFD7E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA7862BC5ED1DFD7E call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x97A770BEEF227E2B(int32_t _p0, int32_t _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97A770BEEF227E2B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x97A770BEEF227E2B call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x5324A0E3E4CE3570(int32_t _p0, int32_t _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5324A0E3E4CE3570);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5324A0E3E4CE3570 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_ugcCancelQuery() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE9B99B6853181409);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcCancelQuery call failed" << Log::Endl;
	}
}

EXPORT bool Native_ugcIsGetting() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD53ACDBEF24A46E8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcIsGetting call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcHasGetFinished() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02ADA21EA2F6918F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcHasGetFinished call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_ugcDidGetSucceed() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x941E5306BCD7C2C7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcDidGetSucceed call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xC87E740D9F3872CC() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC87E740D9F3872CC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC87E740D9F3872CC call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_ugcGetQueryResult() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDF7F927136C224B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetQueryResult call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_ugcGetContentNum() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0A6138401BCB837);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentNum call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_ugcGetContentTotal() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x769951E2455E2EB5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentTotal call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_ugcGetContentHash() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A17A27D75C74887);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_ugcClearQueryResults() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA96394A0EECFA65);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcClearQueryResults call failed" << Log::Endl;
	}
}

EXPORT const char* Native_ugcGetContentUserId(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD67AD041A394C9C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentUserId call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT bool Native__0x584770794D758C18(int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x584770794D758C18);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x584770794D758C18 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x8C8D2739BA44AF0F(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C8D2739BA44AF0F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8C8D2739BA44AF0F call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_ugcGetContentUserName(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x703F12425ECA8BF5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentUserName call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0xAEAB987727C5A8A4(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAEAB987727C5A8A4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAEAB987727C5A8A4 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_ugcGetContentCategory(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7BAB11E7C9C6C5A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentCategory call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT const char* Native_ugcGetContentId(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55AA95F481D694D2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentId call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_ugcGetRootContentId(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0173D6BFF4E0348);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetRootContentId call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT int32_t Native_ugcGetContentName(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF09786A7FCAB582);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentName call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_ugcGetContentDescriptionHash(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7CF0448787B23758);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentDescriptionHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT const char* Native_ugcGetContentPath(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAF6BABF9E7CCC13);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentPath call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT void Native_ugcGetContentUpdatedDate(int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFD115B373C0DF63);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentUpdatedDate call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_ugcGetContentFileVersion(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37025B27D9B658B1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentFileVersion call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x1D610EB0FEA716D9(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D610EB0FEA716D9);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1D610EB0FEA716D9 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x7FCC39C46C3C03BD(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FCC39C46C3C03BD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7FCC39C46C3C03BD call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_ugcGetContentLanguage(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32DD916F3F7C9672);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentLanguage call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_ugcGetContentIsPublished(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3054F114121C21EA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentIsPublished call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcGetContentIsVerified(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9240A96C74CCA13);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentIsVerified call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_ugcGetContentRating(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1ACCFBA3D8DAB2EE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentRating call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_ugcGetContentRatingCount(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x759299C5BB31D2A9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentRatingCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_ugcGetContentRatingPositiveCount(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87E5C46C187FE0AE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentRatingPositiveCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_ugcGetContentRatingNegativeCount(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E548C0D7AE39FF9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentRatingNegativeCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_ugcGetContentHasPlayerRecord(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70EA8DA57840F9BE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentHasPlayerRecord call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcGetContentHasPlayerBookmarked(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x993CBE59D350D225);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetContentHasPlayerBookmarked call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_ugcRequestContentDataFromIndex(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x171DF6A0C07FB3DC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcRequestContentDataFromIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_ugcRequestContentDataFromParams(const char* _contentTypeName, const char* _contentId, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FD2990AF016795E);
	ctx->Reset();
	ctx->Push(_contentTypeName);
	ctx->Push(_contentId);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcRequestContentDataFromParams call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_ugcRequestCachedDescription(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E0165278F6339EE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcRequestCachedDescription call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x2D5DC831176D0114(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D5DC831176D0114);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2D5DC831176D0114 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xEBFA8D50ADDC54C4(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBFA8D50ADDC54C4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEBFA8D50ADDC54C4 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x162C23CA83ED0A62(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x162C23CA83ED0A62);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x162C23CA83ED0A62 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_ugcGetCachedDescription(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40F7E66472DF3E5C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetCachedDescription call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x5A34CD9C3C5BEC44(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A34CD9C3C5BEC44);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5A34CD9C3C5BEC44 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x68103E2247887242() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68103E2247887242);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x68103E2247887242 call failed" << Log::Endl;
	}
}

EXPORT bool Native_ugcPublish(const char* _contentId, const char* _baseContentId, const char* _contentTypeName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DE0F5F50D723CAA);
	ctx->Reset();
	ctx->Push(_contentId);
	ctx->Push(_baseContentId);
	ctx->Push(_contentTypeName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcPublish call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcSetBookmarked(const char* _contentId, bool _bookmarked, const char* _contentTypeName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x274A1519DFC1094F);
	ctx->Reset();
	ctx->Push(_contentId);
	ctx->Push(_bookmarked);
	ctx->Push(_contentTypeName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcSetBookmarked call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_ugcSetDeleted(int32_t& _p0, bool _p1, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD05D1A6C74DA3498);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcSetDeleted call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x45E816772E93A9DB() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45E816772E93A9DB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x45E816772E93A9DB call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_ugcHasModifyFinished() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x299EF3C576773506);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcHasModifyFinished call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x793FF272D5B365F4() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x793FF272D5B365F4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x793FF272D5B365F4 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_ugcGetModifyResult() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A0A3D1A186A5508);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetModifyResult call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_ugcClearModifyResult() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1E5E0204A6FCC70);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcClearModifyResult call failed" << Log::Endl;
	}
}

EXPORT bool Native__0xB746D20B17F2A229(int32_t& _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB746D20B17F2A229);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB746D20B17F2A229 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x63B406D7884BFA95() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63B406D7884BFA95);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x63B406D7884BFA95 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x4D02279C83BE69FE() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D02279C83BE69FE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4D02279C83BE69FE call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_ugcGetCreatorNum() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x597F8DBA9B206FC7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcGetCreatorNum call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_ugcPoliciesMakePrivate(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CAE833B0EE0C500);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcPoliciesMakePrivate call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_ugcClearOfflineQuery() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61A885D3F7CFEE9A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcClearOfflineQuery call failed" << Log::Endl;
	}
}

EXPORT void Native_ugcSetQueryDataFromOffline(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF98DDE0A8ED09323);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcSetQueryDataFromOffline call failed" << Log::Endl;
	}
}

EXPORT void Native__0xFD75DABC0957BF33(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD75DABC0957BF33);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFD75DABC0957BF33 call failed" << Log::Endl;
	}
}

EXPORT bool Native_ugcIsLanguageSupported(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF53E48461B71EECB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcIsLanguageSupported call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_facebookSetHeistComplete(const char* _heistName, int32_t _cashEarned, int32_t _xpEarned) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x098AB65B9ED9A9EC);
	ctx->Reset();
	ctx->Push(_heistName);
	ctx->Push(_cashEarned);
	ctx->Push(_xpEarned);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native facebookSetHeistComplete call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_facebookSetCreateCharacterComplete() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC48473142545431);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native facebookSetCreateCharacterComplete call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_facebookSetMilestoneComplete(int32_t _milestoneId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AE1F1653B554AB9);
	ctx->Reset();
	ctx->Push(_milestoneId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native facebookSetMilestoneComplete call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_facebookIsSendingData() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62B9FEC9A11F10EF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native facebookIsSendingData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_facebookDoUnkCheck() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA75E2B6733DA5142);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native facebookDoUnkCheck call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_facebookIsAvailable() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43865688AE10F0D7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native facebookIsAvailable call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_textureDownloadRequest(int32_t& _gamerHandle, const char* _filePath, const char* _name, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16160DA74A8E74A2);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	ctx->Push(_filePath);
	ctx->Push(_name);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native textureDownloadRequest call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_titleTextureDownloadRequest(const char* _filePath, const char* _name, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B203B4AFDE53A4F);
	ctx->Reset();
	ctx->Push(_filePath);
	ctx->Push(_name);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native titleTextureDownloadRequest call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_ugcTextureDownloadRequest(const char* _p0, int32_t _p1, int32_t _p2, int32_t _p3, const char* _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x308F96458B7087CC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ugcTextureDownloadRequest call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_textureDownloadRelease(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x487EB90B98E9FB19);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native textureDownloadRelease call failed" << Log::Endl;
	}
}

EXPORT bool Native_textureDownloadHasFailed(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5776ED562C134687);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native textureDownloadHasFailed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT const char* Native_textureDownloadGetName(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3448505B6E35262D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native textureDownloadGetName call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT int32_t Native_getStatusOfTextureDownload(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BD6C6DEA20E82C6);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getStatusOfTextureDownload call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x60EDD13EB3AC1FF3() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60EDD13EB3AC1FF3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x60EDD13EB3AC1FF3 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkShouldShowConnectivityTroubleshooting() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82A2B386716608F1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkShouldShowConnectivityTroubleshooting call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkIsCableConnected() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFFB25453D8600F9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsCableConnected call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkGetRosPrivilege9() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66B59CFFD78467AF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetRosPrivilege9 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHaveRosSocialClubPriv() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x606E4D3E3CCCF3EB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHaveRosSocialClubPriv call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHaveRosBannedPriv() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8020A73847E0CA7D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHaveRosBannedPriv call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHaveRosCreateTicketPriv() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0AD7E2AF5349F61);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHaveRosCreateTicketPriv call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHaveRosMultiplayerPriv() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F91D5D0B36AA310);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHaveRosMultiplayerPriv call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHaveRosLeaderboardWritePriv() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x422D396F80A96547);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHaveRosLeaderboardWritePriv call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHasRosPrivilege(int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA699957E60D80214);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasRosPrivilege call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkHasRosPrivilegeEndDate(int32_t _privilege, int32_t& _banType, int32_t& _timeData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC22912B1D85F26B1);
	ctx->Reset();
	ctx->Push(_privilege);
	ctx->Push(_banType);
	ctx->Push(_timeData);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasRosPrivilegeEndDate call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkGetRosPrivilege24() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x593570C289A77688);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetRosPrivilege24 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_networkGetRosPrivilege25() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x91B87C55093DE351);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetRosPrivilege25 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x36391F397731595D(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36391F397731595D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x36391F397731595D call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkStartUserContentPermissionsCheck(int32_t& _netHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEB2B99A1AF1A2A6);
	ctx->Reset();
	ctx->Push(_netHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkStartUserContentPermissionsCheck call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x9465E683B12D3F6B() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9465E683B12D3F6B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9465E683B12D3F6B call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCA59CCAE5D01E4CE() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA59CCAE5D01E4CE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCA59CCAE5D01E4CE call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkHasGameBeenAltered() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x659CF2EF7F550C4F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkHasGameBeenAltered call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkUpdatePlayerScars() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7C7F6AD6424304B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkUpdatePlayerScars call failed" << Log::Endl;
	}
}

EXPORT void Native_networkDisableLeaveRemotePedBehind(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC505036A35AFD01B);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkDisableLeaveRemotePedBehind call failed" << Log::Endl;
	}
}

EXPORT void Native_networkAllowLocalEntityAttachment(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x267C78C60E806B9A);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkAllowLocalEntityAttachment call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6BFF5F84102DF80A(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6BFF5F84102DF80A);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6BFF5F84102DF80A call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5C497525F803486B() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C497525F803486B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5C497525F803486B call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x6FB7BB3607D27FA2() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FB7BB3607D27FA2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6FB7BB3607D27FA2 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x45A83257ED02D9BC() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45A83257ED02D9BC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x45A83257ED02D9BC call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkIsConnectionEndpointRelayServer(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16D3D49902F697BB);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkIsConnectionEndpointRelayServer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT float Native_networkGetAverageLatencyForPlayer(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD414BE129BB81B32);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetAverageLatencyForPlayer call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_networkGetAverageLatencyForPlayer2(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E3A041ED6AC2B45);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetAverageLatencyForPlayer2 call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_networkGetAveragePacketLossForPlayer(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x350C23949E43686C);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetAveragePacketLossForPlayer call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native_networkGetNumUnackedForPlayer(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF8FCF9FFC458A1C);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetNumUnackedForPlayer call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetUnreliableResendCountForPlayer(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3765C3A3E8192E10);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetUnreliableResendCountForPlayer call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkGetOldestResendCountForPlayer(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52C1EADAF7B10302);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetOldestResendCountForPlayer call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkReportMyself() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5626D9D6810730D5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkReportMyself call failed" << Log::Endl;
	}
}

EXPORT vector3_t Native__0x64D779659BC37B19(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x64D779659BC37B19);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x64D779659BC37B19 call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native_networkGetPlayerCoords(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x125E6D638B8605D4);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetPlayerCoords call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native_networkGetLastVelocityReceived(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33DE49EDF4DDE77A);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkGetLastVelocityReceived call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native__0xAA5FAFCD2C5F5E47(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA5FAFCD2C5F5E47);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAA5FAFCD2C5F5E47 call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT int32_t Native__0xAEDF1BC1C133D6E3() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAEDF1BC1C133D6E3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAEDF1BC1C133D6E3 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x2555CF7DA5473794() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2555CF7DA5473794);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2555CF7DA5473794 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x6FD992C4A1C1B986() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FD992C4A1C1B986);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6FD992C4A1C1B986 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xDB663CC9FF3407A9(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB663CC9FF3407A9);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDB663CC9FF3407A9 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_networkUgcNav(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1447451DDB512F0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkUgcNav call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_createObject(int32_t _modelHash, float _x, float _y, float _z, bool _isNetwork, bool _bScriptHostObj, bool _dynamic) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x509D5878EB39E842);
	ctx->Reset();
	ctx->Push(_modelHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_isNetwork);
	ctx->Push(_bScriptHostObj);
	ctx->Push(_dynamic);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createObject call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_createObjectNoOffset(int32_t _modelHash, float _x, float _y, float _z, bool _isNetwork, bool _bScriptHostObj, bool _dynamic) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A294B2138ABB884);
	ctx->Reset();
	ctx->Push(_modelHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_isNetwork);
	ctx->Push(_bScriptHostObj);
	ctx->Push(_dynamic);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createObjectNoOffset call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_deleteObject(int32_t& _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x539E0AE3E6634B9F);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native deleteObject call failed" << Log::Endl;
	}
}

EXPORT bool Native_placeObjectOnGroundProperly(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58A850EAEE20FAA3);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native placeObjectOnGroundProperly call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_placeObjectOnGroundProperly2(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD76EEEF746057FD6);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native placeObjectOnGroundProperly2 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xAFE24E4D29249E4A(int32_t _object, float _p1, float _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFE24E4D29249E4A);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAFE24E4D29249E4A call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_slideObject(int32_t _object, float _toX, float _toY, float _toZ, float _speedX, float _speedY, float _speedZ, bool _collision) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FDFF4107B8C1147);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_toX);
	ctx->Push(_toY);
	ctx->Push(_toZ);
	ctx->Push(_speedX);
	ctx->Push(_speedY);
	ctx->Push(_speedZ);
	ctx->Push(_collision);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native slideObject call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setObjectTargettable(int32_t _object, bool _targettable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A7391690F5AFD81);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_targettable);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setObjectTargettable call failed" << Log::Endl;
	}
}

EXPORT void Native_setObjectForceVehiclesToAvoid(int32_t _object, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77F33F2CCF64B3AA);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setObjectForceVehiclesToAvoid call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getClosestObjectOfType(float _x, float _y, float _z, float _radius, int32_t _modelHash, bool _isMission, bool _p6, bool _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE143FA2249364369);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	ctx->Push(_isMission);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClosestObjectOfType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_hasObjectBeenBroken(int32_t _object, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8ABFB70C49CC43E2);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasObjectBeenBroken call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasClosestObjectOfTypeBeenBroken(float _p0, float _p1, float _p2, float _p3, int32_t _modelHash, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x761B0E69AC4D007E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_modelHash);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasClosestObjectOfTypeBeenBroken call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasClosestObjectOfTypeBeenCompletelyDestroyed(float _x, float _y, float _z, float _radius, int32_t _modelHash, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46494A2475701343);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasClosestObjectOfTypeBeenCompletelyDestroyed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x2542269291C6AC84(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2542269291C6AC84);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2542269291C6AC84 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT vector3_t Native_getObjectOffsetFromCoords(float _xPos, float _yPos, float _zPos, float _heading, float _xOffset, float _yOffset, float _zOffset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x163E252DE035A133);
	ctx->Reset();
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_heading);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getObjectOffsetFromCoords call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT int32_t Native_getCoordsAndRotationOfClosestObjectOfType(float _x, float _y, float _z, float _radius, int32_t _modelHash, vector3_t& _outPosition, vector3_t& _outRotation, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x163F8B586BC95F2A);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	alt::INative::Vector3 converted_outRotation { _outRotation.x, 0, _outRotation.y, 0, _outRotation.z };
	ctx->Push(&converted_outRotation);
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCoordsAndRotationOfClosestObjectOfType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
	_outRotation.x = converted_outRotation.x;
	_outRotation.y = converted_outRotation.y;
	_outRotation.z = converted_outRotation.z;
}

EXPORT void Native_setStateOfClosestDoorOfType(int32_t _type, float _x, float _y, float _z, bool _locked, float _heading, bool _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF82D8F1926A02C3D);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_locked);
	ctx->Push(_heading);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setStateOfClosestDoorOfType call failed" << Log::Endl;
	}
}

EXPORT void Native_getStateOfClosestDoorOfType(int32_t _type, float _x, float _y, float _z, bool& _locked, float& _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDC1A5B84AEF33FF);
	ctx->Reset();
	ctx->Push(_type);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_locked);
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getStateOfClosestDoorOfType call failed" << Log::Endl;
	}
}

EXPORT void Native_doorControl(int32_t _modelHash, float _x, float _y, float _z, bool _locked, float _xRotMult, float _yRotMult, float _zRotMult) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B12F9A24FABEDB0);
	ctx->Reset();
	ctx->Push(_modelHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_locked);
	ctx->Push(_xRotMult);
	ctx->Push(_yRotMult);
	ctx->Push(_zRotMult);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doorControl call failed" << Log::Endl;
	}
}

EXPORT void Native__0x006E4B040ED37EC3(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x006E4B040ED37EC3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x006E4B040ED37EC3 call failed" << Log::Endl;
	}
}

EXPORT void Native_addDoorToSystem(int32_t _doorHash, int32_t _modelHash, float _x, float _y, float _z, bool _p5, bool _scriptDoor, bool _isLocal) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F8838D03D1DC226);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push(_modelHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p5);
	ctx->Push(_scriptDoor);
	ctx->Push(_isLocal);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addDoorToSystem call failed" << Log::Endl;
	}
}

EXPORT void Native_removeDoorFromSystem(int32_t _doorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x464D8E1427156FE4);
	ctx->Reset();
	ctx->Push(_doorHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeDoorFromSystem call failed" << Log::Endl;
	}
}

EXPORT void Native_doorSystemSetDoorState(int32_t _doorHash, int32_t _state, bool _requestDoor, bool _forceUpdate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6BAB9442830C7F53);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push(_state);
	ctx->Push(_requestDoor);
	ctx->Push(_forceUpdate);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doorSystemSetDoorState call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_doorSystemGetDoorState(int32_t _doorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x160AA1B32F6139B8);
	ctx->Reset();
	ctx->Push(_doorHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doorSystemGetDoorState call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_doorSystemGetDoorPendingState(int32_t _doorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4BC2854478F3A749);
	ctx->Reset();
	ctx->Push(_doorHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doorSystemGetDoorPendingState call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_doorSystemSetAutomaticRate(int32_t _doorHash, float _rate, bool _requestDoor, bool _forceUpdate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03C27E13B42A0E82);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push(_rate);
	ctx->Push(_requestDoor);
	ctx->Push(_forceUpdate);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doorSystemSetAutomaticRate call failed" << Log::Endl;
	}
}

EXPORT void Native_doorSystemSetAutomaticDistance(int32_t _doorHash, float _distance, bool _requestDoor, bool _forceUpdate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BA001CB45CBF627);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push(_distance);
	ctx->Push(_requestDoor);
	ctx->Push(_forceUpdate);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doorSystemSetAutomaticDistance call failed" << Log::Endl;
	}
}

EXPORT void Native_doorSystemSetOpenRatio(int32_t _doorHash, float _ajar, bool _requestDoor, bool _forceUpdate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6E6FBA95C7324AC);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push(_ajar);
	ctx->Push(_requestDoor);
	ctx->Push(_forceUpdate);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doorSystemSetOpenRatio call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xE851471AEFC3374F(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE851471AEFC3374F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE851471AEFC3374F call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT float Native_doorSystemGetOpenRatio(int32_t _doorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65499865FCA6E5EC);
	ctx->Reset();
	ctx->Push(_doorHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doorSystemGetOpenRatio call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_doorSystemSetSpringRemoved(int32_t _doorHash, bool _removed, bool _requestDoor, bool _forceUpdate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC485E07E4F0B7958);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push(_removed);
	ctx->Push(_requestDoor);
	ctx->Push(_forceUpdate);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doorSystemSetSpringRemoved call failed" << Log::Endl;
	}
}

EXPORT void Native_doorSystemSetHoldOpen(int32_t _doorHash, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9B71952F78A2640);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doorSystemSetHoldOpen call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA85A21582451E951(int32_t _doorHash, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA85A21582451E951);
	ctx->Reset();
	ctx->Push(_doorHash);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA85A21582451E951 call failed" << Log::Endl;
	}
}

EXPORT bool Native_isDoorRegisteredWithSystem(int32_t _doorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC153C43EA202C8C1);
	ctx->Reset();
	ctx->Push(_doorHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isDoorRegisteredWithSystem call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isDoorClosed(int32_t _doorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC531EE8A1145A149);
	ctx->Reset();
	ctx->Push(_doorHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isDoorClosed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xC7F29CA00F46350E(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7F29CA00F46350E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC7F29CA00F46350E call failed" << Log::Endl;
	}
}

EXPORT void Native__0x701FDA1E82076BA4() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x701FDA1E82076BA4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x701FDA1E82076BA4 call failed" << Log::Endl;
	}
}

EXPORT bool Native_doorSystemGetIsPhysicsLoaded(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF97CDD4FC08FD34);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doorSystemGetIsPhysicsLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_doorSystemFindExistingDoor(float _x, float _y, float _z, int32_t _modelHash, int32_t& _outDoorHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x589F80B325CC82C5);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_modelHash);
	ctx->Push(_outDoorHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doorSystemFindExistingDoor call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isGarageEmpty(int32_t _garageHash, bool _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90E47239EA1980B8);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isGarageEmpty call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlayerEntirelyInsideGarage(int32_t _garageHash, int32_t _player, float _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x024A60DEB0EA69F0);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push(_player);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerEntirelyInsideGarage call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlayerPartiallyInsideGarage(int32_t _garageHash, int32_t _player, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1761DC5D8471CBAA);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push(_player);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerPartiallyInsideGarage call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_areEntitiesEntirelyInsideGarage(int32_t _garageHash, bool _p1, bool _p2, bool _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85B6C850546FDDE2);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native areEntitiesEntirelyInsideGarage call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isAnyEntityEntirelyInsideGarage(int32_t _garageHash, bool _p1, bool _p2, bool _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x673ED815D6E323B7);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAnyEntityEntirelyInsideGarage call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isObjectEntirelyInsideGarage(int32_t _garageHash, int32_t _entity, float _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x372EF6699146A1E4);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push(_entity);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isObjectEntirelyInsideGarage call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isObjectPartiallyInsideGarage(int32_t _garageHash, int32_t _entity, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0EED5A6BC7B237A);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push(_entity);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isObjectPartiallyInsideGarage call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_clearGarageArea(int32_t _garageHash, bool _isNetwork) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA05194260CDCDF9);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push(_isNetwork);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearGarageArea call failed" << Log::Endl;
	}
}

EXPORT void Native_clearObjectsInsideGarage(int32_t _garageHash, bool _vehicles, bool _peds, bool _objects, bool _isNetwork) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x190428512B240692);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push(_vehicles);
	ctx->Push(_peds);
	ctx->Push(_objects);
	ctx->Push(_isNetwork);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearObjectsInsideGarage call failed" << Log::Endl;
	}
}

EXPORT void Native__0x659F9D71F52843F8(int32_t _id, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x659F9D71F52843F8);
	ctx->Reset();
	ctx->Push(_id);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x659F9D71F52843F8 call failed" << Log::Endl;
	}
}

EXPORT void Native_enableSavingInGarage(int32_t _garageHash, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2E1A7133DD356A6);
	ctx->Reset();
	ctx->Push(_garageHash);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableSavingInGarage call failed" << Log::Endl;
	}
}

EXPORT void Native__0x66A49D021870FE88() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66A49D021870FE88);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x66A49D021870FE88 call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesObjectOfTypeExistAtCoords(float _x, float _y, float _z, float _radius, int32_t _hash, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFA48E2FF417213F);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_hash);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesObjectOfTypeExistAtCoords call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPointInAngledArea(float _xPos, float _yPos, float _zPos, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, bool _debug, bool _includeZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A70BAE8883E4C81);
	ctx->Reset();
	ctx->Push(_xPos);
	ctx->Push(_yPos);
	ctx->Push(_zPos);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push(_debug);
	ctx->Push(_includeZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPointInAngledArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setObjectAllowLowLodBuoyancy(int32_t _object, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D89D607CB3DD1D2);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setObjectAllowLowLodBuoyancy call failed" << Log::Endl;
	}
}

EXPORT void Native_setObjectPhysicsParams(int32_t _object, float _weight, float _p2, float _p3, float _p4, float _p5, float _gravity, float _p7, float _p8, float _p9, float _p10, float _buoyancy) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6DF6E90DE7DF90F);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_weight);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_gravity);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_buoyancy);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setObjectPhysicsParams call failed" << Log::Endl;
	}
}

EXPORT float Native_getObjectFragmentDamageHealth(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6FBFD079B8D0596);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getObjectFragmentDamageHealth call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setActivateObjectPhysicsAsSoonAsItIsUnfrozen(int32_t _object, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x406137F8EF90EAF5);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setActivateObjectPhysicsAsSoonAsItIsUnfrozen call failed" << Log::Endl;
	}
}

EXPORT bool Native_isAnyObjectNearPoint(float _x, float _y, float _z, float _range, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x397DC58FF00298D1);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_range);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAnyObjectNearPoint call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isObjectNearPoint(int32_t _objectHash, float _x, float _y, float _z, float _range) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C90FE4B381BA60A);
	ctx->Reset();
	ctx->Push(_objectHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_range);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isObjectNearPoint call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeObjectHighDetailModel(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A39DB43E47CF3AA);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeObjectHighDetailModel call failed" << Log::Endl;
	}
}

EXPORT void Native_breakObjectFragmentChild(int32_t _p0, int32_t _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7E4C198B0185900);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native breakObjectFragmentChild call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE05F6AEEFEB0BB02(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE05F6AEEFEB0BB02);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE05F6AEEFEB0BB02 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF9C1681347C8BD15(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9C1681347C8BD15);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF9C1681347C8BD15 call failed" << Log::Endl;
	}
}

EXPORT void Native_trackObjectVisibility(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB252BC036B525623);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native trackObjectVisibility call failed" << Log::Endl;
	}
}

EXPORT bool Native_isObjectVisible(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B32ACE6326A7546);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isObjectVisible call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xC6033D32241F6FB5(int32_t _object, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6033D32241F6FB5);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC6033D32241F6FB5 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xEB6F1A9B5510A5D2(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB6F1A9B5510A5D2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEB6F1A9B5510A5D2 call failed" << Log::Endl;
	}
}

EXPORT void Native_setUnkGlobalBoolRelatedToDamage(bool _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xABDABF4E1EDECBFA);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setUnkGlobalBoolRelatedToDamage call failed" << Log::Endl;
	}
}

EXPORT void Native_setCreateWeaponObjectLightSource(int32_t _object, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCE595371A5FBAAF);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCreateWeaponObjectLightSource call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getRayfireMapObject(float _x, float _y, float _z, float _radius, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB48FCED898292E52);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRayfireMapObject call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setStateOfRayfireMapObject(int32_t _object, int32_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C29F698D404C5E1);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setStateOfRayfireMapObject call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getStateOfRayfireMapObject(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x899BA936634A322E);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getStateOfRayfireMapObject call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_doesRayfireMapObjectExist(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52AF537A0C5B8AAD);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesRayfireMapObjectExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT float Native_getRayfireMapObjectAnimPhase(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x260EE4FDBDF4DB01);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRayfireMapObjectAnimPhase call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native_createPickup(int32_t _pickupHash, float _posX, float _posY, float _posZ, int32_t _p4, int32_t _value, bool _p6, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFBA08C503DD5FA58);
	ctx->Reset();
	ctx->Push(_pickupHash);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_p4);
	ctx->Push(_value);
	ctx->Push(_p6);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createPickup call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_createPickupRotate(int32_t _pickupHash, float _posX, float _posY, float _posZ, float _rotX, float _rotY, float _rotZ, int32_t _flag, int32_t _amount, int32_t _p9, bool _p10, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x891804727E0A98B7);
	ctx->Reset();
	ctx->Push(_pickupHash);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_flag);
	ctx->Push(_amount);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createPickupRotate call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x394CD08E31313C28() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x394CD08E31313C28);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x394CD08E31313C28 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x826D1EE4D1CAFC78(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x826D1EE4D1CAFC78);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x826D1EE4D1CAFC78 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_createAmbientPickup(int32_t _pickupHash, float _posX, float _posY, float _posZ, int32_t _flags, int32_t _value, int32_t _modelHash, bool _p7, bool _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x673966A0C0FD7171);
	ctx->Reset();
	ctx->Push(_pickupHash);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_flags);
	ctx->Push(_value);
	ctx->Push(_modelHash);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createAmbientPickup call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_createNonNetworkedAmbientPickup(int32_t _pickupHash, float _posX, float _posY, float _posZ, int32_t _flags, int32_t _value, int32_t _modelHash, bool _p7, bool _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C93764223E29C50);
	ctx->Reset();
	ctx->Push(_pickupHash);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_flags);
	ctx->Push(_value);
	ctx->Push(_modelHash);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createNonNetworkedAmbientPickup call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x1E3F1B1B891A2AAA(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E3F1B1B891A2AAA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1E3F1B1B891A2AAA call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_createPortablePickup(int32_t _pickupHash, float _x, float _y, float _z, bool _placeOnGround, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2EAF1FDB2FB55698);
	ctx->Reset();
	ctx->Push(_pickupHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_placeOnGround);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createPortablePickup call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_createNonNetworkedPortablePickup(int32_t _pickupHash, float _x, float _y, float _z, bool _placeOnGround, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x125494B98A21AAF7);
	ctx->Reset();
	ctx->Push(_pickupHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_placeOnGround);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createNonNetworkedPortablePickup call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_attachPortablePickupToPed(int32_t _pickupObject, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DC39368BDD57755);
	ctx->Reset();
	ctx->Push(_pickupObject);
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachPortablePickupToPed call failed" << Log::Endl;
	}
}

EXPORT void Native_detachPortablePickupFromPed(int32_t _pickupObject) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF463D1E9A0AECB1);
	ctx->Reset();
	ctx->Push(_pickupObject);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native detachPortablePickupFromPed call failed" << Log::Endl;
	}
}

EXPORT void Native_hidePickup(int32_t _pickupObject, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x867458251D47CCB2);
	ctx->Reset();
	ctx->Push(_pickupObject);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hidePickup call failed" << Log::Endl;
	}
}

EXPORT void Native_setMaxNumPortablePickupsCarriedByPlayer(int32_t _modelHash, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BF3B3BD47D79C08);
	ctx->Reset();
	ctx->Push(_modelHash);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMaxNumPortablePickupsCarriedByPlayer call failed" << Log::Endl;
	}
}

EXPORT void Native_setLocalPlayerCanCollectPortablePickups(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78857FC65CADB909);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setLocalPlayerCanCollectPortablePickups call failed" << Log::Endl;
	}
}

EXPORT vector3_t Native_getSafePickupCoords(float _x, float _y, float _z, float _p3, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E16BC2503FF1FF0);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getSafePickupCoords call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT void Native__0xD4A7A435B3710D05(float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4A7A435B3710D05);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD4A7A435B3710D05 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB7C6D80FB371659A() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7C6D80FB371659A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB7C6D80FB371659A call failed" << Log::Endl;
	}
}

EXPORT vector3_t Native_getPickupCoords(int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x225B8B35C88029B3);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPickupCoords call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT void Native__0x8DCA505A5C196F05(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DCA505A5C196F05);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8DCA505A5C196F05 call failed" << Log::Endl;
	}
}

EXPORT void Native_removeAllPickupsOfType(int32_t _pickupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27F9D613092159CF);
	ctx->Reset();
	ctx->Push(_pickupHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeAllPickupsOfType call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasPickupBeenCollected(int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80EC48E6679313F9);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasPickupBeenCollected call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removePickup(int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3288D8ACAECD2AB2);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removePickup call failed" << Log::Endl;
	}
}

EXPORT void Native_createMoneyPickups(float _x, float _y, float _z, int32_t _value, int32_t _amount, int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0589B5E791CE9B2B);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_value);
	ctx->Push(_amount);
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createMoneyPickups call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesPickupExist(int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFC1CA75AD4074D1);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesPickupExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_doesPickupObjectExist(int32_t _pickupObject) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9EFB6DBF7DAAEA3);
	ctx->Reset();
	ctx->Push(_pickupObject);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesPickupObjectExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getPickupObject(int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5099BC55630B25AE);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPickupObject call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isObjectAPortablePickup(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC481C641EBBD27D);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isObjectAPortablePickup call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isObjectAPickup(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0378C08504160D0D);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isObjectAPickup call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_doesPickupOfTypeExistInArea(int32_t _pickupHash, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9C36251F6E48E33);
	ctx->Reset();
	ctx->Push(_pickupHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesPickupOfTypeExistInArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPickupRegenerationTime(int32_t _pickup, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78015C9B4B3ECC9D);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPickupRegenerationTime call failed" << Log::Endl;
	}
}

EXPORT void Native_forcePickupRegenerate(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x758A5C1B3B1E1990);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forcePickupRegenerate call failed" << Log::Endl;
	}
}

EXPORT void Native_toggleUsePickupsForPlayer(int32_t _player, int32_t _pickupHash, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x616093EC6B139DD9);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_pickupHash);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native toggleUsePickupsForPlayer call failed" << Log::Endl;
	}
}

EXPORT void Native_setLocalPlayerCanUsePickupsWithThisModel(int32_t _modelHash, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88EAEC617CD26926);
	ctx->Reset();
	ctx->Push(_modelHash);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setLocalPlayerCanUsePickupsWithThisModel call failed" << Log::Endl;
	}
}

EXPORT void Native__0xFDC07C58E8AAB715(int32_t _pickupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDC07C58E8AAB715);
	ctx->Reset();
	ctx->Push(_pickupHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFDC07C58E8AAB715 call failed" << Log::Endl;
	}
}

EXPORT void Native_setTeamPickupObject(int32_t _object, int32_t _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53E0DF1A2A3CF0CA);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTeamPickupObject call failed" << Log::Endl;
	}
}

EXPORT void Native_preventCollectionOfPortablePickup(int32_t _object, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92AEFB5F6E294023);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native preventCollectionOfPortablePickup call failed" << Log::Endl;
	}
}

EXPORT void Native__0x27F248C3FEBFAAD3(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27F248C3FEBFAAD3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x27F248C3FEBFAAD3 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0596843B34B95CE5(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0596843B34B95CE5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0596843B34B95CE5 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA08FE5E49BDC39DD(int32_t _p0, float _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA08FE5E49BDC39DD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA08FE5E49BDC39DD call failed" << Log::Endl;
	}
}

EXPORT void Native__0x62454A641B41F3C5(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62454A641B41F3C5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x62454A641B41F3C5 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x39A5FB7EAF150840(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39A5FB7EAF150840);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x39A5FB7EAF150840 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x834344A414C7C85D(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x834344A414C7C85D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x834344A414C7C85D call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xDB41D07A45A6D4B7(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB41D07A45A6D4B7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDB41D07A45A6D4B7 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPickupGenerationRangeMultiplier(float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x318516E02DE3ECE2);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPickupGenerationRangeMultiplier call failed" << Log::Endl;
	}
}

EXPORT float Native_getPickupGenerationRangeMultiplier() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3ECA65C7317F174);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPickupGenerationRangeMultiplier call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native__0x31F924B53EADDF65(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31F924B53EADDF65);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x31F924B53EADDF65 call failed" << Log::Endl;
	}
}

EXPORT void Native_setPickupUncollectable(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C1B69FAE509BA97);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPickupUncollectable call failed" << Log::Endl;
	}
}

EXPORT void Native__0x858EC9FD25DE04AA(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x858EC9FD25DE04AA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x858EC9FD25DE04AA call failed" << Log::Endl;
	}
}

EXPORT void Native_setPickupHiddenWhenUncollectable(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3ED2B83AB2E82799);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPickupHiddenWhenUncollectable call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8881C98A31117998(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8881C98A31117998);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8881C98A31117998 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8CFF648FBD7330F1(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8CFF648FBD7330F1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8CFF648FBD7330F1 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x46F3ADD1E2D5BAF2(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46F3ADD1E2D5BAF2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x46F3ADD1E2D5BAF2 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x641F272B52E2F0F8(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x641F272B52E2F0F8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x641F272B52E2F0F8 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x4C134B4DF76025D0(int32_t _pickup, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C134B4DF76025D0);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4C134B4DF76025D0 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xAA059C615DE9DD03(int32_t _pickup, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA059C615DE9DD03);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAA059C615DE9DD03 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF92099527DB8E2A7(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF92099527DB8E2A7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF92099527DB8E2A7 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA2C1F5E92AFE49ED() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2C1F5E92AFE49ED);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA2C1F5E92AFE49ED call failed" << Log::Endl;
	}
}

EXPORT void Native__0x762DB2D380B48D04(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x762DB2D380B48D04);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x762DB2D380B48D04 call failed" << Log::Endl;
	}
}

EXPORT void Native_renderFakePickupGlow(float _x, float _y, float _z, int32_t _colorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3430676B11CDF21D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_colorIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native renderFakePickupGlow call failed" << Log::Endl;
	}
}

EXPORT void Native__0x7813E8B8C4AE4799(int32_t _pickup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7813E8B8C4AE4799);
	ctx->Reset();
	ctx->Push(_pickup);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7813E8B8C4AE4799 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBFFE53AE7E67FCDC(int32_t _pickup, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFFE53AE7E67FCDC);
	ctx->Reset();
	ctx->Push(_pickup);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBFFE53AE7E67FCDC call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD05A3241B9A86F19(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD05A3241B9A86F19);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD05A3241B9A86F19 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB2D0BDE54F0E8E5A(int32_t _object, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2D0BDE54F0E8E5A);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB2D0BDE54F0E8E5A call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getWeaponTypeFromPickupType(int32_t _pickupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x08F96CA6C551AD51);
	ctx->Reset();
	ctx->Push(_pickupHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeaponTypeFromPickupType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPickupHashFromWeapon(int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD6429A016084F1A5);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPickupHashFromWeapon call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isPickupWeaponObjectValid(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11D1E53A726891FE);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPickupWeaponObjectValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getObjectTextureVariation(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE84EB93729C5F36A);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getObjectTextureVariation call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setObjectTextureVariation(int32_t _object, int32_t _textureVariation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x971DA0055324D033);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_textureVariation);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setObjectTextureVariation call failed" << Log::Endl;
	}
}

EXPORT bool Native_setTextureVariationOfClosestObjectOfType(float _x, float _y, float _z, float _radius, int32_t _modelHash, int32_t _textureVariation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF12E33034D887F66);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	ctx->Push(_textureVariation);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTextureVariationOfClosestObjectOfType call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_setObjectLightColor(int32_t _object, bool _p1, int32_t _r, int32_t _g, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F048334B4A4E774);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_p1);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setObjectLightColor call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0xADF084FB8F075D06(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADF084FB8F075D06);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xADF084FB8F075D06 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x3B2FD68DB5F8331C(int32_t _object, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B2FD68DB5F8331C);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3B2FD68DB5F8331C call failed" << Log::Endl;
	}
}

EXPORT void Native_setObjectStuntPropSpeedup(int32_t _object, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x96EE0EBA0163DF80);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setObjectStuntPropSpeedup call failed" << Log::Endl;
	}
}

EXPORT void Native_setObjectStuntPropDuration(int32_t _object, float _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF6CA0330F2E737B);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setObjectStuntPropDuration call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPickupHash(int32_t _pickupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EAAD83F8CFB4575);
	ctx->Reset();
	ctx->Push(_pickupHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPickupHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setForceObjectThisFrame(float _x, float _y, float _z, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF538081986E49E9D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setForceObjectThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_markObjectForDeletion(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADBE4809F19F927A);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native markObjectForDeletion call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8CAAB2BD3EA58BD4(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8CAAB2BD3EA58BD4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8CAAB2BD3EA58BD4 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x63ECF581BC70E363(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63ECF581BC70E363);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x63ECF581BC70E363 call failed" << Log::Endl;
	}
}

EXPORT void Native_setEnableArenaPropPhysics(int32_t _object, bool _toggle, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x911024442F4898F0);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_toggle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEnableArenaPropPhysics call failed" << Log::Endl;
	}
}

EXPORT void Native_setEnableArenaPropPhysicsOnPed(int32_t _object, bool _toggle, int32_t _p2, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB20834A7DD3D8896);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_toggle);
	ctx->Push(_p2);
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEnableArenaPropPhysicsOnPed call failed" << Log::Endl;
	}
}

EXPORT void Native__0x734E1714D077DA9A(int32_t _object, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x734E1714D077DA9A);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x734E1714D077DA9A call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1A6CBB06E2D0D79D(int32_t _object, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A6CBB06E2D0D79D);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1A6CBB06E2D0D79D call failed" << Log::Endl;
	}
}

EXPORT bool Native_getIsArenaPropPhysicsDisabled(int32_t _object, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43C677F1E1158005);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsArenaPropPhysicsDisabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x3BD770D281982DB5(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BD770D281982DB5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3BD770D281982DB5 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x1C57C94A6446492A(int32_t _object, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C57C94A6446492A);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1C57C94A6446492A call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB5B7742424BD4445(int32_t _object, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5B7742424BD4445);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB5B7742424BD4445 call failed" << Log::Endl;
	}
}

EXPORT bool Native_isControlEnabled(int32_t _padIndex, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CEA6BFDF248E5D9);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isControlEnabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isControlPressed(int32_t _padIndex, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3A21BCD95725A4A);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isControlPressed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isControlReleased(int32_t _padIndex, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x648EE3E7F38877DD);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isControlReleased call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isControlJustPressed(int32_t _padIndex, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x580417101DDB492F);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isControlJustPressed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isControlJustReleased(int32_t _padIndex, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50F940259D3841E6);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isControlJustReleased call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getControlValue(int32_t _padIndex, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD95E79E8686D2C27);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getControlValue call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT float Native_getControlNormal(int32_t _padIndex, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC3C9B8D5327B563);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getControlNormal call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native__0x5B73C77D9EB66E24(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B73C77D9EB66E24);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5B73C77D9EB66E24 call failed" << Log::Endl;
	}
}

EXPORT float Native_getControlUnboundNormal(int32_t _padIndex, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B84D09CEC5209C5);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getControlUnboundNormal call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT bool Native_setControlNormal(int32_t _padIndex, int32_t _control, float _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8A25867FBA3B05E);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setControlNormal call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isDisabledControlPressed(int32_t _padIndex, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2587F8CBBD87B1D);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isDisabledControlPressed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isDisabledControlReleased(int32_t _padIndex, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB6C4072E9A32E92);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isDisabledControlReleased call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isDisabledControlJustPressed(int32_t _padIndex, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x91AEF906BCA88877);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isDisabledControlJustPressed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isDisabledControlJustReleased(int32_t _padIndex, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x305C8DCD79DA8B0F);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isDisabledControlJustReleased call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT float Native_getDisabledControlNormal(int32_t _padIndex, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11E65974A982637C);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDisabledControlNormal call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getDisabledControlUnboundNormal(int32_t _padIndex, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F8A26A890FD62FB);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDisabledControlUnboundNormal call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native__0xD7D22F5592AED8BA(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7D22F5592AED8BA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD7D22F5592AED8BA call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isUsingKeyboard(int32_t _padIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA571D46727E2B718);
	ctx->Reset();
	ctx->Push(_padIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isUsingKeyboard call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isUsingKeyboard2(int32_t _padIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13337B38DB572509);
	ctx->Reset();
	ctx->Push(_padIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isUsingKeyboard2 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_setCursorLocation(float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC695459D4D0E219);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCursorLocation call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x23F09EADC01449D6(int32_t _padIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23F09EADC01449D6);
	ctx->Reset();
	ctx->Push(_padIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x23F09EADC01449D6 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x6CD79468A1E595C6(int32_t _padIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CD79468A1E595C6);
	ctx->Reset();
	ctx->Push(_padIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6CD79468A1E595C6 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT const char* Native_getControlInstructionalButton(int32_t _padIndex, int32_t _control, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0499D7B09FC9B407);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getControlInstructionalButton call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_getControlGroupInstructionalButton(int32_t _padIndex, int32_t _controlGroup, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80C2FD58D720C801);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_controlGroup);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getControlGroupInstructionalButton call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT void Native_setControlLightEffectColor(int32_t _padIndex, int32_t _red, int32_t _green, int32_t _blue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8290252FFF36ACB5);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_red);
	ctx->Push(_green);
	ctx->Push(_blue);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setControlLightEffectColor call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCB0360EFEFB2580D(int32_t _padIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB0360EFEFB2580D);
	ctx->Reset();
	ctx->Push(_padIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCB0360EFEFB2580D call failed" << Log::Endl;
	}
}

EXPORT void Native_setPadShake(int32_t _padIndex, int32_t _duration, int32_t _frequency) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48B3886C1358D0D5);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_duration);
	ctx->Push(_frequency);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPadShake call failed" << Log::Endl;
	}
}

EXPORT void Native__0x14D29BB12D47F68C(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14D29BB12D47F68C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x14D29BB12D47F68C call failed" << Log::Endl;
	}
}

EXPORT void Native_stopPadShake(int32_t _padIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38C16A305E8CDC8D);
	ctx->Reset();
	ctx->Push(_padIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopPadShake call failed" << Log::Endl;
	}
}

EXPORT void Native_setPadShakeSuppressedId(int32_t _padIndex, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF239400E16C23E08);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPadShakeSuppressedId call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA0CEFCEA390AAB9B(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0CEFCEA390AAB9B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA0CEFCEA390AAB9B call failed" << Log::Endl;
	}
}

EXPORT bool Native_isLookInverted() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77B612531280010D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isLookInverted call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xE1615EC03B3BB4FD() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1615EC03B3BB4FD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE1615EC03B3BB4FD call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getLocalPlayerAimState() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB41AFBBBC0A0287);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getLocalPlayerAimState call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getLocalPlayerAimState2() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59B9A7AF4C95133C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getLocalPlayerAimState2 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x25AAA32BDC98F2A3() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25AAA32BDC98F2A3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x25AAA32BDC98F2A3 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getIsUsingAlternateDriveby() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F70731BACCFBB96);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsUsingAlternateDriveby call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getAllowMovementWhileZoomed() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC859E2374407556);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getAllowMovementWhileZoomed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPlayerpadShakesWhenControllerDisabled(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x798FDEB5B1575088);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerpadShakesWhenControllerDisabled call failed" << Log::Endl;
	}
}

EXPORT void Native_setInputExclusive(int32_t _padIndex, int32_t _control) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDE476E5EE29EDB1);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setInputExclusive call failed" << Log::Endl;
	}
}

EXPORT void Native_disableControlAction(int32_t _padIndex, int32_t _control, bool _disable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE99B66D079CF6BC);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	ctx->Push(_disable);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableControlAction call failed" << Log::Endl;
	}
}

EXPORT void Native_enableControlAction(int32_t _padIndex, int32_t _control, bool _enable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x351220255D64C155);
	ctx->Reset();
	ctx->Push(_padIndex);
	ctx->Push(_control);
	ctx->Push(_enable);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableControlAction call failed" << Log::Endl;
	}
}

EXPORT void Native_disableAllControlActions(int32_t _padIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F4B6931816E599B);
	ctx->Reset();
	ctx->Push(_padIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableAllControlActions call failed" << Log::Endl;
	}
}

EXPORT void Native_enableAllControlActions(int32_t _padIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5FFE9B05F199DE7);
	ctx->Reset();
	ctx->Push(_padIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableAllControlActions call failed" << Log::Endl;
	}
}

EXPORT bool Native_switchToInputMappingScheme(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D42B92563939375);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native switchToInputMappingScheme call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_switchToInputMappingScheme2(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4683149ED1DDE7A1);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native switchToInputMappingScheme2 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_resetInputMappingScheme() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x643ED62D5EA3BEBD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetInputMappingScheme call failed" << Log::Endl;
	}
}

EXPORT void Native_disableInputGroup(int32_t _padIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F4724035FDCA1DD);
	ctx->Reset();
	ctx->Push(_padIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableInputGroup call failed" << Log::Endl;
	}
}

EXPORT void Native_setRoadsInArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, bool _nodeEnabled, bool _unknown2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF1A602B5BA52FEE);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_nodeEnabled);
	ctx->Push(_unknown2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRoadsInArea call failed" << Log::Endl;
	}
}

EXPORT void Native_setRoadsInAngledArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, bool _unknown1, bool _unknown2, bool _unknown3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A5AA1208AF5DB59);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push(_unknown1);
	ctx->Push(_unknown2);
	ctx->Push(_unknown3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRoadsInAngledArea call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedPathsInArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, bool _unknown, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34F060F4BF92E018);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_unknown);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPathsInArea call failed" << Log::Endl;
	}
}

EXPORT bool Native_getSafeCoordForPed(float _x, float _y, float _z, bool _onGround, vector3_t& _outPosition, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB61C8E878A4199CA);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_onGround);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getSafeCoordForPed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
}

EXPORT bool Native_getClosestVehicleNode(float _x, float _y, float _z, vector3_t& _outPosition, int32_t _nodeType, float _p5, float _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x240A18690AE96513);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	ctx->Push(_nodeType);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClosestVehicleNode call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
}

EXPORT bool Native_getClosestMajorVehicleNode(float _x, float _y, float _z, vector3_t& _outPosition, float _unknown1, int32_t _unknown2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2EABE3B06F58C1BE);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	ctx->Push(_unknown1);
	ctx->Push(_unknown2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClosestMajorVehicleNode call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
}

EXPORT bool Native_getClosestVehicleNodeWithHeading(float _x, float _y, float _z, vector3_t& _outPosition, float& _outHeading, int32_t _nodeType, float _p6, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF071FB798B803B0);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	ctx->Push(_outHeading);
	ctx->Push(_nodeType);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClosestVehicleNodeWithHeading call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
}

EXPORT bool Native_getNthClosestVehicleNode(float _x, float _y, float _z, int32_t _nthClosest, vector3_t& _outPosition, int32_t _unknown1, int32_t _unknown2, int32_t _unknown3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE50E52416CCF948B);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_nthClosest);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	ctx->Push(_unknown1);
	ctx->Push(_unknown2);
	ctx->Push(_unknown3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNthClosestVehicleNode call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
}

EXPORT int32_t Native_getNthClosestVehicleNodeId(float _x, float _y, float _z, int32_t _nth, int32_t _nodetype, float _p5, float _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22D7275A79FE8215);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_nth);
	ctx->Push(_nodetype);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNthClosestVehicleNodeId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getNthClosestVehicleNodeWithHeading(float _x, float _y, float _z, int32_t _nthClosest, vector3_t& _outPosition, float& _outHeading, int32_t& _unknown1, int32_t _unknown2, float _unknown3, float _unknown4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80CA6A8B6C094CC4);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_nthClosest);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	ctx->Push(_outHeading);
	ctx->Push(_unknown1);
	ctx->Push(_unknown2);
	ctx->Push(_unknown3);
	ctx->Push(_unknown4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNthClosestVehicleNodeWithHeading call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
}

EXPORT int32_t Native_getNthClosestVehicleNodeIdWithHeading(float _x, float _y, float _z, int32_t _nthClosest, vector3_t& _outPosition, float& _outHeading, int32_t _p6, float _p7, float _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6448050E9C2A7207);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_nthClosest);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	ctx->Push(_outHeading);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNthClosestVehicleNodeIdWithHeading call failed" << Log::Endl;
	}
	return ctx->ResultInt();
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
}

EXPORT bool Native_getNthClosestVehicleNodeFavourDirection(float _x, float _y, float _z, float _desiredX, float _desiredY, float _desiredZ, int32_t _nthClosest, vector3_t& _outPosition, float& _outHeading, int32_t _nodetype, float _p10, int32_t _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45905BE8654AE067);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_desiredX);
	ctx->Push(_desiredY);
	ctx->Push(_desiredZ);
	ctx->Push(_nthClosest);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	ctx->Push(_outHeading);
	ctx->Push(_nodetype);
	ctx->Push(_p10);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNthClosestVehicleNodeFavourDirection call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
}

EXPORT bool Native_getVehicleNodeProperties(float _x, float _y, float _z, int32_t& _density, int32_t& _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0568566ACBB5DEDC);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_density);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleNodeProperties call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isVehicleNodeIdValid(int32_t _vehicleNodeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1EAF30FCFBF5AF74);
	ctx->Reset();
	ctx->Push(_vehicleNodeId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleNodeIdValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_getVehicleNodePosition(int32_t _nodeId, vector3_t& _outPosition) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x703123E5E7D429C2);
	ctx->Reset();
	ctx->Push(_nodeId);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleNodePosition call failed" << Log::Endl;
	}
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
}

EXPORT bool Native_getVehicleNodeIsGpsAllowed(int32_t _nodeID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2AE5C478B96E3B6);
	ctx->Reset();
	ctx->Push(_nodeID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleNodeIsGpsAllowed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getVehicleNodeIsSwitchedOff(int32_t _nodeID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F5070AA58F69279);
	ctx->Reset();
	ctx->Push(_nodeID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleNodeIsSwitchedOff call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getClosestRoad(float _x, float _y, float _z, float _p3, int32_t _p4, vector3_t& _p5, vector3_t& _p6, int32_t& _p7, int32_t& _p8, float& _p9, bool _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x132F52BBA570FE92);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_p4);
	alt::INative::Vector3 converted_p5 { _p5.x, 0, _p5.y, 0, _p5.z };
	ctx->Push(&converted_p5);
	alt::INative::Vector3 converted_p6 { _p6.x, 0, _p6.y, 0, _p6.z };
	ctx->Push(&converted_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClosestRoad call failed" << Log::Endl;
	}
	return ctx->ResultInt();
	_p5.x = converted_p5.x;
	_p5.y = converted_p5.y;
	_p5.z = converted_p5.z;
	_p6.x = converted_p6.x;
	_p6.y = converted_p6.y;
	_p6.z = converted_p6.z;
}

EXPORT void Native_setAllPathsCacheBoundingstruct(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x228E5C6AD4D74BFD);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAllPathsCacheBoundingstruct call failed" << Log::Endl;
	}
}

EXPORT void Native_setAiGlobalPathNodesType(int32_t _type) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF74B1FFA4A15FBEA);
	ctx->Reset();
	ctx->Push(_type);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAiGlobalPathNodesType call failed" << Log::Endl;
	}
}

EXPORT bool Native_areNodesLoadedForArea(float _x1, float _y1, float _x2, float _y2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7B79A50B905A30D);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native areNodesLoadedForArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_requestPathsPreferAccurateBoundingstruct(float _x1, float _y1, float _x2, float _y2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07FB139B592FA687);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestPathsPreferAccurateBoundingstruct call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setRoadsBackToOriginal(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1EE7063B80FFC77C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRoadsBackToOriginal call failed" << Log::Endl;
	}
}

EXPORT void Native_setRoadsBackToOriginalInAngledArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _width, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0027501B9F3B407E);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_width);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRoadsBackToOriginalInAngledArea call failed" << Log::Endl;
	}
}

EXPORT void Native_setAmbientPedRangeMultiplierThisFrame(float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B919E1FB47CC4E0);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAmbientPedRangeMultiplierThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native__0xAA76052DDA9BFC3E(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA76052DDA9BFC3E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAA76052DDA9BFC3E call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedPathsBackToOriginal(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE04B48F2CC926253);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPathsBackToOriginal call failed" << Log::Endl;
	}
}

EXPORT bool Native_getRandomVehicleNode(float _x, float _y, float _z, float _radius, bool _p4, bool _p5, bool _p6, vector3_t& _outPosition, int32_t& _nodeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93E0DB8440B73A7D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	ctx->Push(_nodeId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRandomVehicleNode call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
}

EXPORT void Native_getStreetNameAtCoord(float _x, float _y, float _z, int32_t& _streetName, int32_t& _crossingRoad) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2EB41072B4C1E4C0);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_streetName);
	ctx->Push(_crossingRoad);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getStreetNameAtCoord call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_generateDirectionsToCoord(float _x, float _y, float _z, bool _p3, int32_t& _direction, float& _p5, float& _distToNxJunction) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF90125F1F79ECDF8);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_direction);
	ctx->Push(_p5);
	ctx->Push(_distToNxJunction);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native generateDirectionsToCoord call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setIgnoreNoGpsFlag(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72751156E7678833);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setIgnoreNoGpsFlag call failed" << Log::Endl;
	}
}

EXPORT void Native_setIgnoreSecondaryRouteNodes(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1FC289A0C3FF470F);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setIgnoreSecondaryRouteNodes call failed" << Log::Endl;
	}
}

EXPORT void Native_setGpsDisabledZone(float _x1, float _y1, float _z1, float _x2, float _y2, float _z3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC20483CD3DD5201);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGpsDisabledZone call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getGpsBlipRouteLength() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBB45C3CF5C8AA85);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getGpsBlipRouteLength call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xF3162836C28F9DA5(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3162836C28F9DA5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF3162836C28F9DA5 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getGpsBlipRouteFound() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x869DAACBBE9FA006);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getGpsBlipRouteFound call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getRoadSidePointWithHeading(float _x, float _y, float _z, float _heading, vector3_t& _outPosition) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0F8A7517A273C05);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRoadSidePointWithHeading call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
}

EXPORT bool Native_getPointOnRoadSide(float _x, float _y, float _z, int32_t _p3, vector3_t& _outPosition) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16F46FB18C8009E4);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	alt::INative::Vector3 converted_outPosition { _outPosition.x, 0, _outPosition.y, 0, _outPosition.z };
	ctx->Push(&converted_outPosition);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPointOnRoadSide call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_outPosition.x = converted_outPosition.x;
	_outPosition.y = converted_outPosition.y;
	_outPosition.z = converted_outPosition.z;
}

EXPORT bool Native_isPointOnRoad(float _x, float _y, float _z, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x125BF4ABFC536B09);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPointOnRoad call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getNextGpsDisabledZoneIndex() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3A6A0EF48823A8C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNextGpsDisabledZoneIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setGpsDisabledZoneAtIndex(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0BC1C6FB18EE154);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGpsDisabledZoneAtIndex call failed" << Log::Endl;
	}
}

EXPORT void Native_clearGpsDisabledZoneAtIndex(int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2801D0012266DF07);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearGpsDisabledZoneAtIndex call failed" << Log::Endl;
	}
}

EXPORT void Native_addNavmeshRequiredRegion(float _x, float _y, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x387EAD7EE42F6685);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addNavmeshRequiredRegion call failed" << Log::Endl;
	}
}

EXPORT void Native_removeNavmeshRequiredRegions() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x916F0A3CDEC3445E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeNavmeshRequiredRegions call failed" << Log::Endl;
	}
}

EXPORT bool Native_isNavmeshRequiredRegionOwnedByAnyThread() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x705A844002B39DC0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isNavmeshRequiredRegionOwnedByAnyThread call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_disableNavmeshInArea(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C8872D8CDBE1B8B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableNavmeshInArea call failed" << Log::Endl;
	}
}

EXPORT bool Native_areAllNavmeshRegionsLoaded() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8415D95B194A3AEA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native areAllNavmeshRegionsLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isNavmeshLoadedInArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF813C7E63F9062A5);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isNavmeshLoadedInArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x01708E8DD3FF8C65(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01708E8DD3FF8C65);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x01708E8DD3FF8C65 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_addNavmeshBlockingObject(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, bool _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCD5C8E06E502F5A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addNavmeshBlockingObject call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_updateNavmeshBlockingObject(int32_t _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x109E99373F290687);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native updateNavmeshBlockingObject call failed" << Log::Endl;
	}
}

EXPORT void Native_removeNavmeshBlockingObject(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46399A7895957C0E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeNavmeshBlockingObject call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesNavmeshBlockingObjectExist(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0EAEB0DB4B132399);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesNavmeshBlockingObjectExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT float Native_getHeightmapTopZForPosition(float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29C24BFBED8AB8FB);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHeightmapTopZForPosition call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getHeightmapTopZForArea(float _x1, float _y1, float _x2, float _y2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8ABE8608576D9CE3);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHeightmapTopZForArea call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getHeightmapBottomZForPosition(float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x336511A34F2E5185);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHeightmapBottomZForPosition call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getHeightmapBottomZForArea(float _x1, float _y1, float _x2, float _y2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3599D741C9AC6310);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHeightmapBottomZForArea call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_calculateTravelDistanceBetweenPoints(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADD95C7005C4A197);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native calculateTravelDistanceBetweenPoints call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native_createPed(int32_t _pedType, int32_t _modelHash, float _x, float _y, float _z, float _heading, bool _isNetwork, bool _bScriptHostPed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD49F9B0955C367DE);
	ctx->Reset();
	ctx->Push(_pedType);
	ctx->Push(_modelHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(_isNetwork);
	ctx->Push(_bScriptHostPed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createPed call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_deletePed(int32_t& _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9614299DCB53E54B);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native deletePed call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_clonePed(int32_t _ped, bool _isNetwork, bool _bScriptHostPed, bool _copyHeadBlendFlag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF29A16337FACADB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_isNetwork);
	ctx->Push(_bScriptHostPed);
	ctx->Push(_copyHeadBlendFlag);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clonePed call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_clonePedEx(int32_t _ped, bool _isNetwork, bool _bScriptHostPed, bool _copyHeadBlendFlag, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x668FD40BCBA5DE48);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_isNetwork);
	ctx->Push(_bScriptHostPed);
	ctx->Push(_copyHeadBlendFlag);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clonePedEx call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_clonePedToTarget(int32_t _ped, int32_t _targetPed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE952D6431689AD9A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_targetPed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clonePedToTarget call failed" << Log::Endl;
	}
}

EXPORT void Native_clonePedToTargetEx(int32_t _ped, int32_t _targetPed, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x148B08C2D2ACB884);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_targetPed);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clonePedToTargetEx call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedInVehicle(int32_t _ped, int32_t _vehicle, bool _atGetIn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3EE4A07279BB9DB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_atGetIn);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedInModel(int32_t _ped, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x796D90EFB19AA332);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInModel call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedInAnyVehicle(int32_t _ped, bool _atGetIn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x997ABD671D25CA0B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_atGetIn);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInAnyVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isCopPedInArea3d(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16EC4839969F9F5E);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCopPedInArea3d call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedInjured(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84A2DD9AC37C35C1);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInjured call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedHurt(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5983BB449D7FDB12);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedHurt call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedFatallyInjured(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD839450756ED5A80);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedFatallyInjured call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedDeadOrDying(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3317DEDB88C95038);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedDeadOrDying call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isConversationPedDead(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0A0AEC214B1FABA);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isConversationPedDead call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedAimingFromCover(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3998B1276A3300E5);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedAimingFromCover call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedReloading(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24B100C68C645951);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedReloading call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedAPlayer(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x12534C348C6CB68B);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedAPlayer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_createPedInsideVehicle(int32_t _vehicle, int32_t _pedType, int32_t _modelHash, int32_t _seat, bool _isNetwork, bool _bScriptHostPed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7DD959874C1FD534);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_pedType);
	ctx->Push(_modelHash);
	ctx->Push(_seat);
	ctx->Push(_isNetwork);
	ctx->Push(_bScriptHostPed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createPedInsideVehicle call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedDesiredHeading(int32_t _ped, float _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA5A7ECE2AA8FE70);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDesiredHeading call failed" << Log::Endl;
	}
}

EXPORT void Native_freezePedCameraRotation(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF287323B0E2C69A);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native freezePedCameraRotation call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedFacingPed(int32_t _ped, int32_t _otherPed, float _angle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD71649DB0A545AA3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_otherPed);
	ctx->Push(_angle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedFacingPed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedInMeleeCombat(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E209B2C1EAD5159);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInMeleeCombat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedStopped(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x530944F6F4B8A214);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedStopped call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedShootingInArea(int32_t _ped, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, bool _p7, bool _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E9DFE24AC1E58EF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedShootingInArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isAnyPedShootingInArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, bool _p6, bool _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0D3D71EA1086C55);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAnyPedShootingInArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedShooting(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34616828CD07F1A1);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedShooting call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedAccuracy(int32_t _ped, int32_t _accuracy) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7AEFB85C1D49DEB6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_accuracy);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAccuracy call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedAccuracy(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37F4AD56ECBC0CD6);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedAccuracy call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x87DDEB611B329A9C(float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87DDEB611B329A9C);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x87DDEB611B329A9C call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedModel(int32_t _ped, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9D55B1A358A5BF7);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedModel call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_explodePedHead(int32_t _ped, int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D05CED3A38D0F3A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native explodePedHead call failed" << Log::Endl;
	}
}

EXPORT void Native_removePedElegantly(int32_t& _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC6D445B994DF95E);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removePedElegantly call failed" << Log::Endl;
	}
}

EXPORT void Native_addArmourToPed(int32_t _ped, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BA652A0CD14DF2F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addArmourToPed call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedArmour(int32_t _ped, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEA04D83135264CC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedArmour call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedIntoVehicle(int32_t _ped, int32_t _vehicle, int32_t _seatIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF75B0D629E1C063D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedIntoVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedAllowVehiclesOverride(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C028C636A414ED9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAllowVehiclesOverride call failed" << Log::Endl;
	}
}

EXPORT bool Native_canCreateRandomPed(bool _unk) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E8349C08E4B82E4);
	ctx->Reset();
	ctx->Push(_unk);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canCreateRandomPed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_createRandomPed(float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4AC7D0CF06BFE8F);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createRandomPed call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_createRandomPedAsDriver(int32_t _vehicle, bool _returnHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B62392B474F44A0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_returnHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createRandomPedAsDriver call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_canCreateRandomDriver() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8EB95E5B4E56978);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canCreateRandomDriver call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_canCreateRandomBikeRider() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEACEEDA81751915C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canCreateRandomBikeRider call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedMoveAnimsBlendOut(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E8C908F41584ECD);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedMoveAnimsBlendOut call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanBeDraggedOut(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1670E958EEE24E5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanBeDraggedOut call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF2BEBCDFAFDAA19E(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2BEBCDFAFDAA19E);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF2BEBCDFAFDAA19E call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedMale(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D9F5FAA7488BA46);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedMale call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedHuman(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB980061DA992779D);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedHuman call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getVehiclePedIsIn(int32_t _ped, bool _includeLastVehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A9112A0FE9A4713);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_includeLastVehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehiclePedIsIn call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_resetPedLastVehicle(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB8DE8CF6A8DD8BB);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetPedLastVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedDensityMultiplierThisFrame(float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95E3D6257B166CF2);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDensityMultiplierThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setScenarioPedDensityMultiplierThisFrame(float _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A556143A1C03898);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScenarioPedDensityMultiplierThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5A7F62FDA59759BD() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A7F62FDA59759BD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5A7F62FDA59759BD call failed" << Log::Endl;
	}
}

EXPORT void Native_setScriptedConversionCoordThisFrame(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5086C7843552CF85);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScriptedConversionCoordThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedNonCreationArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE01041D559983EA);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedNonCreationArea call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPedNonCreationArea() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E05208086BA0651);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedNonCreationArea call failed" << Log::Endl;
	}
}

EXPORT void Native_instantlyFillPedPopulation() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4759CC730F947C81);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native instantlyFillPedPopulation call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedOnMount(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x460BC76A0E10655E);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedOnMount call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getMount(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7E11B8DCBED1058);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isPedOnVehicle(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67722AEB798E5FAB);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedOnVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedOnSpecificVehicle(int32_t _ped, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC5F66E459AF3BB2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedOnSpecificVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedMoney(int32_t _ped, int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9C8960E8684C1B5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedMoney call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedMoney(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F69145BBA87BAE7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedMoney call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0xFF4803BC019852D9(float _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF4803BC019852D9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFF4803BC019852D9 call failed" << Log::Endl;
	}
}

EXPORT void Native_setAmbientPedsDropMoney(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B0E6172C9A4D902);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAmbientPedsDropMoney call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9911F4A24485F653(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9911F4A24485F653);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9911F4A24485F653 call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedSuffersCriticalHits(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBD76F2359F190AC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedSuffersCriticalHits call failed" << Log::Endl;
	}
}

EXPORT void Native__0xAFC976FD0580C7B3(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFC976FD0580C7B3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAFC976FD0580C7B3 call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedSittingInVehicle(int32_t _ped, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA808AA1D79230FC2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedSittingInVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedSittingInAnyVehicle(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x826AA586EDB9FEF8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedSittingInAnyVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedOnFoot(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01FEE67DB37F59B2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedOnFoot call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedOnAnyBike(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94495889E22C6479);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedOnAnyBike call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedPlantingBomb(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC70B5FAE151982D8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedPlantingBomb call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT vector3_t Native_getDeadPedPickupCoords(int32_t _ped, float _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD5003B097200F36);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDeadPedPickupCoords call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT bool Native_isPedInAnyBoat(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E0E1C2B4F6CB339);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInAnyBoat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedInAnySub(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFBFC01CCFB35D99E);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInAnySub call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedInAnyHeli(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x298B91AE825E5705);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInAnyHeli call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedInAnyPlane(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FFF4CFC74D8FB80);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInAnyPlane call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedInFlyingVehicle(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9134873537FA419C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInFlyingVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedDiesInWater(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56CEF0AC79073BDE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDiesInWater call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedDiesInSinkingVehicle(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD718A22995E2B4BC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDiesInSinkingVehicle call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedArmour(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9483AF821605B1D8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedArmour call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedStayInVehicleWhenJacked(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDF4079F9D54C9A1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedStayInVehicleWhenJacked call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanBeShotInVehicle(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7EF1BA83230BA07);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanBeShotInVehicle call failed" << Log::Endl;
	}
}

EXPORT bool Native_getPedLastDamageBone(int32_t _ped, int32_t& _outBone) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD75960F6BD9EA49C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_outBone);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedLastDamageBone call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_clearPedLastDamageBone(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EF6B7AC68E2F01B);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedLastDamageBone call failed" << Log::Endl;
	}
}

EXPORT void Native_setAiWeaponDamageModifier(float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B1E2A40A65B8521);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAiWeaponDamageModifier call failed" << Log::Endl;
	}
}

EXPORT void Native_resetAiWeaponDamageModifier() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA16670E7BA4743C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetAiWeaponDamageModifier call failed" << Log::Endl;
	}
}

EXPORT void Native_setAiMeleeWeaponDamageModifier(float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66460DEDDD417254);
	ctx->Reset();
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAiMeleeWeaponDamageModifier call failed" << Log::Endl;
	}
}

EXPORT void Native_resetAiMeleeWeaponDamageModifier() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46E56A7CD1D63C3F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetAiMeleeWeaponDamageModifier call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2F3C3D9F50681DE4(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F3C3D9F50681DE4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2F3C3D9F50681DE4 call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanBeTargetted(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63F58F7C80513AAD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanBeTargetted call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanBeTargettedByTeam(int32_t _ped, int32_t _team, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF1CA77833E58F2C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_team);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanBeTargettedByTeam call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanBeTargettedByPlayer(int32_t _ped, int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66B57B72E0836A76);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanBeTargettedByPlayer call failed" << Log::Endl;
	}
}

EXPORT void Native__0x061CB768363D6424(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x061CB768363D6424);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x061CB768363D6424 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xFD325494792302D7(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD325494792302D7);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFD325494792302D7 call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedInAnyPoliceVehicle(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BD04E29640C9C12);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInAnyPoliceVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_forcePedToOpenParachute(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16E42E800B472221);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forcePedToOpenParachute call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedInParachuteFreeFall(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7DCE8BDA0F1C1200);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInParachuteFreeFall call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedFalling(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB92A102F1C4DFA3);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedFalling call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedJumping(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEDABC5900A0BF97);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedJumping call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x412F1364FA066CFB(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x412F1364FA066CFB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x412F1364FA066CFB call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x451D05012CCEC234(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x451D05012CCEC234);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x451D05012CCEC234 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isPedClimbing(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53E8CB4F48BFE623);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedClimbing call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedVaulting(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x117C70D1F5730B5E);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedVaulting call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedDiving(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5527B8246FEF9B11);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedDiving call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedJumpingOutOfVehicle(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x433DDFFE2044B636);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedJumpingOutOfVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedOpeningADoor(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26AF0E8E30BD2A2C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedOpeningADoor call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getPedParachuteState(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79CFD9827CC979B6);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedParachuteState call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPedParachuteLandingType(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B9F1FC6AE8166C0);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedParachuteLandingType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedParachuteTintIndex(int32_t _ped, int32_t _tintIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x333FC8DB079B7186);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_tintIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedParachuteTintIndex call failed" << Log::Endl;
	}
}

EXPORT void Native_getPedParachuteTintIndex(int32_t _ped, int32_t& _outTintIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAF5F7E5AE7C6C9D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_outTintIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedParachuteTintIndex call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedReserveParachuteTintIndex(int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE88DA0751C22A2AD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedReserveParachuteTintIndex call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_createParachuteBagObject(int32_t _ped, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C4F3BF23B6237DB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createParachuteBagObject call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedDucking(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x030983CA930B692D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDucking call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedDucking(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD125AE748725C6BC);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedDucking call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedInAnyTaxi(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E575D6A898AB852);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInAnyTaxi call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedIdRange(int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF107E836A70DCE05);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedIdRange call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedHighlyPerceptive(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52D59AB61DDC05DD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedHighlyPerceptive call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2F074C904D85129E(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F074C904D85129E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2F074C904D85129E call failed" << Log::Endl;
	}
}

EXPORT void Native__0xEC4B4B3B9908052A(int32_t _ped, float _unk) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC4B4B3B9908052A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_unk);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEC4B4B3B9908052A call failed" << Log::Endl;
	}
}

EXPORT void Native__0x733C87D4CE22BEA2(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x733C87D4CE22BEA2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x733C87D4CE22BEA2 call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedSeeingRange(int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF29CF591C4BF6CEE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedSeeingRange call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedHearingRange(int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33A8F7F7D5F7F33C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedHearingRange call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedVisualFieldMinAngle(int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DB492222FB21E26);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedVisualFieldMinAngle call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedVisualFieldMaxAngle(int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70793BDCA1E854D4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedVisualFieldMaxAngle call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedVisualFieldMinElevationAngle(int32_t _ped, float _angle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A276EB2C224D70F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_angle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedVisualFieldMinElevationAngle call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedVisualFieldMaxElevationAngle(int32_t _ped, float _angle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78D0B67629D75856);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_angle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedVisualFieldMaxElevationAngle call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedVisualFieldPeripheralRange(int32_t _ped, float _range) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C74B0BC831B753A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_range);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedVisualFieldPeripheralRange call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedVisualFieldCenterAngle(int32_t _ped, float _angle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B6405E8AB34A907);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_angle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedVisualFieldCenterAngle call failed" << Log::Endl;
	}
}

EXPORT float Native_getPedVisualFieldCenterAngle(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF2C71A32CAD5FBD);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedVisualFieldCenterAngle call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setPedStealthMovement(int32_t _ped, bool _p1, const char* _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88CBB5CEB96B7BD2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedStealthMovement call failed" << Log::Endl;
	}
}

EXPORT bool Native_getPedStealthMovement(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C2AC9CA66575FBF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedStealthMovement call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_createGroup(int32_t _unused) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90370EBE0FEE1A3D);
	ctx->Reset();
	ctx->Push(_unused);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createGroup call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedAsGroupLeader(int32_t _ped, int32_t _groupId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A7819605465FBCE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_groupId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAsGroupLeader call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedAsGroupMember(int32_t _ped, int32_t _groupId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F3480FE65DB31B5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_groupId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAsGroupMember call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanTeleportToGroupLeader(int32_t _pedHandle, int32_t _groupHandle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E2F4240B3F24647);
	ctx->Reset();
	ctx->Push(_pedHandle);
	ctx->Push(_groupHandle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanTeleportToGroupLeader call failed" << Log::Endl;
	}
}

EXPORT void Native_removeGroup(int32_t _groupId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EB2F69076AF7053);
	ctx->Reset();
	ctx->Push(_groupId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeGroup call failed" << Log::Endl;
	}
}

EXPORT void Native_removePedFromGroup(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED74007FFB146BC2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removePedFromGroup call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedGroupMember(int32_t _ped, int32_t _groupId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BB01E3834671191);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_groupId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedGroupMember call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedHangingOnToVehicle(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C86D8AEF8254B78);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedHangingOnToVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setGroupSeparationRange(int32_t _groupHandle, float _separationRange) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4102C7858CFEE4E4);
	ctx->Reset();
	ctx->Push(_groupHandle);
	ctx->Push(_separationRange);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGroupSeparationRange call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedMinGroundTimeForStungun(int32_t _ped, int32_t _ms) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA0675AB151073FA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ms);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedMinGroundTimeForStungun call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedProne(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD6A86331A537A7B9);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedProne call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedInCombat(int32_t _ped, int32_t _target) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4859F1FC66A6278E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInCombat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getPedTaskCombatTarget(int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32C27A11307B01CC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedTaskCombatTarget call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_canPedInCombatSeeTarget(int32_t _ped, int32_t _target) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAD42DE3610D0721);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canPedInCombatSeeTarget call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedDoingDriveby(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2C086CC1BF8F2BF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedDoingDriveby call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedJacking(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AE4FF911DFB61DA);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedJacking call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedBeingJacked(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A497FE2DF198913);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedBeingJacked call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedBeingStunned(int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4FBACCE3B4138EE8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedBeingStunned call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getPedsJacker(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B128DC36C1E04CF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedsJacker call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getJackTarget(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5486A79D9FBD342D);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getJackTarget call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isPedFleeing(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBCCE00B381F8482);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedFleeing call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedInCover(int32_t _ped, bool _exceptUseWeapon) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60DFD0691A170B88);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_exceptUseWeapon);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInCover call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedInCoverFacingLeft(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x845333B3150583AB);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInCoverFacingLeft call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedInHighCover(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A03BF943D767C93);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInHighCover call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedGoingIntoCover(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F65DBC537E59AD5);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedGoingIntoCover call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_setPedPinnedDown(int32_t _ped, bool _pinned, int32_t _i) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAD6D1ACF08F4612);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_pinned);
	ctx->Push(_i);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPinnedDown call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getSeatPedIsTryingToEnter(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F4C85ACD641BCD2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getSeatPedIsTryingToEnter call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehiclePedIsTryingToEnter(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x814FA8BE5449445D);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehiclePedIsTryingToEnter call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPedSourceOfDeath(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93C8B64DEB84728C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedSourceOfDeath call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPedCauseOfDeath(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16FFE42AB2D2DC59);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedCauseOfDeath call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPedTimeOfDeath(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E98817B311AE98A);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedTimeOfDeath call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x5407B7288D0478B7(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5407B7288D0478B7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5407B7288D0478B7 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x336B3D200AB007CB(int32_t _p0, float _p1, float _p2, float _p3, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x336B3D200AB007CB);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x336B3D200AB007CB call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedRelationshipGroupDefaultHash(int32_t _ped, int32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADB3F206518799E8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedRelationshipGroupDefaultHash call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedRelationshipGroupHash(int32_t _ped, int32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC80A74AC829DDD92);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedRelationshipGroupHash call failed" << Log::Endl;
	}
}

EXPORT void Native_setRelationshipBetweenGroups(int32_t _relationship, int32_t _group1, int32_t _group2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF25EB89375A37AD);
	ctx->Reset();
	ctx->Push(_relationship);
	ctx->Push(_group1);
	ctx->Push(_group2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRelationshipBetweenGroups call failed" << Log::Endl;
	}
}

EXPORT void Native_clearRelationshipBetweenGroups(int32_t _relationship, int32_t _group1, int32_t _group2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E29243FB56FC6D4);
	ctx->Reset();
	ctx->Push(_relationship);
	ctx->Push(_group1);
	ctx->Push(_group2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearRelationshipBetweenGroups call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_addRelationshipGroup(const char* _name, int32_t& _groupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF372BC22FCB88606);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_groupHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addRelationshipGroup call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_removeRelationshipGroup(int32_t _groupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6BA2444AB393DA2);
	ctx->Reset();
	ctx->Push(_groupHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeRelationshipGroup call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesRelationshipGroupExist(int32_t _groupHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC6E3B6BB69501F1);
	ctx->Reset();
	ctx->Push(_groupHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesRelationshipGroupExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getRelationshipBetweenPeds(int32_t _ped1, int32_t _ped2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBA5AD3A0EAF7121);
	ctx->Reset();
	ctx->Push(_ped1);
	ctx->Push(_ped2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRelationshipBetweenPeds call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPedRelationshipGroupDefaultHash(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42FDD0F017B1E38E);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedRelationshipGroupDefaultHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPedRelationshipGroupHash(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7DBDD04862D95F04);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedRelationshipGroupHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getRelationshipBetweenGroups(int32_t _group1, int32_t _group2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E6B70061662AE5C);
	ctx->Reset();
	ctx->Push(_group1);
	ctx->Push(_group2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRelationshipBetweenGroups call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setRelationshipGroupDontAffectWantedLevel(int32_t _group, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5615E0C5EB2BC6E2);
	ctx->Reset();
	ctx->Push(_group);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRelationshipGroupDontAffectWantedLevel call failed" << Log::Endl;
	}
}

EXPORT void Native__0xAD27D957598E49E9(int32_t _ped, int32_t _p1, float _p2, int32_t _hash, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD27D957598E49E9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_hash);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAD27D957598E49E9 call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanBeTargetedWithoutLos(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4328652AE5769C71);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanBeTargetedWithoutLos call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedToInformRespectedFriends(int32_t _ped, float _radius, int32_t _maxFriends) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x112942C6E708F70B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_radius);
	ctx->Push(_maxFriends);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedToInformRespectedFriends call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedRespondingToEvent(int32_t _ped, int32_t _event) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x625B774D75C87068);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_event);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedRespondingToEvent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getPedEventData(int32_t _ped, int32_t _eventType, int32_t& _outData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA656A3BB01BDEA3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_eventType);
	ctx->Push(_outData);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedEventData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedFiringPattern(int32_t _ped, int32_t _patternHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9AC577F5A12AD8A9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_patternHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedFiringPattern call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedShootRate(int32_t _ped, int32_t _shootRate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x614DA022990752DC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_shootRate);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedShootRate call failed" << Log::Endl;
	}
}

EXPORT void Native_setCombatFloat(int32_t _ped, int32_t _combatType, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF41B4B141ED981C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_combatType);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCombatFloat call failed" << Log::Endl;
	}
}

EXPORT float Native_getCombatFloat(int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52DFF8A10508090A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCombatFloat call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_getGroupSize(int32_t _groupID, int32_t& _unknown, int32_t& _sizeInMembers) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DE69FE35CA09A45);
	ctx->Reset();
	ctx->Push(_groupID);
	ctx->Push(_unknown);
	ctx->Push(_sizeInMembers);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getGroupSize call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesGroupExist(int32_t _groupId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C6B0C22F9F40BBE);
	ctx->Reset();
	ctx->Push(_groupId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesGroupExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getPedGroupIndex(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF162E133B4E7A675);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedGroupIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isPedInGroup(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5891CAC5D4ACFF74);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInGroup call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getPlayerPedIsFollowing(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A3975DEA89F9A17);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerPedIsFollowing call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setGroupFormation(int32_t _groupId, int32_t _formationType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE2F5FC3AF7E8C1E);
	ctx->Reset();
	ctx->Push(_groupId);
	ctx->Push(_formationType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGroupFormation call failed" << Log::Endl;
	}
}

EXPORT void Native_setGroupFormationSpacing(int32_t _groupId, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D9D45004C28C916);
	ctx->Reset();
	ctx->Push(_groupId);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGroupFormationSpacing call failed" << Log::Endl;
	}
}

EXPORT void Native_resetGroupFormationDefaultSpacing(int32_t _groupHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63DAB4CCB3273205);
	ctx->Reset();
	ctx->Push(_groupHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetGroupFormationDefaultSpacing call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehiclePedIsUsing(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6094AD011A2EA87D);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehiclePedIsUsing call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehiclePedIsEntering(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF92691AED837A5FC);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehiclePedIsEntering call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedGravity(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FF447B6B6AD960A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedGravity call failed" << Log::Endl;
	}
}

EXPORT void Native_applyDamageToPed(int32_t _ped, int32_t _damageAmount, bool _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x697157CED63F18D4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_damageAmount);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native applyDamageToPed call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getTimeOfLastPedWeaponDamage(int32_t _ped, int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36B77BB84687C318);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTimeOfLastPedWeaponDamage call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedAllowedToDuck(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA1F1B7BE1A8766F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAllowedToDuck call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedNeverLeavesGroup(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DBFC55D5C9BB447);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedNeverLeavesGroup call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedType(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF059E1E4C01E63C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedAsCop(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB03C38DD3FB7FFD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAsCop call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedMaxHealth(int32_t _ped, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5F6378C4F3419D3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedMaxHealth call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedMaxHealth(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4700A416E8324EF3);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedMaxHealth call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedMaxTimeInWater(int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43C851690662113D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedMaxTimeInWater call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedMaxTimeUnderwater(int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6BA428C528D9E522);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedMaxTimeUnderwater call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2735233A786B1BEF(int32_t _ped, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2735233A786B1BEF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2735233A786B1BEF call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedVehicleForcedSeatUsage(int32_t _ped, int32_t _vehicle, int32_t _seatIndex, int32_t _flags, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x952F06BEECD775CC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	ctx->Push(_flags);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedVehicleForcedSeatUsage call failed" << Log::Endl;
	}
}

EXPORT void Native_clearAllPedVehicleForcedSeatUsage(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6CA85E7259CE16B);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearAllPedVehicleForcedSeatUsage call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB282749D5E028163(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB282749D5E028163);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB282749D5E028163 call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanBeKnockedOffVehicle(int32_t _ped, int32_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A6535691B477C48);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanBeKnockedOffVehicle call failed" << Log::Endl;
	}
}

EXPORT bool Native_canKnockPedOffVehicle(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51AC07A44D4F5B8A);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canKnockPedOffVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_knockPedOffVehicle(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45BBCBA77C29A841);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native knockPedOffVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCoordsNoGang(int32_t _ped, float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87052FE446E07247);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCoordsNoGang call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedAsGroupMember(int32_t _groupID, int32_t _memberNumber) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51455483CF23ED97);
	ctx->Reset();
	ctx->Push(_groupID);
	ctx->Push(_memberNumber);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedAsGroupMember call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPedAsGroupLeader(int32_t _groupID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CCE68DBD5FE93EC);
	ctx->Reset();
	ctx->Push(_groupID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedAsGroupLeader call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedKeepTask(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x971D38760FBC02EF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedKeepTask call failed" << Log::Endl;
	}
}

EXPORT void Native__0x49E50BDB8BA4DAB2(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49E50BDB8BA4DAB2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x49E50BDB8BA4DAB2 call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedSwimming(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DE327631295B4C2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedSwimming call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedSwimmingUnderWater(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC024869A53992F34);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedSwimmingUnderWater call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedCoordsKeepVehicle(int32_t _ped, float _posX, float _posY, float _posZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9AFEFF481A85AB2E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCoordsKeepVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedDiesInVehicle(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A30922C90C9B42C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDiesInVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setCreateRandomCops(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x102E68B2024D536D);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCreateRandomCops call failed" << Log::Endl;
	}
}

EXPORT void Native_setCreateRandomCopsNotOnScenarios(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A4986851C4EF6E7);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCreateRandomCopsNotOnScenarios call failed" << Log::Endl;
	}
}

EXPORT void Native_setCreateRandomCopsOnScenarios(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x444CB7D7DBE6973D);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCreateRandomCopsOnScenarios call failed" << Log::Endl;
	}
}

EXPORT bool Native_canCreateRandomCops() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EE2CAFF7F17770D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canCreateRandomCops call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedAsEnemy(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02A0C9720B854BFA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAsEnemy call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanSmashGlass(int32_t _ped, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CCE141467FF42A2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanSmashGlass call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedInAnyTrain(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F972C1AB75A1ED0);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInAnyTrain call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedGettingIntoAVehicle(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB062B2B5722478E);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedGettingIntoAVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedTryingToEnterALockedVehicle(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44D28D5DDFE5F68C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedTryingToEnterALockedVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setEnableHandcuffs(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF1AF8B5D56542FA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEnableHandcuffs call failed" << Log::Endl;
	}
}

EXPORT void Native_setEnableBoundAnkles(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC52E0F855C58FC2E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEnableBoundAnkles call failed" << Log::Endl;
	}
}

EXPORT void Native_setEnableScuba(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF99F62004024D506);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEnableScuba call failed" << Log::Endl;
	}
}

EXPORT void Native_setCanAttackFriendly(int32_t _ped, bool _toggle, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3B1CB349FF9C75D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCanAttackFriendly call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedAlertness(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6AA118530443FD2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedAlertness call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedAlertness(int32_t _ped, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBA71115ED9941A6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAlertness call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedGetOutUpsideDownVehicle(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC0ED94165A48BC2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedGetOutUpsideDownVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedMovementClipset(int32_t _ped, const char* _clipSet, float _transitionSpeed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF8A94EDE7712BEF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_clipSet);
	ctx->Push(_transitionSpeed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedMovementClipset call failed" << Log::Endl;
	}
}

EXPORT void Native_resetPedMovementClipset(int32_t _ped, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA74EC0CB0AAEA2C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetPedMovementClipset call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedStrafeClipset(int32_t _ped, const char* _clipSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29A28F3F8CF6D854);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_clipSet);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedStrafeClipset call failed" << Log::Endl;
	}
}

EXPORT void Native_resetPedStrafeClipset(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20510814175EA477);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetPedStrafeClipset call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedWeaponMovementClipset(int32_t _ped, const char* _clipSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2622E35B77D3ACA2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_clipSet);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedWeaponMovementClipset call failed" << Log::Endl;
	}
}

EXPORT void Native_resetPedWeaponMovementClipset(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97B0DB5B4AA74E77);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetPedWeaponMovementClipset call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedDriveByClipsetOverride(int32_t _ped, const char* _clipset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED34AB6C5CB36520);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_clipset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDriveByClipsetOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPedDriveByClipsetOverride(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AFE3690D7E0B5AC);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedDriveByClipsetOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCoverClipsetOverride(int32_t _ped, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DBA107B4937F809);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCoverClipsetOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPedCoverClipsetOverride(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC79196DCB36F6121);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedCoverClipsetOverride call failed" << Log::Endl;
	}
}

EXPORT void Native__0x80054D7FCC70EEC6(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80054D7FCC70EEC6);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x80054D7FCC70EEC6 call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedInVehicleContext(int32_t _ped, int32_t _context) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x530071295899A8C6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_context);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedInVehicleContext call failed" << Log::Endl;
	}
}

EXPORT void Native_resetPedInVehicleContext(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22EF8FF8778030EB);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetPedInVehicleContext call failed" << Log::Endl;
	}
}

EXPORT bool Native_isScriptedScenarioPedUsingConditionalAnim(int32_t _ped, const char* _animDict, const char* _anim) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6EC47A344923E1ED);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_animDict);
	ctx->Push(_anim);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScriptedScenarioPedUsingConditionalAnim call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedAlternateWalkAnim(int32_t _ped, const char* _animDict, const char* _animName, float _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C60394CB4F75E9A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_animDict);
	ctx->Push(_animName);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAlternateWalkAnim call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPedAlternateWalkAnim(int32_t _ped, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8844BBFCE30AA9E9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedAlternateWalkAnim call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedAlternateMovementAnim(int32_t _ped, int32_t _stance, const char* _animDictionary, const char* _animationName, float _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90A43CC281FFAB46);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_stance);
	ctx->Push(_animDictionary);
	ctx->Push(_animationName);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAlternateMovementAnim call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPedAlternateMovementAnim(int32_t _ped, int32_t _stance, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8D19675ED5FBDCE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_stance);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedAlternateMovementAnim call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedGestureGroup(int32_t _ped, const char* _animGroupGesture) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDDF803377F94AAA8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_animGroupGesture);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedGestureGroup call failed" << Log::Endl;
	}
}

EXPORT vector3_t Native_getAnimInitialOffsetPosition(const char* _animDict, const char* _animName, float _x, float _y, float _z, float _xRot, float _yRot, float _zRot, float _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE22B26DD764C040);
	ctx->Reset();
	ctx->Push(_animDict);
	ctx->Push(_animName);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getAnimInitialOffsetPosition call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native_getAnimInitialOffsetRotation(const char* _animDict, const char* _animName, float _x, float _y, float _z, float _xRot, float _yRot, float _zRot, float _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B805E6046EE9E47);
	ctx->Reset();
	ctx->Push(_animDict);
	ctx->Push(_animName);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getAnimInitialOffsetRotation call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT int32_t Native_getPedDrawableVariation(int32_t _ped, int32_t _componentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67F3780DD425D4FC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedDrawableVariation call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumberOfPedDrawableVariations(int32_t _ped, int32_t _componentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27561561732A7842);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumberOfPedDrawableVariations call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPedTextureVariation(int32_t _ped, int32_t _componentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04A355E041E004E6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedTextureVariation call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumberOfPedTextureVariations(int32_t _ped, int32_t _componentId, int32_t _drawableId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F7156A3142A6BAD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	ctx->Push(_drawableId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumberOfPedTextureVariations call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumberOfPedPropDrawableVariations(int32_t _ped, int32_t _propId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FAF9754E789FB47);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_propId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumberOfPedPropDrawableVariations call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumberOfPedPropTextureVariations(int32_t _ped, int32_t _propId, int32_t _drawableId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6E7F1CEB523E171);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_propId);
	ctx->Push(_drawableId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumberOfPedPropTextureVariations call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPedPaletteVariation(int32_t _ped, int32_t _componentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3DD5F2A84B42281);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedPaletteVariation call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x9E30E91FB03A2CAF(int32_t& _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E30E91FB03A2CAF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9E30E91FB03A2CAF call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x1E77FA7A62EE6C4C(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E77FA7A62EE6C4C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1E77FA7A62EE6C4C call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xF033419D1B81FAE8(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF033419D1B81FAE8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF033419D1B81FAE8 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isPedComponentVariationValid(int32_t _ped, int32_t _componentId, int32_t _drawableId, int32_t _textureId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE825F6B6CEA7671D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	ctx->Push(_drawableId);
	ctx->Push(_textureId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedComponentVariationValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedComponentVariation(int32_t _ped, int32_t _componentId, int32_t _drawableId, int32_t _textureId, int32_t _paletteId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x262B14F48D29DE80);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	ctx->Push(_drawableId);
	ctx->Push(_textureId);
	ctx->Push(_paletteId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedComponentVariation call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedRandomComponentVariation(int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8A9481A01E63C28);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedRandomComponentVariation call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedRandomProps(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC44AA05345C992C6);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedRandomProps call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedDefaultComponentVariation(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45EEE61580806D63);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDefaultComponentVariation call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedBlendFromParents(int32_t _ped, int32_t _p1, int32_t _p2, float _p3, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x137BBD05230DB22D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedBlendFromParents call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedHeadBlendData(int32_t _ped, int32_t _shapeFirstID, int32_t _shapeSecondID, int32_t _shapeThirdID, int32_t _skinFirstID, int32_t _skinSecondID, int32_t _skinThirdID, float _shapeMix, float _skinMix, float _thirdMix, bool _isParent) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9414E18B9434C2FE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_shapeFirstID);
	ctx->Push(_shapeSecondID);
	ctx->Push(_shapeThirdID);
	ctx->Push(_skinFirstID);
	ctx->Push(_skinSecondID);
	ctx->Push(_skinThirdID);
	ctx->Push(_shapeMix);
	ctx->Push(_skinMix);
	ctx->Push(_thirdMix);
	ctx->Push(_isParent);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedHeadBlendData call failed" << Log::Endl;
	}
}

EXPORT bool Native_getPedHeadBlendData(int32_t _ped, int32_t& _headBlendData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2746BD9D88C5C5D0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_headBlendData);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedHeadBlendData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_updatePedHeadBlendData(int32_t _ped, float _shapeMix, float _skinMix, float _thirdMix) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x723538F61C647C5A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_shapeMix);
	ctx->Push(_skinMix);
	ctx->Push(_thirdMix);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native updatePedHeadBlendData call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedEyeColor(int32_t _ped, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50B56988B170AFDF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedEyeColor call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedEyeColor(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76BBA2CEE66D47E9);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedEyeColor call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedHeadOverlay(int32_t _ped, int32_t _overlayID, int32_t _index, float _opacity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48F44967FA05CC1E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_overlayID);
	ctx->Push(_index);
	ctx->Push(_opacity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedHeadOverlay call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedHeadOverlayValue(int32_t _ped, int32_t _overlayID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA60EF3B6461A4D43);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_overlayID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedHeadOverlayValue call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPedHeadOverlayNum(int32_t _overlayID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF1CE768BB43480E);
	ctx->Reset();
	ctx->Push(_overlayID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedHeadOverlayNum call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedHeadOverlayColor(int32_t _ped, int32_t _overlayID, int32_t _colorType, int32_t _colorID, int32_t _secondColorID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x497BF74A7B9CB952);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_overlayID);
	ctx->Push(_colorType);
	ctx->Push(_colorID);
	ctx->Push(_secondColorID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedHeadOverlayColor call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedHairColor(int32_t _ped, int32_t _colorID, int32_t _highlightColorID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4CFFC65454C93A49);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_colorID);
	ctx->Push(_highlightColorID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedHairColor call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getNumHairColors() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE5C0CF872C2AD150);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumHairColors call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumMakeupColors() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1F7CA1535D22818);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumMakeupColors call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_getPedHairRgbColor(int32_t _hairColorIndex, int32_t& _outR, int32_t& _outG, int32_t& _outB) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4852FC386E2E1BB5);
	ctx->Reset();
	ctx->Push(_hairColorIndex);
	ctx->Push(_outR);
	ctx->Push(_outG);
	ctx->Push(_outB);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedHairRgbColor call failed" << Log::Endl;
	}
}

EXPORT void Native_getPedMakeupRgbColor(int32_t _makeupColorIndex, int32_t& _outR, int32_t& _outG, int32_t& _outB) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x013E5CFC38CD5387);
	ctx->Reset();
	ctx->Push(_makeupColorIndex);
	ctx->Push(_outR);
	ctx->Push(_outG);
	ctx->Push(_outB);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedMakeupRgbColor call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedHairColorValid2(int32_t _colorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED6D8E27A43B8CDE);
	ctx->Reset();
	ctx->Push(_colorId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedHairColorValid2 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xEA9960D07DADCF10(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA9960D07DADCF10);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEA9960D07DADCF10 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isPedLipstickColorValid2(int32_t _colorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E802F11FBE27674);
	ctx->Reset();
	ctx->Push(_colorId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedLipstickColorValid2 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedBlushColorValid2(int32_t _colorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF41B5D290C99A3D6);
	ctx->Reset();
	ctx->Push(_colorId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedBlushColorValid2 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedHairColorValid(int32_t _colorID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0D36E5D9E99CC21);
	ctx->Reset();
	ctx->Push(_colorID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedHairColorValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xAAA6A3698A69E048(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAA6A3698A69E048);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAAA6A3698A69E048 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isPedLipstickColorValid(int32_t _colorID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0525A2C2562F3CD4);
	ctx->Reset();
	ctx->Push(_colorID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedLipstickColorValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedBlushColorValid(int32_t _colorID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x604E810189EE3A59);
	ctx->Reset();
	ctx->Push(_colorID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedBlushColorValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedBodyBlemishValid(int32_t _colorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x09E7ECA981D9B210);
	ctx->Reset();
	ctx->Push(_colorId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedBodyBlemishValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xC56FBF2F228E1DAC(int32_t _modelHash, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC56FBF2F228E1DAC);
	ctx->Reset();
	ctx->Push(_modelHash);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC56FBF2F228E1DAC call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedFaceFeature(int32_t _ped, int32_t _index, float _scale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71A5C1DBA060049E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_index);
	ctx->Push(_scale);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedFaceFeature call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasPedHeadBlendFinished(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x654CD0A825161131);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasPedHeadBlendFinished call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_finalizeHeadBlend(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4668D80430D6C299);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native finalizeHeadBlend call failed" << Log::Endl;
	}
}

EXPORT void Native_setHeadBlendPaletteColor(int32_t _ped, int32_t _r, int32_t _g, int32_t _b, int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC9682B8951C5229);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHeadBlendPaletteColor call failed" << Log::Endl;
	}
}

EXPORT void Native_disableHeadBlendPaletteColor(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA21C118553BBDF02);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableHeadBlendPaletteColor call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedHeadBlendFirstIndex(int32_t _type) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68D353AB88B97E0C);
	ctx->Reset();
	ctx->Push(_type);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedHeadBlendFirstIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPedHeadBlendNumHeads(int32_t _type) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EF37013A6539C9D);
	ctx->Reset();
	ctx->Push(_type);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedHeadBlendNumHeads call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_setPedPreloadVariationData(int32_t _ped, int32_t _slot, int32_t _drawableId, int32_t _textureId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39D55A620FCB6A3A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_slot);
	ctx->Push(_drawableId);
	ctx->Push(_textureId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPreloadVariationData call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_hasPedPreloadVariationDataFinished(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66680A92700F43DF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasPedPreloadVariationDataFinished call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_releasePedPreloadVariationData(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AAB586FFEC0FD96);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native releasePedPreloadVariationData call failed" << Log::Endl;
	}
}

EXPORT bool Native_setPedPreloadPropData(int32_t _ped, int32_t _componentId, int32_t _drawableId, int32_t _TextureId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B16A3BFF1FBCE49);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	ctx->Push(_drawableId);
	ctx->Push(_TextureId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPreloadPropData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasPedPreloadPropDataFinished(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x784002A632822099);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasPedPreloadPropDataFinished call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_releasePedPreloadPropData(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF79F9DEF0AADE61A);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native releasePedPreloadPropData call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedPropIndex(int32_t _ped, int32_t _componentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x898CC20EA75BACD8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedPropIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedPropIndex(int32_t _ped, int32_t _componentId, int32_t _drawableId, int32_t _TextureId, bool _attach) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93376B65A266EB5F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	ctx->Push(_drawableId);
	ctx->Push(_TextureId);
	ctx->Push(_attach);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPropIndex call failed" << Log::Endl;
	}
}

EXPORT void Native_knockOffPedProp(int32_t _ped, bool _p1, bool _p2, bool _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FD7816A36615F48);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native knockOffPedProp call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPedProp(int32_t _ped, int32_t _propId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0943E5B8E078E76E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_propId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedProp call failed" << Log::Endl;
	}
}

EXPORT void Native_clearAllPedProps(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD8A7537A9B52F06);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearAllPedProps call failed" << Log::Endl;
	}
}

EXPORT void Native_dropAmbientProp(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFF4710E2A0A6C12);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native dropAmbientProp call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedPropTextureIndex(int32_t _ped, int32_t _componentId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE131A28626F81AB2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_componentId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedPropTextureIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_clearPedParachutePackVariation(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1280804F7CFD2D6C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedParachutePackVariation call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedScubaGearVariation(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36C6984C3ED0C911);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedScubaGearVariation call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPedScubaGearVariation(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB50EB4CCB29704AC);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedScubaGearVariation call failed" << Log::Endl;
	}
}

EXPORT bool Native__0xFEC9A3B1820F3331(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEC9A3B1820F3331);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFEC9A3B1820F3331 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setBlockingOfNonTemporaryEvents(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F8AA94D6D97DBF4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBlockingOfNonTemporaryEvents call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedBoundsOrientation(int32_t _ped, float _p1, float _p2, float _p3, float _p4, float _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F5F651ACCC9C4CF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedBoundsOrientation call failed" << Log::Endl;
	}
}

EXPORT void Native_registerTarget(int32_t _ped, int32_t _target) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F25D9AEFA34FBA2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerTarget call failed" << Log::Endl;
	}
}

EXPORT void Native_registerHatedTargetsAroundPed(int32_t _ped, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9222F300BF8354FE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerHatedTargetsAroundPed call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getRandomPedAtCoord(float _x, float _y, float _z, float _xRadius, float _yRadius, float _zRadius, int32_t _pedType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x876046A8E3A4B71C);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_xRadius);
	ctx->Push(_yRadius);
	ctx->Push(_zRadius);
	ctx->Push(_pedType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRandomPedAtCoord call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getClosestPed(float _x, float _y, float _z, float _radius, bool _p4, bool _p5, int32_t& _outPed, bool _p7, bool _p8, int32_t _pedType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC33AB876A77F8164);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_outPed);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_pedType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClosestPed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setScenarioPedsToBeReturnedByNextCommand(bool _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14F19A8782C8071E);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScenarioPedsToBeReturnedByNextCommand call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x03EA03AF85A85CB7(int32_t _ped, bool _p1, bool _p2, bool _p3, bool _p4, bool _p5, bool _p6, bool _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03EA03AF85A85CB7);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x03EA03AF85A85CB7 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setDriverRacingModifier(int32_t _driver, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDED5AF5A0EA4B297);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDriverRacingModifier call failed" << Log::Endl;
	}
}

EXPORT void Native_setDriverAbility(int32_t _driver, float _ability) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB195FFA8042FC5C3);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_ability);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDriverAbility call failed" << Log::Endl;
	}
}

EXPORT void Native_setDriverAggressiveness(int32_t _driver, float _aggressiveness) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA731F608CA104E3C);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_aggressiveness);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDriverAggressiveness call failed" << Log::Endl;
	}
}

EXPORT bool Native_canPedRagdoll(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x128F79EDCECE4FD5);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canPedRagdoll call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_setPedToRagdoll(int32_t _ped, int32_t _time1, int32_t _time2, int32_t _ragdollType, bool _p4, bool _p5, bool _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE99FB955581844A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_time1);
	ctx->Push(_time2);
	ctx->Push(_ragdollType);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedToRagdoll call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_setPedToRagdollWithFall(int32_t _ped, int32_t _time, int32_t _p2, int32_t _ragdollType, float _x, float _y, float _z, float _p7, float _p8, float _p9, float _p10, float _p11, float _p12, float _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD76632D99E4966C8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_time);
	ctx->Push(_p2);
	ctx->Push(_ragdollType);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	ctx->Push(_p13);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedToRagdollWithFall call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedRagdollOnCollision(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0A4F1BBF4FA7497);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedRagdollOnCollision call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedRagdoll(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47E4E977581C5B55);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedRagdoll call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedRunningRagdollTask(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3B6097CC25AA69E);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedRunningRagdollTask call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedRagdollForceFall(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01F6594B923B9251);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedRagdollForceFall call failed" << Log::Endl;
	}
}

EXPORT void Native_resetPedRagdollTimer(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FA4664CF62E47E8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetPedRagdollTimer call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanRagdoll(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB128377056A54E2A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanRagdoll call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedRunningMeleeTask(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1871251F3B5ACD7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedRunningMeleeTask call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedRunningMobilePhoneTask(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2AFE52F782F25775);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedRunningMobilePhoneTask call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isMobilePhoneToPedEar(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3F3564A5B3646C0);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMobilePhoneToPedEar call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setRagdollBlockingFlags(int32_t _ped, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26695EC767728D84);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRagdollBlockingFlags call failed" << Log::Endl;
	}
}

EXPORT void Native_clearRagdollBlockingFlags(int32_t _ped, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD86D101FCFD00A4B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearRagdollBlockingFlags call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedAngledDefensiveArea(int32_t _ped, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, bool _p8, bool _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7F76DF27A5045A1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAngledDefensiveArea call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedSphereDefensiveArea(int32_t _ped, float _x, float _y, float _z, float _radius, bool _p5, bool _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D3151A373974804);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedSphereDefensiveArea call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedDefensiveSphereAttachedToPed(int32_t _ped, int32_t _target, float _xOffset, float _yOffset, float _zOffset, float _radius, bool _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9B8F91AAD3B953E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_radius);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDefensiveSphereAttachedToPed call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedDefensiveSphereAttachedToVehicle(int32_t _ped, int32_t _target, float _xOffset, float _yOffset, float _zOffset, float _radius, bool _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4723DB6E736CCFF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_radius);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDefensiveSphereAttachedToVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedDefensiveAreaAttachedToPed(int32_t _ped, int32_t _attachPed, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, float _p8, bool _p9, bool _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4EF47FE21698A8B6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_attachPed);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDefensiveAreaAttachedToPed call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedDefensiveAreaDirection(int32_t _ped, float _p1, float _p2, float _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x413C6C763A4AFFAD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDefensiveAreaDirection call failed" << Log::Endl;
	}
}

EXPORT void Native_removePedDefensiveArea(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74D4E028107450A9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removePedDefensiveArea call failed" << Log::Endl;
	}
}

EXPORT vector3_t Native_getPedDefensiveAreaPosition(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C06B8786DD94CD1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedDefensiveAreaPosition call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT bool Native_isPedDefensiveAreaActive(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA63D9FE45412247);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedDefensiveAreaActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedPreferredCoverSet(int32_t _ped, int32_t _itemSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8421EB4DA7E391B9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_itemSet);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPreferredCoverSet call failed" << Log::Endl;
	}
}

EXPORT void Native_removePedPreferredCoverSet(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDDB234CF74073D9);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removePedPreferredCoverSet call failed" << Log::Endl;
	}
}

EXPORT void Native_reviveInjuredPed(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D8ACD8388CD99CE);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native reviveInjuredPed call failed" << Log::Endl;
	}
}

EXPORT void Native_resurrectPed(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71BC8E838B9C6035);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resurrectPed call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedNameDebug(int32_t _ped, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98EFA132A4117BE1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedNameDebug call failed" << Log::Endl;
	}
}

EXPORT vector3_t Native_getPedExtractedDisplacement(int32_t _ped, bool _worldSpace) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0AF41401ADF87E3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_worldSpace);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedExtractedDisplacement call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT void Native_setPedDiesWhenInjured(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BA7919BED300023);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDiesWhenInjured call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedEnableWeaponBlocking(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97A790315D3831FD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedEnableWeaponBlocking call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF9ACF4A08098EA25(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9ACF4A08098EA25);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF9ACF4A08098EA25 call failed" << Log::Endl;
	}
}

EXPORT void Native_resetPedVisibleDamage(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3AC1F7B898F30C05);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetPedVisibleDamage call failed" << Log::Endl;
	}
}

EXPORT void Native_applyPedBloodDamageByZone(int32_t _ped, int32_t _p1, float _p2, float _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x816F6981C60BF53B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native applyPedBloodDamageByZone call failed" << Log::Endl;
	}
}

EXPORT void Native_applyPedBlood(int32_t _ped, int32_t _boneIndex, float _xRot, float _yRot, float _zRot, const char* _woundType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83F7E01C7B769A26);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_boneIndex);
	ctx->Push(_xRot);
	ctx->Push(_yRot);
	ctx->Push(_zRot);
	ctx->Push(_woundType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native applyPedBlood call failed" << Log::Endl;
	}
}

EXPORT void Native_applyPedBloodByZone(int32_t _ped, int32_t _p1, float _p2, float _p3, const char* _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3311E47B91EDCBBC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native applyPedBloodByZone call failed" << Log::Endl;
	}
}

EXPORT void Native_applyPedBloodSpecific(int32_t _ped, int32_t _p1, float _p2, float _p3, float _p4, float _p5, int32_t _p6, float _p7, const char* _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF0D582CBF2D9B0F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native applyPedBloodSpecific call failed" << Log::Endl;
	}
}

EXPORT void Native_applyPedDamageDecal(int32_t _ped, int32_t _damageZone, float _xOffset, float _yOffset, float _heading, float _scale, float _alpha, int32_t _unkVariation, bool _fadeIn, const char* _decalName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x397C38AA7B4A5F83);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_damageZone);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_heading);
	ctx->Push(_scale);
	ctx->Push(_alpha);
	ctx->Push(_unkVariation);
	ctx->Push(_fadeIn);
	ctx->Push(_decalName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native applyPedDamageDecal call failed" << Log::Endl;
	}
}

EXPORT void Native_applyPedDamagePack(int32_t _ped, const char* _damagePack, float _damage, float _mult) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46DF918788CB093F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_damagePack);
	ctx->Push(_damage);
	ctx->Push(_mult);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native applyPedDamagePack call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPedBloodDamage(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8FE22675A5A45817);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedBloodDamage call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPedBloodDamageByZone(int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56E3B78C5408D9F4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedBloodDamageByZone call failed" << Log::Endl;
	}
}

EXPORT void Native_hidePedBloodDamageByZone(int32_t _ped, int32_t _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62AB793144DE75DC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hidePedBloodDamageByZone call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPedDamageDecalByZone(int32_t _ped, int32_t _p1, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x523C79AEEFCC4A2A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedDamageDecalByZone call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedDecorationsState(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71EAB450D86954A1);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedDecorationsState call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x2B694AFCF64E6994(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B694AFCF64E6994);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2B694AFCF64E6994 call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPedWetness(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C720776DAA43E7E);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedWetness call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedWetnessHeight(int32_t _ped, float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44CB6447D2571AA0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedWetnessHeight call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedWetnessEnabledThisFrame(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5485E4907B53019);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedWetnessEnabledThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPedEnvDirt(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6585D955A68452A5);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedEnvDirt call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedSweat(int32_t _ped, float _sweat) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27B0405F59637D1F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_sweat);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedSweat call failed" << Log::Endl;
	}
}

EXPORT void Native_addPedDecorationFromHashes(int32_t _ped, int32_t _collection, int32_t _overlay) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F5D1665E352A839);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_collection);
	ctx->Push(_overlay);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addPedDecorationFromHashes call failed" << Log::Endl;
	}
}

EXPORT void Native_addPedDecorationFromHashesInCorona(int32_t _ped, int32_t _collection, int32_t _overlay) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5619BFA07CFD7833);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_collection);
	ctx->Push(_overlay);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addPedDecorationFromHashesInCorona call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedDecorationZoneFromHashes(int32_t _collection, int32_t _overlay) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FD452BFBE7A7A8B);
	ctx->Reset();
	ctx->Push(_collection);
	ctx->Push(_overlay);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedDecorationZoneFromHashes call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_clearPedDecorations(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E5173C163976E38);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedDecorations call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPedDecorationsLeaveScars(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3B27E70CEAB9F0C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedDecorationsLeaveScars call failed" << Log::Endl;
	}
}

EXPORT bool Native_wasPedSkeletonUpdated(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11B499C1E0FF8559);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native wasPedSkeletonUpdated call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT vector3_t Native_getPedBoneCoords(int32_t _ped, int32_t _boneId, float _offsetX, float _offsetY, float _offsetZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17C07FC640E86B4E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_boneId);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedBoneCoords call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT void Native_createNmMessage(bool _startImmediately, int32_t _messageId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x418EF2A1BCE56685);
	ctx->Reset();
	ctx->Push(_startImmediately);
	ctx->Push(_messageId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createNmMessage call failed" << Log::Endl;
	}
}

EXPORT void Native_givePedNmMessage(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB158DFCCC56E5C5B);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native givePedNmMessage call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_addScenarioBlockingArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, bool _p6, bool _p7, bool _p8, bool _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B5C85C612E5256E);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addScenarioBlockingArea call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_removeScenarioBlockingAreas() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD37401D78A929A49);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeScenarioBlockingAreas call failed" << Log::Endl;
	}
}

EXPORT void Native_removeScenarioBlockingArea(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31D16B74C6E29D66);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeScenarioBlockingArea call failed" << Log::Endl;
	}
}

EXPORT void Native_setScenarioPedsSpawnInSphereArea(float _x, float _y, float _z, float _range, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28157D43CF600981);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_range);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScenarioPedsSpawnInSphereArea call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesScenarioBlockingAreaExist(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A24B067D175A7BD);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesScenarioBlockingAreaExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedUsingScenario(int32_t _ped, const char* _scenario) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1BF094736DD62C2E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_scenario);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedUsingScenario call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedUsingAnyScenario(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57AB4A3080F85143);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedUsingAnyScenario call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_setPedPanicExitScenario(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE07FF6495D52E2A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPanicExitScenario call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x9A77DFD295E29B09(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A77DFD295E29B09);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9A77DFD295E29B09 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x25361A96E0F7E419(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25361A96E0F7E419);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x25361A96E0F7E419 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_setPedShouldPlayDirectedScenarioExit(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC6935EBE0847B90);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedShouldPlayDirectedScenarioExit call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedShouldPlayNormalScenarioExit(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3A9299C4F2ADB98);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedShouldPlayNormalScenarioExit call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedShouldPlayImmediateScenarioExit(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1C03A5352243A30);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedShouldPlayImmediateScenarioExit call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_setPedShouldPlayFleeScenarioExit(int32_t _ped, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEED8FAFEC331A70);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedShouldPlayFleeScenarioExit call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x425AECF167663F48(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x425AECF167663F48);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x425AECF167663F48 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5B6010B3CBC29095(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B6010B3CBC29095);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5B6010B3CBC29095 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCEDA60A74219D064(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEDA60A74219D064);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCEDA60A74219D064 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xC30BDAEE47256C13(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC30BDAEE47256C13);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC30BDAEE47256C13 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_playFacialAnim(int32_t _ped, const char* _animName, const char* _animDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1E65CA8AC9C00ED);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_animName);
	ctx->Push(_animDict);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playFacialAnim call failed" << Log::Endl;
	}
}

EXPORT void Native_setFacialClipsetOverride(int32_t _ped, const char* _animDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5687C7F05B39E401);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_animDict);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFacialClipsetOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_setFacialIdleAnimOverride(int32_t _ped, const char* _animName, const char* _animDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFFC24B988B938B38);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_animName);
	ctx->Push(_animDict);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFacialIdleAnimOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_clearFacialIdleAnimOverride(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x726256CC1EEB182F);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearFacialIdleAnimOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanPlayGestureAnims(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAF20C5432058024);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanPlayGestureAnims call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanPlayVisemeAnims(int32_t _ped, bool _toggle, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF833DDBA3B104D43);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanPlayVisemeAnims call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanPlayInjuredAnims(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33A60D8BDD6E508C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanPlayInjuredAnims call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanPlayAmbientAnims(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6373D1349925A70E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanPlayAmbientAnims call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanPlayAmbientBaseAnims(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0EB0585D15254740);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanPlayAmbientBaseAnims call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC2EE020F5FB4DB53(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2EE020F5FB4DB53);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC2EE020F5FB4DB53 call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanArmIk(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C3B4D6D13B4C841);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanArmIk call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanHeadIk(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC11C18092C5530DC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanHeadIk call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanLegIk(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73518ECE2485412B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanLegIk call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanTorsoIk(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2B7106D37947CE0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanTorsoIk call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanTorsoReactIk(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5846EDB26A98A24);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanTorsoReactIk call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6647C5F6F5792496(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6647C5F6F5792496);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6647C5F6F5792496 call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanUseAutoConversationLookat(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC4686EC06434678);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanUseAutoConversationLookat call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedHeadtrackingPed(int32_t _ped1, int32_t _ped2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CD3CB88A7F8850D);
	ctx->Reset();
	ctx->Push(_ped1);
	ctx->Push(_ped2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedHeadtrackingPed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedHeadtrackingEntity(int32_t _ped, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x813A0A7C9D2E831F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedHeadtrackingEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedPrimaryLookat(int32_t _ped, int32_t _lookAt) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD17B554996A8D9E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_lookAt);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPrimaryLookat call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedClothPackageIndex(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78C4E9961DB3EB5B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedClothPackageIndex call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedClothProne(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82A3D6D9CC2CB8E3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedClothProne call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA660FAF550EB37E5(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA660FAF550EB37E5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA660FAF550EB37E5 call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedConfigFlag(int32_t _ped, int32_t _flagId, bool _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1913FE4CBF41C463);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_flagId);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedConfigFlag call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedResetFlag(int32_t _ped, int32_t _flagId, bool _doReset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1E8A365BF3B29F2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_flagId);
	ctx->Push(_doReset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedResetFlag call failed" << Log::Endl;
	}
}

EXPORT bool Native_getPedConfigFlag(int32_t _ped, int32_t _flagId, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EE53118C892B513);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_flagId);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedConfigFlag call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getPedResetFlag(int32_t _ped, int32_t _flagId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF9E59B1B1FBF2A0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_flagId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedResetFlag call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedGroupMemberPassengerIndex(int32_t _ped, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BDDB8D9EC6BCF3C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedGroupMemberPassengerIndex call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanEvasiveDive(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B7A646C242A7059);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanEvasiveDive call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedEvasiveDiving(int32_t _ped, int32_t& _evadingEntity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x414641C26E105898);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_evadingEntity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedEvasiveDiving call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedShootsAtCoord(int32_t _ped, float _x, float _y, float _z, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x96A05E4FB321B1BA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedShootsAtCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedModelIsSuppressed(int32_t _modelHash, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE163A4BCE4DE6F11);
	ctx->Reset();
	ctx->Push(_modelHash);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedModelIsSuppressed call failed" << Log::Endl;
	}
}

EXPORT void Native_stopAnyPedModelBeingSuppressed() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB47BD05FA66B40CF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopAnyPedModelBeingSuppressed call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanBeTargetedWhenInjured(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x638C03B0F9878F57);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanBeTargetedWhenInjured call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedGeneratesDeadBodyEvents(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FB17BA2E7DECA5B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedGeneratesDeadBodyEvents call failed" << Log::Endl;
	}
}

EXPORT void Native_blockPedDeadBodyShockingEvents(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE43A13C9E4CCCBCF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native blockPedDeadBodyShockingEvents call failed" << Log::Endl;
	}
}

EXPORT void Native__0x3E9679C1DFCF422C(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E9679C1DFCF422C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3E9679C1DFCF422C call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanRagdollFromPlayerImpact(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF993EE5E90ABA25);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanRagdollFromPlayerImpact call failed" << Log::Endl;
	}
}

EXPORT void Native_givePedHelmet(int32_t _ped, bool _cannotRemove, int32_t _helmetFlag, int32_t _textureIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54C7C4A94367717E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_cannotRemove);
	ctx->Push(_helmetFlag);
	ctx->Push(_textureIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native givePedHelmet call failed" << Log::Endl;
	}
}

EXPORT void Native_removePedHelmet(int32_t _ped, bool _instantly) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7B2458D0AD6DED8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_instantly);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removePedHelmet call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedTakingOffHelmet(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14590DDBEDB1EC85);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedTakingOffHelmet call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedHelmet(int32_t _ped, bool _canWearHelmet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x560A43136EB58105);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_canWearHelmet);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedHelmet call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedHelmetFlag(int32_t _ped, int32_t _helmetFlag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0E78D5C2CE3EB25);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_helmetFlag);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedHelmetFlag call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedHelmetPropIndex(int32_t _ped, int32_t _propIndex, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26D83693ED99291C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_propIndex);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedHelmetPropIndex call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedHelmetUnk(int32_t _ped, bool _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F7325574E41B44D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedHelmetUnk call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedHelmetUnk(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9496CE47546DB2C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedHelmetUnk call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedHelmetTextureIndex(int32_t _ped, int32_t _textureIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1550C4BD22582E2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_textureIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedHelmetTextureIndex call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedWearingHelmet(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF33BDFE19B309B19);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedWearingHelmet call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_clearPedStoredHatProp(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x687C0B594907D2E8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedStoredHatProp call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedHelmetStoredHatPropIndex(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x451294E859ECC018);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedHelmetStoredHatPropIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPedHelmetStoredHatTexIndex(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D728C1E12BF5518);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedHelmetStoredHatTexIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0xF2385935BFFD4D92(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2385935BFFD4D92);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF2385935BFFD4D92 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedToLoadCover(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x332B562EEDA62399);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedToLoadCover call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanCowerInCover(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB7553CDCEF4A735);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanCowerInCover call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanPeekInCover(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC514825C507E3736);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanPeekInCover call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedPlaysHeadOnHornAnimWhenDiesInVehicle(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94D94BF1A75AED3D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPlaysHeadOnHornAnimWhenDiesInVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedLegIkMode(int32_t _ped, int32_t _mode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC396F5B86FF9FEBD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_mode);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedLegIkMode call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedMotionBlur(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A986918B102B448);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedMotionBlur call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanSwitchWeapon(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED7F7EFE9FABF340);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanSwitchWeapon call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedDiesInstantlyInWater(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEB64139BA29A7CF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDiesInstantlyInWater call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1A330D297AAC6BC1(int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A330D297AAC6BC1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1A330D297AAC6BC1 call failed" << Log::Endl;
	}
}

EXPORT void Native_stopPedWeaponFiringWhenDropped(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC158D28142A34608);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopPedWeaponFiringWhenDropped call failed" << Log::Endl;
	}
}

EXPORT void Native_setScriptedAnimSeatOffset(int32_t _ped, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5917BBA32D06C230);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScriptedAnimSeatOffset call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCombatMovement(int32_t _ped, int32_t _combatMovement) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D9CA1009AFBD057);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_combatMovement);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCombatMovement call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedCombatMovement(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEA92412FCAEB3F5);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedCombatMovement call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedCombatAbility(int32_t _ped, int32_t _abilityLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7622C0D36B2FDA8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_abilityLevel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCombatAbility call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCombatRange(int32_t _ped, int32_t _combatRange) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C606747B23E497B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_combatRange);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCombatRange call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedCombatRange(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9D9F7F2DB8E2FA0);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedCombatRange call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedCombatAttributes(int32_t _ped, int32_t _attributeId, bool _enabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F7794730795E019);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_attributeId);
	ctx->Push(_enabled);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCombatAttributes call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedTargetLossResponse(int32_t _ped, int32_t _responseType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0703B9079823DA4A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_responseType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedTargetLossResponse call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedPerformingMeleeAction(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCCA191DF9980FD7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedPerformingMeleeAction call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedPerformingStealthKill(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD4CCDBCC59941B7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedPerformingStealthKill call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedPerformingDependentComboLimit(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBD0EDBA5BE957CF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedPerformingDependentComboLimit call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedBeingStealthKilled(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x863B23EFDE9C5DF2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedBeingStealthKilled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getMeleeTargetForPed(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x18A3E9EE1297FD39);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMeleeTargetForPed call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_wasPedKilledByStealth(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9800AA1A771B000);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native wasPedKilledByStealth call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_wasPedKilledByTakedown(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F08E26039C7347C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native wasPedKilledByTakedown call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_wasPedKnockedOut(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61767F73EACEED21);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native wasPedKnockedOut call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedFleeAttributes(int32_t _ped, int32_t _attributeFlags, bool _enable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70A2D1137C8ED7C9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_attributeFlags);
	ctx->Push(_enable);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedFleeAttributes call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCowerHash(int32_t _ped, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA549131166868ED3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCowerHash call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2016C603D6B8987C(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2016C603D6B8987C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2016C603D6B8987C call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedSteersAroundPeds(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46F2193B3AD1D891);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedSteersAroundPeds call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedSteersAroundObjects(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1509C089ADC208BF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedSteersAroundObjects call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedSteersAroundVehicles(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB6FB9D48DDE23EC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedSteersAroundVehicles call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA9B61A329BFDCBEA(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9B61A329BFDCBEA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA9B61A329BFDCBEA call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedIncreasedAvoidanceRadius(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x570389D1C3DE3C6B);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedIncreasedAvoidanceRadius call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedBlocksPathingWhenDead(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x576594E8D64375E2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedBlocksPathingWhenDead call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA52D5247A4227E14(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA52D5247A4227E14);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA52D5247A4227E14 call failed" << Log::Endl;
	}
}

EXPORT bool Native_isAnyPedNearPoint(float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x083961498679DC9F);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAnyPedNearPoint call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_forcePedAiAndAnimationUpdate(int32_t _ped, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2208438012482A1A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forcePedAiAndAnimationUpdate call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedHeadingTowardsPosition(int32_t _ped, float _x, float _y, float _z, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCF37A457CB96DC0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedHeadingTowardsPosition call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_requestPedVisibilityTracking(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D7A2E43E74E2EB8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestPedVisibilityTracking call failed" << Log::Endl;
	}
}

EXPORT void Native_requestPedVehicleVisibilityTracking(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2BC338A7B21F4608);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestPedVehicleVisibilityTracking call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCD018C591F94CB43(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD018C591F94CB43);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCD018C591F94CB43 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x75BA1CB3B7D40CAF(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75BA1CB3B7D40CAF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x75BA1CB3B7D40CAF call failed" << Log::Endl;
	}
}

EXPORT bool Native_isTrackedPedVisible(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x91C8E617F64188AC);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isTrackedPedVisible call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x511F1A683387C7E2(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x511F1A683387C7E2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x511F1A683387C7E2 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isPedTracked(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C5E1F087CD10BB7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedTracked call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasPedReceivedEvent(int32_t _ped, int32_t _eventId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8507BCB710FA6DC0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_eventId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasPedReceivedEvent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_canPedSeeHatedPed(int32_t _ped1, int32_t _ped2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CD5A433374D4CFB);
	ctx->Reset();
	ctx->Push(_ped1);
	ctx->Push(_ped2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canPedSeeHatedPed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x9C6A6C19B6C0C496(int32_t _ped, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C6A6C19B6C0C496);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9C6A6C19B6C0C496 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x2DFC81C9B9608549(int32_t _ped, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DFC81C9B9608549);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2DFC81C9B9608549 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getPedBoneIndex(int32_t _ped, int32_t _boneId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F428D08BE5AAE31);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_boneId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedBoneIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPedRagdollBoneIndex(int32_t _ped, int32_t _bone) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2057EF813397A772);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_bone);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedRagdollBoneIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedEnveffScale(int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF29516833893561);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedEnveffScale call failed" << Log::Endl;
	}
}

EXPORT float Native_getPedEnveffScale(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C14D30395A51A3C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedEnveffScale call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setEnablePedEnveffScale(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2C5AA0C0E8D0F1E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEnablePedEnveffScale call failed" << Log::Endl;
	}
}

EXPORT void Native__0x110F526AB784111F(int32_t _ped, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x110F526AB784111F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x110F526AB784111F call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedEnveffColorModulator(int32_t _ped, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD69411AA0CEBF9E9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedEnveffColorModulator call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedEmissiveIntensity(int32_t _ped, float _intensity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E90D746056E273D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_intensity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedEmissiveIntensity call failed" << Log::Endl;
	}
}

EXPORT float Native_getPedEmissiveIntensity(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1461B28A06717D68);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedEmissiveIntensity call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT bool Native_isPedShaderEffectValid(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81AA517FBBA05D39);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedShaderEffectValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xE906EC930F5FE7C8(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE906EC930F5FE7C8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE906EC930F5FE7C8 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1216E0BFA72CC703(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1216E0BFA72CC703);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1216E0BFA72CC703 call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedAoBlobRendering(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B5AA717A181FB4C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAoBlobRendering call failed" << Log::Endl;
	}
}

EXPORT bool Native__0xB8B52E498014F5B0(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8B52E498014F5B0);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB8B52E498014F5B0 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_createSynchronizedScene(float _x, float _y, float _z, float _roll, float _pitch, float _yaw, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C18E0F9080ADD73);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_roll);
	ctx->Push(_pitch);
	ctx->Push(_yaw);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createSynchronizedScene call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_createSynchronizedScene2(float _x, float _y, float _z, float _radius, int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62EC273D00187DCA);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createSynchronizedScene2 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isSynchronizedSceneRunning(int32_t _sceneId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25D39B935A038A26);
	ctx->Reset();
	ctx->Push(_sceneId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSynchronizedSceneRunning call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setSynchronizedSceneOrigin(int32_t _sceneID, float _x, float _y, float _z, float _roll, float _pitch, float _yaw, bool _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6ACF6B7225801CD7);
	ctx->Reset();
	ctx->Push(_sceneID);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_roll);
	ctx->Push(_pitch);
	ctx->Push(_yaw);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSynchronizedSceneOrigin call failed" << Log::Endl;
	}
}

EXPORT void Native_setSynchronizedScenePhase(int32_t _sceneID, float _phase) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x734292F4F0ABF6D0);
	ctx->Reset();
	ctx->Push(_sceneID);
	ctx->Push(_phase);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSynchronizedScenePhase call failed" << Log::Endl;
	}
}

EXPORT float Native_getSynchronizedScenePhase(int32_t _sceneID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4A310B1D7FA73CC);
	ctx->Reset();
	ctx->Push(_sceneID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getSynchronizedScenePhase call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setSynchronizedSceneRate(int32_t _sceneID, float _rate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6C49F8A5E295A5D);
	ctx->Reset();
	ctx->Push(_sceneID);
	ctx->Push(_rate);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSynchronizedSceneRate call failed" << Log::Endl;
	}
}

EXPORT float Native_getSynchronizedSceneRate(int32_t _sceneID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD80932D577274D40);
	ctx->Reset();
	ctx->Push(_sceneID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getSynchronizedSceneRate call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setSynchronizedSceneLooped(int32_t _sceneID, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9A897A4C6C2974F);
	ctx->Reset();
	ctx->Push(_sceneID);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSynchronizedSceneLooped call failed" << Log::Endl;
	}
}

EXPORT bool Native_isSynchronizedSceneLooped(int32_t _sceneID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62522002E0C391BA);
	ctx->Reset();
	ctx->Push(_sceneID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSynchronizedSceneLooped call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setSynchronizedSceneHoldLastFrame(int32_t _sceneID, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x394B9CD12435C981);
	ctx->Reset();
	ctx->Push(_sceneID);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSynchronizedSceneHoldLastFrame call failed" << Log::Endl;
	}
}

EXPORT bool Native_isSynchronizedSceneHoldLastFrame(int32_t _sceneID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F2F4F13AC5257EF);
	ctx->Reset();
	ctx->Push(_sceneID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSynchronizedSceneHoldLastFrame call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_attachSynchronizedSceneToEntity(int32_t _sceneID, int32_t _entity, int32_t _boneIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x272E4723B56A3B96);
	ctx->Reset();
	ctx->Push(_sceneID);
	ctx->Push(_entity);
	ctx->Push(_boneIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachSynchronizedSceneToEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_detachSynchronizedScene(int32_t _sceneID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D38F1F04CBB37EA);
	ctx->Reset();
	ctx->Push(_sceneID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native detachSynchronizedScene call failed" << Log::Endl;
	}
}

EXPORT void Native_disposeSynchronizedScene(int32_t _scene) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD9CC7E200A52A6F);
	ctx->Reset();
	ctx->Push(_scene);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disposeSynchronizedScene call failed" << Log::Endl;
	}
}

EXPORT bool Native_forcePedMotionState(int32_t _ped, int32_t _motionStateHash, bool _p2, int32_t _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF28965D04F570DCA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_motionStateHash);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forcePedMotionState call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getPedCurrentMovementSpeed(int32_t _ped, float& _speedX, float& _speedY) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF60165E1D2C5370B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_speedX);
	ctx->Push(_speedY);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedCurrentMovementSpeed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedMaxMoveBlendRatio(int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x433083750C5E064A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedMaxMoveBlendRatio call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedMinMoveBlendRatio(int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01A898D26E2333DD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedMinMoveBlendRatio call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedMoveRateOverride(int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x085BF80FA50A39D1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedMoveRateOverride call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0B3E35AC043707D9(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B3E35AC043707D9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0B3E35AC043707D9 call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x46B05BCAE43856B0(int32_t _ped, int32_t _flag) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46B05BCAE43856B0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_flag);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x46B05BCAE43856B0 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getPedNearbyVehicles(int32_t _ped, int32_t& _sizeAndVehs) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFF869CBFA210D82);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_sizeAndVehs);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedNearbyVehicles call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPedNearbyPeds(int32_t _ped, int32_t& _sizeAndPeds, int32_t _ignore) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23F8F5FC7E8C4A6B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_sizeAndPeds);
	ctx->Push(_ignore);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedNearbyPeds call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_haveAllStreamingRequestsCompleted(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7350823473013C02);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native haveAllStreamingRequestsCompleted call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedUsingActionMode(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x00E73468D085F745);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedUsingActionMode call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedUsingActionMode(int32_t _ped, bool _p1, int32_t _p2, const char* _action) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD75ACCF5E0FB5367);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_action);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedUsingActionMode call failed" << Log::Endl;
	}
}

EXPORT void Native_setMovementModeOverride(int32_t _ped, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x781DE8FA214E87D2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMovementModeOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCapsule(int32_t _ped, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x364DF566EC833DE2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCapsule call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_registerPedheadshot(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4462658788425076);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerPedheadshot call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_registerPedheadshot3(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA8805A1108A2515);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerPedheadshot3 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_registerPedheadshotTransparent(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x953563CE563143AF);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native registerPedheadshotTransparent call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_unregisterPedheadshot(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x96B1361D9B24C2FF);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native unregisterPedheadshot call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedheadshotValid(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0A9668F158129A2);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedheadshotValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedheadshotReady(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7085228842B13A67);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedheadshotReady call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT const char* Native_getPedheadshotTxdString(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB4EACD4AD0A5D6B);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedheadshotTxdString call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT bool Native_requestPedheadshotImgUpload(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0DAEF2F545BEE25);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestPedheadshotImgUpload call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_releasePedheadshotImgUpload(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D517B27CF6ECD04);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native releasePedheadshotImgUpload call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedheadshotImgUploadAvailable() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEBB376779A760AA8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedheadshotImgUploadAvailable call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasPedheadshotImgUploadFailed() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x876928DDDFCCC9CD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasPedheadshotImgUploadFailed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasPedheadshotImgUploadSucceeded() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8A169E666CBC541);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasPedheadshotImgUploadSucceeded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedHeatscaleOverride(int32_t _ped, float _heatScale) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1F6EBF9A3D55538);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_heatScale);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedHeatscaleOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_disablePedHeatscaleOverride(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x600048C60D5C2C51);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disablePedHeatscaleOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_spawnpointsStartSearch(float _p0, float _p1, float _p2, float _p3, float _p4, int32_t _interiorFlags, float _scale, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DF9038C90AD5264);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_interiorFlags);
	ctx->Push(_scale);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native spawnpointsStartSearch call failed" << Log::Endl;
	}
}

EXPORT void Native_spawnpointsStartSearchInAngledArea(float _x, float _y, float _z, float _p3, float _p4, float _p5, float _p6, int32_t _interiorFlags, float _scale, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2AFF10216DEFA2F);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_interiorFlags);
	ctx->Push(_scale);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native spawnpointsStartSearchInAngledArea call failed" << Log::Endl;
	}
}

EXPORT void Native_spawnpointsCancelSearch() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEE4A5459472A9F8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native spawnpointsCancelSearch call failed" << Log::Endl;
	}
}

EXPORT bool Native_spawnpointsIsSearchActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C67506996001F5E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native spawnpointsIsSearchActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_spawnpointsIsSearchComplete() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA586FBEB32A53DBB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native spawnpointsIsSearchComplete call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_spawnpointsIsSearchFailed() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF445DE8DA80A1792);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native spawnpointsIsSearchFailed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_spawnpointsGetNumSearchResults() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA635C11B8C44AFC2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native spawnpointsGetNumSearchResults call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_spawnpointsGetSearchResult(int32_t _randomInt, float& _x, float& _y, float& _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x280C7E3AC7F56E90);
	ctx->Reset();
	ctx->Push(_randomInt);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native spawnpointsGetSearchResult call failed" << Log::Endl;
	}
}

EXPORT void Native_spawnpointsGetSearchResultFlags(int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB782F8238512BAD5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native spawnpointsGetSearchResultFlags call failed" << Log::Endl;
	}
}

EXPORT void Native_setIkTarget(int32_t _ped, int32_t _ikIndex, int32_t _entityLookAt, int32_t _boneLookAt, float _offsetX, float _offsetY, float _offsetZ, int32_t _p7, int32_t _blendInDuration, int32_t _blendOutDuration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC32779C16FCEECD9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ikIndex);
	ctx->Push(_entityLookAt);
	ctx->Push(_boneLookAt);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_p7);
	ctx->Push(_blendInDuration);
	ctx->Push(_blendOutDuration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setIkTarget call failed" << Log::Endl;
	}
}

EXPORT void Native__0xED3C76ADFA6D07C4(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED3C76ADFA6D07C4);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xED3C76ADFA6D07C4 call failed" << Log::Endl;
	}
}

EXPORT void Native_requestActionModeAsset(const char* _asset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x290E2780BB7AA598);
	ctx->Reset();
	ctx->Push(_asset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestActionModeAsset call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasActionModeAssetLoaded(const char* _asset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4B5F4BF2CB24E65);
	ctx->Reset();
	ctx->Push(_asset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasActionModeAssetLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeActionModeAsset(const char* _asset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13E940F88470FA51);
	ctx->Reset();
	ctx->Push(_asset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeActionModeAsset call failed" << Log::Endl;
	}
}

EXPORT void Native_requestStealthModeAsset(const char* _asset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A0A62FCDEE16D4F);
	ctx->Reset();
	ctx->Push(_asset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestStealthModeAsset call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasStealthModeAssetLoaded(const char* _asset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE977FC5B08AF3441);
	ctx->Reset();
	ctx->Push(_asset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasStealthModeAssetLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeStealthModeAsset(const char* _asset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9219857D21F0E842);
	ctx->Reset();
	ctx->Push(_asset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeStealthModeAsset call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedLodMultiplier(int32_t _ped, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC2C5C242AAC342B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedLodMultiplier call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCanLosePropsOnDamage(int32_t _ped, bool _toggle, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE861D0B05C7662B8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanLosePropsOnDamage call failed" << Log::Endl;
	}
}

EXPORT void Native_setForceFootstepUpdate(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x129466ED55140F8D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setForceFootstepUpdate call failed" << Log::Endl;
	}
}

EXPORT void Native_setForceStepType(int32_t _ped, bool _p1, int32_t _type, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB968B53FC7F916D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_type);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setForceStepType call failed" << Log::Endl;
	}
}

EXPORT bool Native_isAnyHostilePedNearPoint(int32_t _ped, float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68772DB2B2526F9F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAnyHostilePedNearPoint call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedCanPlayInCarIdles(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x820E9892A77E97CD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanPlayInCarIdles call failed" << Log::Endl;
	}
}

EXPORT bool Native_isTargetPedInPerceptionArea(int32_t _ped, int32_t _targetPed, float _p2, float _p3, float _p4, float _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06087579E7AA85A9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_targetPed);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isTargetPedInPerceptionArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPopControlSphereThisFrame(float _x, float _y, float _z, float _min, float _max) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8C3BE3EE94CAF2D);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_min);
	ctx->Push(_max);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPopControlSphereThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD33DAA36272177C4(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD33DAA36272177C4);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD33DAA36272177C4 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x711794453CFD692B(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x711794453CFD692B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x711794453CFD692B call failed" << Log::Endl;
	}
}

EXPORT void Native__0x83A169EABCDB10A2(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83A169EABCDB10A2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x83A169EABCDB10A2 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x288DF530C92DAD6F(int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x288DF530C92DAD6F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x288DF530C92DAD6F call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedSwappingWeapon(int32_t _Ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3795688A307E1EB6);
	ctx->Reset();
	ctx->Push(_Ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedSwappingWeapon call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x0F62619393661D6E(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F62619393661D6E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0F62619393661D6E call failed" << Log::Endl;
	}
}

EXPORT void Native__0xDFE68C4B787E1BFB(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFE68C4B787E1BFB);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDFE68C4B787E1BFB call failed" << Log::Endl;
	}
}

EXPORT void Native_setEnableScubaGearLight(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE2476B9EE4A094F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEnableScubaGearLight call failed" << Log::Endl;
	}
}

EXPORT bool Native_isScubaGearLightEnabled(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88274C11CF0D866D);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScubaGearLightEnabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_clearFacialClipsetOverride(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x637822DC2AFEEBF8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearFacialClipsetOverride call failed" << Log::Endl;
	}
}

EXPORT void Native__0xFAB944D4D481ACCB(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAB944D4D481ACCB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFAB944D4D481ACCB call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_addRope(float _x, float _y, float _z, float _rotX, float _rotY, float _rotZ, float _length, int32_t _ropeType, float _maxLength, float _minLength, float _windingSpeed, bool _p11, bool _p12, bool _rigid, float _p14, bool _breakWhenShot, int32_t& _unkPtr) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE832D760399EB220);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_length);
	ctx->Push(_ropeType);
	ctx->Push(_maxLength);
	ctx->Push(_minLength);
	ctx->Push(_windingSpeed);
	ctx->Push(_p11);
	ctx->Push(_p12);
	ctx->Push(_rigid);
	ctx->Push(_p14);
	ctx->Push(_breakWhenShot);
	ctx->Push(_unkPtr);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addRope call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_deleteRope(int32_t& _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52B4829281364649);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native deleteRope call failed" << Log::Endl;
	}
}

EXPORT void Native_deleteChildRope(int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA5D6B1888E4DB20);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native deleteChildRope call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesRopeExist(int32_t& _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD5448BE3111ED96);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesRopeExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xA1AE736541B0FCA3(int32_t& _ropeId, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1AE736541B0FCA3);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA1AE736541B0FCA3 call failed" << Log::Endl;
	}
}

EXPORT void Native_ropeDrawShadowEnabled(int32_t& _ropeId, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF159A63806BB5BA8);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ropeDrawShadowEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native_loadRopeData(int32_t _ropeId, const char* _rope_preset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCBB203C04D1ABD27);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_rope_preset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native loadRopeData call failed" << Log::Endl;
	}
}

EXPORT void Native_pinRopeVertex(int32_t _ropeId, int32_t _vertex, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B320CF14146B69A);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_vertex);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pinRopeVertex call failed" << Log::Endl;
	}
}

EXPORT void Native_unpinRopeVertex(int32_t _ropeId, int32_t _vertex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B5AE2EEE4A8F180);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_vertex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native unpinRopeVertex call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getRopeVertexCount(int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3655F544CD30F0B5);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRopeVertexCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_attachEntitiesToRope(int32_t _ropeId, int32_t _ent1, int32_t _ent2, float _ent1_x, float _ent1_y, float _ent1_z, float _ent2_x, float _ent2_y, float _ent2_z, float _length, bool _p10, bool _p11, int32_t& _p12, int32_t& _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D95EC8B6D940AC3);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_ent1);
	ctx->Push(_ent2);
	ctx->Push(_ent1_x);
	ctx->Push(_ent1_y);
	ctx->Push(_ent1_z);
	ctx->Push(_ent2_x);
	ctx->Push(_ent2_y);
	ctx->Push(_ent2_z);
	ctx->Push(_length);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	ctx->Push(_p13);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachEntitiesToRope call failed" << Log::Endl;
	}
}

EXPORT void Native_attachRopeToEntity(int32_t _ropeId, int32_t _entity, float _x, float _y, float _z, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B490A6832559A65);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_entity);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachRopeToEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_detachRopeFromEntity(int32_t _ropeId, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCF3026912A8647D);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native detachRopeFromEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_ropeSetUpdatePinverts(int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8D667EE52114ABA);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ropeSetUpdatePinverts call failed" << Log::Endl;
	}
}

EXPORT void Native_ropeSetUpdateOrder(int32_t _ropeId, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC57A637A20006ED);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ropeSetUpdateOrder call failed" << Log::Endl;
	}
}

EXPORT void Native__0x36CCB9BE67B970FD(int32_t _ropeId, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36CCB9BE67B970FD);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x36CCB9BE67B970FD call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x84DE3B5FB3E666F0(int32_t& _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84DE3B5FB3E666F0);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x84DE3B5FB3E666F0 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT vector3_t Native_getRopeLastVertexCoord(int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21BB0FBD3E217C2D);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRopeLastVertexCoord call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native_getRopeVertexCoord(int32_t _ropeId, int32_t _vertex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA61CA8E80F09E4D);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_vertex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRopeVertexCoord call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT void Native_startRopeWinding(int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1461C72C889E343E);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startRopeWinding call failed" << Log::Endl;
	}
}

EXPORT void Native_stopRopeWinding(int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB2D4AB84A19AA7C);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopRopeWinding call failed" << Log::Endl;
	}
}

EXPORT void Native_startRopeUnwindingFront(int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x538D1179EC1AA9A9);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startRopeUnwindingFront call failed" << Log::Endl;
	}
}

EXPORT void Native_stopRopeUnwindingFront(int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFFF3A50779EFBBB3);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopRopeUnwindingFront call failed" << Log::Endl;
	}
}

EXPORT void Native_ropeConvertToSimple(int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5389D48EFA2F079A);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ropeConvertToSimple call failed" << Log::Endl;
	}
}

EXPORT void Native_ropeLoadTextures() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B9039DBF2D258C1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ropeLoadTextures call failed" << Log::Endl;
	}
}

EXPORT bool Native_ropeAreTexturesLoaded() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2D0E6A75CC05597);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ropeAreTexturesLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_ropeUnloadTextures() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6CE36C35C1AC8163);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ropeUnloadTextures call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesRopeBelongToThisScript(int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x271C9D3ACA5D6409);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesRopeBelongToThisScript call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xBC0CE682D4D05650(int32_t _ropeId, int32_t _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, float _p8, float _p9, float _p10, float _p11, float _p12, float _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC0CE682D4D05650);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	ctx->Push(_p13);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBC0CE682D4D05650 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB1B6216CA2E7B55E(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1B6216CA2E7B55E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB1B6216CA2E7B55E call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB743F735C03D7810(int32_t _ropeId, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB743F735C03D7810);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB743F735C03D7810 call failed" << Log::Endl;
	}
}

EXPORT float Native_ropeGetDistanceBetweenEnds(int32_t _ropeId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73040398DFF9A4A6);
	ctx->Reset();
	ctx->Push(_ropeId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ropeGetDistanceBetweenEnds call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_ropeForceLength(int32_t _ropeId, float _length) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD009F759A723DB1B);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_length);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ropeForceLength call failed" << Log::Endl;
	}
}

EXPORT void Native_ropeResetLength(int32_t _ropeId, float _length) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC16DE94D9BEA14A0);
	ctx->Reset();
	ctx->Push(_ropeId);
	ctx->Push(_length);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ropeResetLength call failed" << Log::Endl;
	}
}

EXPORT void Native_applyImpulseToCloth(float _posX, float _posY, float _posZ, float _vecX, float _vecY, float _vecZ, float _impulse) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE37F721824571784);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_vecX);
	ctx->Push(_vecY);
	ctx->Push(_vecZ);
	ctx->Push(_impulse);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native applyImpulseToCloth call failed" << Log::Endl;
	}
}

EXPORT void Native_setDamping(int32_t _entity, int32_t _vertex, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEA3B200A6FEB65B);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_vertex);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDamping call failed" << Log::Endl;
	}
}

EXPORT void Native_activatePhysics(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x710311ADF0E20730);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native activatePhysics call failed" << Log::Endl;
	}
}

EXPORT void Native_setCgoffset(int32_t _entity, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8FA3908D7B86904);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCgoffset call failed" << Log::Endl;
	}
}

EXPORT vector3_t Native_getCgoffset(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8214A4B5A7A33612);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCgoffset call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT void Native_setCgAtBoundcenter(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE520D9761FF811F);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCgAtBoundcenter call failed" << Log::Endl;
	}
}

EXPORT void Native_breakEntityGlass(int32_t _entity, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, float _p8, int32_t _p9, bool _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E648D16F6E308F3);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native breakEntityGlass call failed" << Log::Endl;
	}
}

EXPORT bool Native_getHasObjectFragInst(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C112765300C7E1E);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHasObjectFragInst call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setDisableBreaking(int32_t _object, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CEC1A84620E7D5B);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDisableBreaking call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCC6E963682533882(int32_t _object) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC6E963682533882);
	ctx->Reset();
	ctx->Push(_object);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCC6E963682533882 call failed" << Log::Endl;
	}
}

EXPORT void Native_setDisableFragDamage(int32_t _object, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01BA3AED21C16CFB);
	ctx->Reset();
	ctx->Push(_object);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDisableFragDamage call failed" << Log::Endl;
	}
}

EXPORT void Native_setEntityProofUnk(int32_t _entity, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15F944730C832252);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEntityProofUnk call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9EBD751E5787BAF2(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9EBD751E5787BAF2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9EBD751E5787BAF2 call failed" << Log::Endl;
	}
}

EXPORT void Native_setLaunchControlEnabled(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA6A6098851C396F);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setLaunchControlEnabled call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPlayerPed(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43A66C31C68491C0);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerPed call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPlayerPedScriptIndex(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50FAC3A3E030A6E1);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerPedScriptIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPlayerModel(int32_t _player, int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x00A1CADD00108836);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerModel call failed" << Log::Endl;
	}
}

EXPORT void Native_changePlayerPed(int32_t _player, int32_t _ped, bool _p2, bool _resetDamage) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x048189FAC643DEEE);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_ped);
	ctx->Push(_p2);
	ctx->Push(_resetDamage);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native changePlayerPed call failed" << Log::Endl;
	}
}

EXPORT void Native_getPlayerRgbColour(int32_t _player, int32_t& _r, int32_t& _g, int32_t& _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE902EF951DCE178F);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerRgbColour call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getNumberOfPlayers() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x407C7F91DDB46C16);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumberOfPlayers call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPlayerTeam(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37039302F4E0A008);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerTeam call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPlayerTeam(int32_t _player, int32_t _team) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0299FA38396A4940);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_team);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerTeam call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getNumberOfPlayersInTeam(int32_t _team) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1FC200409F10E6F1);
	ctx->Reset();
	ctx->Push(_team);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumberOfPlayersInTeam call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT const char* Native_getPlayerName(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D0DE6A7B5DA71F8);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerName call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT float Native_getWantedLevelRadius(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x085DEB493BE80812);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWantedLevelRadius call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT vector3_t Native_getPlayerWantedCentrePosition(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C92BA89F1AF26F8);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerWantedCentrePosition call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT void Native_setPlayerWantedCentrePosition(int32_t _player, vector3_t& _position, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x520E541A97A13354);
	ctx->Reset();
	ctx->Push(_player);
	alt::INative::Vector3 converted_position { _position.x, 0, _position.y, 0, _position.z };
	ctx->Push(&converted_position);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerWantedCentrePosition call failed" << Log::Endl;
	}
	_position.x = converted_position.x;
	_position.y = converted_position.y;
	_position.z = converted_position.z;
}

EXPORT int32_t Native_getWantedLevelThreshold(int32_t _wantedLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDD179EAF45B556C);
	ctx->Reset();
	ctx->Push(_wantedLevel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWantedLevelThreshold call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPlayerWantedLevel(int32_t _player, int32_t _wantedLevel, bool _disableNoMission) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39FF19C64EF7DA5B);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_wantedLevel);
	ctx->Push(_disableNoMission);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerWantedLevel call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerWantedLevelNoDrop(int32_t _player, int32_t _wantedLevel, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x340E61DE7F471565);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_wantedLevel);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerWantedLevelNoDrop call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerWantedLevelNow(int32_t _player, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0A7D1E497FFCD6F);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerWantedLevelNow call failed" << Log::Endl;
	}
}

EXPORT bool Native_arePlayerFlashingStarsAboutToDrop(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFAF86043E5874E9);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native arePlayerFlashingStarsAboutToDrop call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_arePlayerStarsGreyedOut(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A6EB355EE14A2DB);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native arePlayerStarsGreyedOut call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x7E07C78925D5FD96(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E07C78925D5FD96);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7E07C78925D5FD96 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setDispatchCopsForPlayer(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB172424876553F4);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDispatchCopsForPlayer call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPlayerWantedLevelGreater(int32_t _player, int32_t _wantedLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x238DB2A2C23EE9EF);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_wantedLevel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerWantedLevelGreater call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_clearPlayerWantedLevel(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB302540597885499);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPlayerWantedLevel call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPlayerDead(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x424D4687FA1E5652);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerDead call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlayerPressingHorn(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA1E2BF8B10598F9);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerPressingHorn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPlayerControl(int32_t _player, bool _bHasControl, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D32347D6D4C40A2);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_bHasControl);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerControl call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPlayerWantedLevel(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE28E54788CE8F12D);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerWantedLevel call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setMaxWantedLevel(int32_t _maxWantedLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA5F02DB48D704B9);
	ctx->Reset();
	ctx->Push(_maxWantedLevel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMaxWantedLevel call failed" << Log::Endl;
	}
}

EXPORT void Native_setPoliceRadarBlips(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43286D561B72B8BF);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPoliceRadarBlips call failed" << Log::Endl;
	}
}

EXPORT void Native_setPoliceIgnorePlayer(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32C62AA929C2DA6A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPoliceIgnorePlayer call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPlayerPlaying(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E9564D8246B909A);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerPlaying call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setEveryoneIgnorePlayer(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EEDA153AD141BA4);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEveryoneIgnorePlayer call failed" << Log::Endl;
	}
}

EXPORT void Native_setAllRandomPedsFlee(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x056E0FE8534C2949);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAllRandomPedsFlee call failed" << Log::Endl;
	}
}

EXPORT void Native_setAllRandomPedsFleeThisFrame(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x471D2FF42A94B4F2);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAllRandomPedsFleeThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native__0xDE45D1A1EF45EE61(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE45D1A1EF45EE61);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDE45D1A1EF45EE61 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC3376F42B1FACCC6(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3376F42B1FACCC6);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC3376F42B1FACCC6 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xFAC75988A7D078D3(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAC75988A7D078D3);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFAC75988A7D078D3 call failed" << Log::Endl;
	}
}

EXPORT void Native_setIgnoreLowPriorityShockingEvents(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x596976B02B6B5700);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setIgnoreLowPriorityShockingEvents call failed" << Log::Endl;
	}
}

EXPORT void Native_setWantedLevelMultiplier(float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x020E5F00CDA207BA);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWantedLevelMultiplier call failed" << Log::Endl;
	}
}

EXPORT void Native_setWantedLevelDifficulty(int32_t _player, float _difficulty) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B0BB33B04405E7A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_difficulty);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWantedLevelDifficulty call failed" << Log::Endl;
	}
}

EXPORT void Native_resetWantedLevelDifficulty(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9D0DD990DC141DD);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetWantedLevelDifficulty call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getWantedLevelParoleDuration() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA72200F51875FEA4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWantedLevelParoleDuration call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setWantedLevelHiddenEvasionTime(int32_t _player, int32_t _wantedLevel, int32_t _lossTime) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49B856B1360C47C7);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_wantedLevel);
	ctx->Push(_lossTime);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWantedLevelHiddenEvasionTime call failed" << Log::Endl;
	}
}

EXPORT void Native__0x823EC8E82BA45986(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x823EC8E82BA45986);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x823EC8E82BA45986 call failed" << Log::Endl;
	}
}

EXPORT void Native_startFiringAmnesty(int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF9BD71691857E48);
	ctx->Reset();
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startFiringAmnesty call failed" << Log::Endl;
	}
}

EXPORT void Native_reportCrime(int32_t _player, int32_t _crimeType, int32_t _wantedLvlThresh) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE9B09589827545E7);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_crimeType);
	ctx->Push(_wantedLvlThresh);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native reportCrime call failed" << Log::Endl;
	}
}

EXPORT void Native_switchCrimeType(int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A987297ED8BD838);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native switchCrimeType call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBC9490CA15AEA8FB(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC9490CA15AEA8FB);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBC9490CA15AEA8FB call failed" << Log::Endl;
	}
}

EXPORT void Native__0x4669B3ED80F24B4E(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4669B3ED80F24B4E);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4669B3ED80F24B4E call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2F41A3BAE005E5FA(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F41A3BAE005E5FA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2F41A3BAE005E5FA call failed" << Log::Endl;
	}
}

EXPORT void Native__0xAD73CE5A09E42D12(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD73CE5A09E42D12);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAD73CE5A09E42D12 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x36F1B38855F2A8DF(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36F1B38855F2A8DF);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x36F1B38855F2A8DF call failed" << Log::Endl;
	}
}

EXPORT void Native_reportPoliceSpottedPlayer(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC64D2C53493ED12);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native reportPoliceSpottedPlayer call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB45EFF719D8427A6(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB45EFF719D8427A6);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB45EFF719D8427A6 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0032A6DBA562C518() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0032A6DBA562C518);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0032A6DBA562C518 call failed" << Log::Endl;
	}
}

EXPORT bool Native_canPlayerStartMission(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE7465A27D403C06);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canPlayerStartMission call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlayerReadyForCutscene(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x908CBECC2CAA3690);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerReadyForCutscene call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlayerTargettingEntity(int32_t _player, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7912F7FC4F6264B6);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerTargettingEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getPlayerTargetEntity(int32_t _player, int32_t& _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13EDE1A5DBF797C9);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerTargetEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlayerFreeAiming(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E397FD2ECD37C87);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerFreeAiming call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlayerFreeAimingAtEntity(int32_t _player, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C06B5C839B38F7B);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerFreeAimingAtEntity call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getEntityPlayerIsFreeAimingAt(int32_t _player, int32_t& _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2975C866E6713290);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityPlayerIsFreeAimingAt call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPlayerLockonRangeOverride(int32_t _player, float _range) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29961D490E5814FD);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_range);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerLockonRangeOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerCanDoDriveBy(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E8834B52EC20C77);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerCanDoDriveBy call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerCanBeHassledByGangs(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5E460AD7020A246);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerCanBeHassledByGangs call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerCanUseCover(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD465A8599DFF6814);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerCanUseCover call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getMaxWantedLevel() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x462E0DB9B137DC5F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMaxWantedLevel call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isPlayerTargettingAnything(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78CFE51896B6B8A4);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerTargettingAnything call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPlayerSprint(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA01B8075D8B92DF4);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerSprint call failed" << Log::Endl;
	}
}

EXPORT void Native_resetPlayerStamina(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6F312FCCE9C1DFE);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetPlayerStamina call failed" << Log::Endl;
	}
}

EXPORT void Native_restorePlayerStamina(int32_t _player, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA352C1B864CAFD33);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native restorePlayerStamina call failed" << Log::Endl;
	}
}

EXPORT float Native_getPlayerSprintStaminaRemaining(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F9F16F8E65A7ED7);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerSprintStaminaRemaining call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getPlayerSprintTimeRemaining(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1885BC9B108B4C99);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerSprintTimeRemaining call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getPlayerUnderwaterTimeRemaining(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1FCF8E6AF40B731);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerUnderwaterTimeRemaining call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native_setPlayerUnderwaterTimeRemaining(int32_t _player, float _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0D3E4F7AAFB7E78);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerUnderwaterTimeRemaining call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPlayerGroup(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D127585F77030AF);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerGroup call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPlayerMaxArmour(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92659B4CE1863CB3);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerMaxArmour call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isPlayerControlOn(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49C32D60007AFA47);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerControlOn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlayerCamControlDisabled() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C814D2FB49F40C0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerCamControlDisabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlayerScriptControlOn(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A876A65283DD7D7);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerScriptControlOn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlayerClimbing(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95E8F73DC65EFB9C);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerClimbing call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlayerBeingArrested(int32_t _player, bool _atArresting) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x388A47C51ABDAC8E);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_atArresting);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerBeingArrested call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_resetPlayerArrestState(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D03E13C460760D6);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetPlayerArrestState call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPlayersLastVehicle() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6997A7EB3F5C8C0);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayersLastVehicle call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPlayerIndex() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5EDC40EF369B48D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_intToPlayerindex(int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41BD2A6B006AF756);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native intToPlayerindex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_intToParticipantindex(int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9EC6603812C24710);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native intToParticipantindex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getTimeSincePlayerHitVehicle(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D35ECF3A81A0EE0);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTimeSincePlayerHitVehicle call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getTimeSincePlayerHitPed(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE36A25322DC35F42);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTimeSincePlayerHitPed call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getTimeSincePlayerDroveOnPavement(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD559D2BE9E37853B);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTimeSincePlayerDroveOnPavement call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getTimeSincePlayerDroveAgainstTraffic(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB89591E290D9182);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTimeSincePlayerDroveAgainstTraffic call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isPlayerFreeForAmbientTask(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCCFD3F106C36AB4);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerFreeForAmbientTask call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_playerId() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F8644AF03D0E0D6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playerId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_playerPedId() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD80958FC74E988A6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playerPedId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_networkPlayerIdToInt() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE68096F9F37341E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkPlayerIdToInt call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_hasForceCleanupOccurred(int32_t _cleanupFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC968670BFACE42D9);
	ctx->Reset();
	ctx->Push(_cleanupFlags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasForceCleanupOccurred call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_forceCleanup(int32_t _cleanupFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC8983F38F78ED51);
	ctx->Reset();
	ctx->Push(_cleanupFlags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceCleanup call failed" << Log::Endl;
	}
}

EXPORT void Native_forceCleanupForAllThreadsWithThisName(const char* _name, int32_t _cleanupFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C68DDDDF0097317);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_cleanupFlags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceCleanupForAllThreadsWithThisName call failed" << Log::Endl;
	}
}

EXPORT void Native_forceCleanupForThreadWithThisId(int32_t _id, int32_t _cleanupFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF745B37630DF176B);
	ctx->Reset();
	ctx->Push(_id);
	ctx->Push(_cleanupFlags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceCleanupForThreadWithThisId call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getCauseOfMostRecentForceCleanup() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A41CF4674A12272);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCauseOfMostRecentForceCleanup call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPlayerMayOnlyEnterThisVehicle(int32_t _player, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8026FF78F208978A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerMayOnlyEnterThisVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerMayNotEnterAnyVehicle(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DE37BBF9E9CC14A);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerMayNotEnterAnyVehicle call failed" << Log::Endl;
	}
}

EXPORT bool Native_giveAchievementToPlayer(int32_t _achievementId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBEC7076D64130195);
	ctx->Reset();
	ctx->Push(_achievementId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native giveAchievementToPlayer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_setAchievementProgress(int32_t _achievementId, int32_t _progress) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2AFFFDABBDC2C5C);
	ctx->Reset();
	ctx->Push(_achievementId);
	ctx->Push(_progress);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAchievementProgress call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getAchievementProgress(int32_t _achievementId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C186837D0619335);
	ctx->Reset();
	ctx->Push(_achievementId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getAchievementProgress call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_hasAchievementBeenPassed(int32_t _achievementId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x867365E111A3B6EB);
	ctx->Reset();
	ctx->Push(_achievementId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasAchievementBeenPassed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlayerOnline() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF25D331DC2627BBC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerOnline call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlayerLoggingInNp() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74556E1420867ECA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerLoggingInNp call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_displaySystemSigninUi(bool _unk) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94DD7888C10A979E);
	ctx->Reset();
	ctx->Push(_unk);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native displaySystemSigninUi call failed" << Log::Endl;
	}
}

EXPORT bool Native_isSystemUiBeingDisplayed() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D511E3867C87139);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSystemUiBeingDisplayed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPlayerInvincible(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x239528EACDC3E7DE);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerInvincible call failed" << Log::Endl;
	}
}

EXPORT bool Native_getPlayerInvincible(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB721981B2B939E07);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerInvincible call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xDCC07526B8EC45AF(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCC07526B8EC45AF);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDCC07526B8EC45AF call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPlayerInvincibleKeepRagdollEnabled(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6BC97F4F4BB3C04B);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerInvincibleKeepRagdollEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCAC57395B151135F(int32_t _player, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCAC57395B151135F);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCAC57395B151135F call failed" << Log::Endl;
	}
}

EXPORT void Native_removePlayerHelmet(int32_t _player, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3AC26D3CC576528);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removePlayerHelmet call failed" << Log::Endl;
	}
}

EXPORT void Native_givePlayerRagdollControl(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C49C870E66F0A28);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native givePlayerRagdollControl call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerLockon(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C8B2F450EE4328E);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerLockon call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerTargetingMode(int32_t _targetMode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1906895227793F3);
	ctx->Reset();
	ctx->Push(_targetMode);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerTargetingMode call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerTargetLevel(int32_t _targetLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5702B917B99DB1CD);
	ctx->Reset();
	ctx->Push(_targetLevel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerTargetLevel call failed" << Log::Endl;
	}
}

EXPORT bool Native__0xB9CF1F793A9F1BF1() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9CF1F793A9F1BF1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB9CF1F793A9F1BF1 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xCB645E85E97EA48B() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB645E85E97EA48B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCB645E85E97EA48B call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_clearPlayerHasDamagedAtLeastOnePed(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0B67A4DE6AB5F98);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPlayerHasDamagedAtLeastOnePed call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasPlayerDamagedAtLeastOnePed(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20CE80B0C2BF4ACC);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasPlayerDamagedAtLeastOnePed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_clearPlayerHasDamagedAtLeastOneNonAnimalPed(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AACB96203D11A31);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPlayerHasDamagedAtLeastOneNonAnimalPed call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasPlayerDamagedAtLeastOneNonAnimalPed(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4B90F367BD81752);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasPlayerDamagedAtLeastOneNonAnimalPed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setAirDragMultiplierForPlayersVehicle(int32_t _player, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA7DC8329F0A1E9E);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAirDragMultiplierForPlayersVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setSwimMultiplierForPlayer(int32_t _player, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA91C6F0FF7D16A13);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSwimMultiplierForPlayer call failed" << Log::Endl;
	}
}

EXPORT void Native_setRunSprintMultiplierForPlayer(int32_t _player, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6DB47AA77FD94E09);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRunSprintMultiplierForPlayer call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getTimeSinceLastArrest() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5063F92F07C2A316);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTimeSinceLastArrest call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getTimeSinceLastDeath() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7034807558DDFCA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTimeSinceLastDeath call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_assistedMovementCloseRoute() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAEBF081FFC0A0E5E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native assistedMovementCloseRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_assistedMovementFlushRoute() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8621390F0CDCFE1F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native assistedMovementFlushRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerForcedAim(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0FEE4F80AC44A726);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerForcedAim call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerForcedZoom(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75E7D505F2B15902);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerForcedZoom call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerForceSkipAimIntro(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7651BC64AE59E128);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerForceSkipAimIntro call failed" << Log::Endl;
	}
}

EXPORT void Native_disablePlayerFiring(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E6CC07646BBEAB8);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disablePlayerFiring call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB885852C39CC265D() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB885852C39CC265D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB885852C39CC265D call failed" << Log::Endl;
	}
}

EXPORT void Native_setDisableAmbientMeleeMove(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E8AABFA40A84F8C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDisableAmbientMeleeMove call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerMaxArmour(int32_t _player, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77DFCCF5948B8C71);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerMaxArmour call failed" << Log::Endl;
	}
}

EXPORT void Native_specialAbilityActivate(int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x821FDC827D6F4090);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native specialAbilityActivate call failed" << Log::Endl;
	}
}

EXPORT void Native_setSpecialAbility(int32_t _player, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB214D570EAD7F81A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSpecialAbility call failed" << Log::Endl;
	}
}

EXPORT void Native_specialAbilityDeplete(int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17F7471EACA78290);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native specialAbilityDeplete call failed" << Log::Endl;
	}
}

EXPORT void Native_specialAbilityDeactivate(int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD6A953C6D1492057);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native specialAbilityDeactivate call failed" << Log::Endl;
	}
}

EXPORT void Native_specialAbilityDeactivateFast(int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9CB5CE07A3968D5A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native specialAbilityDeactivateFast call failed" << Log::Endl;
	}
}

EXPORT void Native_specialAbilityReset(int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x375F0E738F861A94);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native specialAbilityReset call failed" << Log::Endl;
	}
}

EXPORT void Native_specialAbilityChargeOnMissionFailed(int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9A763D8FE87436A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native specialAbilityChargeOnMissionFailed call failed" << Log::Endl;
	}
}

EXPORT void Native_specialAbilityChargeSmall(int32_t _player, bool _p1, bool _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E7B9B683481687D);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native specialAbilityChargeSmall call failed" << Log::Endl;
	}
}

EXPORT void Native_specialAbilityChargeMedium(int32_t _player, bool _p1, bool _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF113E3AA9BC54613);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native specialAbilityChargeMedium call failed" << Log::Endl;
	}
}

EXPORT void Native_specialAbilityChargeLarge(int32_t _player, bool _p1, bool _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF733F45FA4497D93);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native specialAbilityChargeLarge call failed" << Log::Endl;
	}
}

EXPORT void Native_specialAbilityChargeContinuous(int32_t _player, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED481732DFF7E997);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native specialAbilityChargeContinuous call failed" << Log::Endl;
	}
}

EXPORT void Native_specialAbilityChargeAbsolute(int32_t _player, int32_t _p1, bool _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7B0870EB531D08D);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native specialAbilityChargeAbsolute call failed" << Log::Endl;
	}
}

EXPORT void Native_specialAbilityChargeNormalized(int32_t _player, float _normalizedValue, bool _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0696A65F009EE18);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_normalizedValue);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native specialAbilityChargeNormalized call failed" << Log::Endl;
	}
}

EXPORT void Native_specialAbilityFillMeter(int32_t _player, bool _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DACA8DDC6FD4980);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native specialAbilityFillMeter call failed" << Log::Endl;
	}
}

EXPORT void Native_specialAbilityDepleteMeter(int32_t _player, bool _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D506DBBBC51E64B);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native specialAbilityDepleteMeter call failed" << Log::Endl;
	}
}

EXPORT void Native_specialAbilityLock(int32_t _playerModel, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A09D0D590A47D13);
	ctx->Reset();
	ctx->Push(_playerModel);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native specialAbilityLock call failed" << Log::Endl;
	}
}

EXPORT void Native_specialAbilityUnlock(int32_t _playerModel, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF145F3BE2EFA9A3B);
	ctx->Reset();
	ctx->Push(_playerModel);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native specialAbilityUnlock call failed" << Log::Endl;
	}
}

EXPORT bool Native_isSpecialAbilityUnlocked(int32_t _playerModel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6017F6A6CDFA694);
	ctx->Reset();
	ctx->Push(_playerModel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSpecialAbilityUnlocked call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isSpecialAbilityActive(int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E5F7FC85D854E15);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSpecialAbilityActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isSpecialAbilityMeterFull(int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x05A1FE504B7F2587);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSpecialAbilityMeterFull call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_enableSpecialAbility(int32_t _player, bool _toggle, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x181EC197DAEFE121);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableSpecialAbility call failed" << Log::Endl;
	}
}

EXPORT bool Native_isSpecialAbilityEnabled(int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1D200FE26AEF3CB);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSpecialAbilityEnabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setSpecialAbilityMultiplier(float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA49C426ED0CA4AB7);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSpecialAbilityMultiplier call failed" << Log::Endl;
	}
}

EXPORT void Native__0xFFEE8FA29AB9A18E(int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFFEE8FA29AB9A18E);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFFEE8FA29AB9A18E call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x5FC472C501CCADB3(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FC472C501CCADB3);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5FC472C501CCADB3 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xF10B44FD479D69F3(int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF10B44FD479D69F3);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF10B44FD479D69F3 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xDD2620B7B9D16FF1(int32_t _player, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD2620B7B9D16FF1);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDD2620B7B9D16FF1 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_startPlayerTeleport(int32_t _player, float _x, float _y, float _z, float _heading, bool _p5, bool _findCollisionLand, bool _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD15F075A4DA0FDE);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(_p5);
	ctx->Push(_findCollisionLand);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startPlayerTeleport call failed" << Log::Endl;
	}
}

EXPORT bool Native_updatePlayerTeleport(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE23D5873C2394C61);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native updatePlayerTeleport call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_stopPlayerTeleport() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC449EDED9D73009C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopPlayerTeleport call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPlayerTeleportActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02B15662D7F8886F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerTeleportActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT float Native_getPlayerCurrentStealthNoise(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F395D61F3A1F877);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerCurrentStealthNoise call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setPlayerHealthRechargeMultiplier(int32_t _player, float _regenRate) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DB660B38DD98A31);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_regenRate);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerHealthRechargeMultiplier call failed" << Log::Endl;
	}
}

EXPORT float Native_getPlayerHealthRechargeLimit(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BC515BAE4AAF8FF);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerHealthRechargeLimit call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setPlayerHealthRechargeLimit(int32_t _player, float _limit) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC388A0F065F5BC34);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_limit);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerHealthRechargeLimit call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerFallDistance(int32_t _player, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFD79FA81DFBA9CB);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerFallDistance call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerWeaponDamageModifier(int32_t _player, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE07B9F7817AADA3);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerWeaponDamageModifier call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerWeaponDefenseModifier(int32_t _player, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D83BC011CA14A3C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerWeaponDefenseModifier call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerWeaponDefenseModifier2(int32_t _player, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCFDE9EDE4CF27DC);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerWeaponDefenseModifier2 call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerMeleeWeaponDamageModifier(int32_t _player, float _modifier, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A3DC7ECCC321032);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_modifier);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerMeleeWeaponDamageModifier call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerMeleeWeaponDefenseModifier(int32_t _player, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE540335B4ABC4E2);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerMeleeWeaponDefenseModifier call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerVehicleDamageModifier(int32_t _player, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA50E117CDDF82F0C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerVehicleDamageModifier call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerVehicleDefenseModifier(int32_t _player, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C60E6EFDAFF2462);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerVehicleDefenseModifier call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8D768602ADEF2245(int32_t _player, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D768602ADEF2245);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8D768602ADEF2245 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD821056B9ACF8052(int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD821056B9ACF8052);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD821056B9ACF8052 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x31E90B8873A4CD3B(int32_t _player, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31E90B8873A4CD3B);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x31E90B8873A4CD3B call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerParachuteTintIndex(int32_t _player, int32_t _tintIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3D0E54541D9A5E5);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_tintIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerParachuteTintIndex call failed" << Log::Endl;
	}
}

EXPORT void Native_getPlayerParachuteTintIndex(int32_t _player, int32_t& _tintIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75D3F7A1B0D9B145);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_tintIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerParachuteTintIndex call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerReserveParachuteTintIndex(int32_t _player, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF04C87F5DC1DF38);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerReserveParachuteTintIndex call failed" << Log::Endl;
	}
}

EXPORT void Native_getPlayerReserveParachuteTintIndex(int32_t _player, int32_t& _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5A016BC3C09CF40);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerReserveParachuteTintIndex call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerParachutePackTintIndex(int32_t _player, int32_t _tintIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93B0FB27C9A04060);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_tintIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerParachutePackTintIndex call failed" << Log::Endl;
	}
}

EXPORT void Native_getPlayerParachutePackTintIndex(int32_t _player, int32_t& _tintIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E9C742F340CE5A2);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_tintIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerParachutePackTintIndex call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerHasReserveParachute(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7DDAB28D31FAC363);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerHasReserveParachute call failed" << Log::Endl;
	}
}

EXPORT bool Native_getPlayerHasReserveParachute(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DDFE2FF727F3CA3);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerHasReserveParachute call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPlayerCanLeaveParachuteSmokeTrail(int32_t _player, bool _enabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF401B182DBA8AF53);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_enabled);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerCanLeaveParachuteSmokeTrail call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerParachuteSmokeTrailColor(int32_t _player, int32_t _r, int32_t _g, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8217FD371A4625CF);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerParachuteSmokeTrailColor call failed" << Log::Endl;
	}
}

EXPORT void Native_getPlayerParachuteSmokeTrailColor(int32_t _player, int32_t& _r, int32_t& _g, int32_t& _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF56DBABD3CD4887);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerParachuteSmokeTrailColor call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerResetFlagPreferRearSeats(int32_t _player, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11D5F725F0E780E0);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerResetFlagPreferRearSeats call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerNoiseMultiplier(int32_t _player, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB89EF50FF25FCE9);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerNoiseMultiplier call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerSneakingNoiseMultiplier(int32_t _player, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2C1A29588A9F47C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerSneakingNoiseMultiplier call failed" << Log::Endl;
	}
}

EXPORT bool Native_canPedHearPlayer(int32_t _player, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF297383AA91DCA29);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canPedHearPlayer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_simulatePlayerInputGait(int32_t _player, float _amount, int32_t _gaitType, float _speed, bool _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x477D5D63E63ECA5D);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_amount);
	ctx->Push(_gaitType);
	ctx->Push(_speed);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native simulatePlayerInputGait call failed" << Log::Endl;
	}
}

EXPORT void Native_resetPlayerInputGait(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19531C47A2ABD691);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetPlayerInputGait call failed" << Log::Endl;
	}
}

EXPORT void Native_setAutoGiveParachuteWhenEnterPlane(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F343285A00B4BB6);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAutoGiveParachuteWhenEnterPlane call failed" << Log::Endl;
	}
}

EXPORT void Native_setAutoGiveScubaGearWhenExitVehicle(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2B315B6689D537D);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAutoGiveScubaGearWhenExitVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerStealthPerceptionModifier(int32_t _player, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E9021C1FCDD507A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerStealthPerceptionModifier call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x690A61A6D13583F6(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x690A61A6D13583F6);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x690A61A6D13583F6 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x9EDD76E87D5D51BA(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9EDD76E87D5D51BA);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9EDD76E87D5D51BA call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerSimulateAiming(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC54C95DA968EC5B5);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerSimulateAiming call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerClothPinFrames(int32_t _player, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x749FADDF97DFE930);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerClothPinFrames call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerClothPackageIndex(int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F7BBA2EA6372500);
	ctx->Reset();
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerClothPackageIndex call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerClothLockCounter(int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14D913B777DFF5DA);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerClothLockCounter call failed" << Log::Endl;
	}
}

EXPORT void Native_playerAttachVirtualBound(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED51733DC73AED51);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playerAttachVirtualBound call failed" << Log::Endl;
	}
}

EXPORT void Native_playerDetachVirtualBound() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DD5897E2FA6E7C9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playerDetachVirtualBound call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasPlayerBeenSpottedInStolenVehicle(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD705740BB0A1CF4C);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasPlayerBeenSpottedInStolenVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlayerBattleAware(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38D28DA81E4E9BF9);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerBattleAware call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xBC0753C9CA14B506(int32_t _player, int32_t _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC0753C9CA14B506);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBC0753C9CA14B506 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_extendWorldBoundaryForPlayer(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5006D96C995A5827);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native extendWorldBoundaryForPlayer call failed" << Log::Endl;
	}
}

EXPORT void Native_resetWorldBoundaryForPlayer() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA1DF03D5A315F4E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetWorldBoundaryForPlayer call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPlayerRidingTrain(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4EC12697209F2196);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerRidingTrain call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasPlayerLeftTheWorld(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD55DDFB47991A294);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasPlayerLeftTheWorld call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPlayerLeavePedBehind(int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF300C7649724A0B);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerLeavePedBehind call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerParachuteVariationOverride(int32_t _player, int32_t _p1, int32_t _p2, int32_t _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9284A8C0D48352C);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerParachuteVariationOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPlayerParachuteVariationOverride(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F4CC924CF8C7B21);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPlayerParachuteVariationOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerParachuteModelOverride(int32_t _player, int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x977DB4641F6FC3DB);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerParachuteModelOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerReserveParachuteModelOverride(int32_t _player, int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0764486AEDE748DB);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerReserveParachuteModelOverride call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPlayerParachuteModelOverride(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC219887CA3E65C41);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerParachuteModelOverride call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPlayerReserveParachuteModelOverride(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37FAAA68DCA9D08D);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerReserveParachuteModelOverride call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_clearPlayerParachuteModelOverride(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8753997EB5F6EE3F);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPlayerParachuteModelOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPlayerReserveParachuteModelOverride(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x290D248E25815AE8);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPlayerReserveParachuteModelOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerParachutePackModelOverride(int32_t _player, int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC80A4C2F18A2B64);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerParachutePackModelOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPlayerParachutePackModelOverride(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10C54E4389C12B42);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPlayerParachutePackModelOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_disablePlayerVehicleRewards(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC142BE3BB9CE125F);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disablePlayerVehicleRewards call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2F7CEB6520288061(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F7CEB6520288061);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2F7CEB6520288061 call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerBluetoothState(int32_t _player, bool _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DC40A8869C22141);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerBluetoothState call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPlayerBluetoothEnable(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65FAEE425DE637B0);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerBluetoothEnable call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x5501B7A5CDB79D37(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5501B7A5CDB79D37);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5501B7A5CDB79D37 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPlayerFakeWantedLevel(int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56105E599CAB0EFA);
	ctx->Reset();
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerFakeWantedLevel call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x55FCC0C390620314(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55FCC0C390620314);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x55FCC0C390620314 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2382AB11450AE7BA(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2382AB11450AE7BA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2382AB11450AE7BA call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x6E4361FF3E8CD7CA(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E4361FF3E8CD7CA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6E4361FF3E8CD7CA call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x237440E46D918649(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x237440E46D918649);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x237440E46D918649 call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerHomingRocketDisabled(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE4EBDD2593BA844);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerHomingRocketDisabled call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9097EB6D4BB9A12A(int32_t _player, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9097EB6D4BB9A12A);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9097EB6D4BB9A12A call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9F260BFB59ADBCA3(int32_t _player, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F260BFB59ADBCA3);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9F260BFB59ADBCA3 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x7BAE68775557AE0B(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7BAE68775557AE0B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7BAE68775557AE0B call failed" << Log::Endl;
	}
}

EXPORT void Native__0x7148E0F43D11F0D9() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7148E0F43D11F0D9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7148E0F43D11F0D9 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x70A382ADEC069DD3(float _coordX, float _coordY, float _coordZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70A382ADEC069DD3);
	ctx->Reset();
	ctx->Push(_coordX);
	ctx->Push(_coordY);
	ctx->Push(_coordZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x70A382ADEC069DD3 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x48621C9FCA3EBD28(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48621C9FCA3EBD28);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x48621C9FCA3EBD28 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x81CBAE94390F9F89() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81CBAE94390F9F89);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x81CBAE94390F9F89 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x13B350B8AD0EEE10() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13B350B8AD0EEE10);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x13B350B8AD0EEE10 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x293220DA1B46CEBC(float _p0, float _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x293220DA1B46CEBC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x293220DA1B46CEBC call failed" << Log::Endl;
	}
}

EXPORT void Native__0x208784099002BC30(const char* _missionNameLabel, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x208784099002BC30);
	ctx->Reset();
	ctx->Push(_missionNameLabel);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x208784099002BC30 call failed" << Log::Endl;
	}
}

EXPORT void Native_stopRecordingThisFrame() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB2D525B57F42B40);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopRecordingThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF854439EFBB3B583() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF854439EFBB3B583);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF854439EFBB3B583 call failed" << Log::Endl;
	}
}

EXPORT void Native_disableRockstarEditorCameraChanges() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF66DCEE6609B148);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableRockstarEditorCameraChanges call failed" << Log::Endl;
	}
}

EXPORT void Native__0x66972397E0757E7A(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66972397E0757E7A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x66972397E0757E7A call failed" << Log::Endl;
	}
}

EXPORT void Native_startRecording(int32_t _mode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3AC2FFF9612AC81);
	ctx->Reset();
	ctx->Push(_mode);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startRecording call failed" << Log::Endl;
	}
}

EXPORT void Native_stopRecordingAndSaveClip() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x071A5197D6AFC8B3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopRecordingAndSaveClip call failed" << Log::Endl;
	}
}

EXPORT void Native_stopRecordingAndDiscardClip() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88BB3507ED41A240);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopRecordingAndDiscardClip call failed" << Log::Endl;
	}
}

EXPORT bool Native_saveRecordingClip() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x644546EC5287471B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native saveRecordingClip call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isRecording() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1897CA71995A90B4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isRecording call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xDF4B952F7D381B95() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF4B952F7D381B95);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDF4B952F7D381B95 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x4282E08174868BE3() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4282E08174868BE3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4282E08174868BE3 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x33D47E85B476ABCD(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33D47E85B476ABCD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x33D47E85B476ABCD call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x7E2BD3EF6C205F09(const char* _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E2BD3EF6C205F09);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7E2BD3EF6C205F09 call failed" << Log::Endl;
	}
}

EXPORT bool Native_isInteriorRenderingDisabled() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95AB8B5C992C7B58);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isInteriorRenderingDisabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x5AD3932DAEB1E5D3() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AD3932DAEB1E5D3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5AD3932DAEB1E5D3 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE058175F8EAFE79A(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE058175F8EAFE79A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE058175F8EAFE79A call failed" << Log::Endl;
	}
}

EXPORT void Native_resetEditorValues() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3353D13F09307691);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetEditorValues call failed" << Log::Endl;
	}
}

EXPORT void Native_activateRockstarEditor(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49DA8145672B2725);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native activateRockstarEditor call failed" << Log::Endl;
	}
}

EXPORT void Native_requestScript(const char* _scriptName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6EB5F71AA68F2E8E);
	ctx->Reset();
	ctx->Push(_scriptName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestScript call failed" << Log::Endl;
	}
}

EXPORT void Native_setScriptAsNoLongerNeeded(const char* _scriptName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC90D2DCACD56184C);
	ctx->Reset();
	ctx->Push(_scriptName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScriptAsNoLongerNeeded call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasScriptLoaded(const char* _scriptName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6CC9F3BA0FB9EF1);
	ctx->Reset();
	ctx->Push(_scriptName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasScriptLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_doesScriptExist(const char* _scriptName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC04745FBE67C19A);
	ctx->Reset();
	ctx->Push(_scriptName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesScriptExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_requestScriptWithNameHash(int32_t _scriptHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD62A67D26D9653E6);
	ctx->Reset();
	ctx->Push(_scriptHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestScriptWithNameHash call failed" << Log::Endl;
	}
}

EXPORT void Native_setScriptWithNameHashAsNoLongerNeeded(int32_t _scriptHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5BC038960E9DB27);
	ctx->Reset();
	ctx->Push(_scriptHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScriptWithNameHashAsNoLongerNeeded call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasScriptWithNameHashLoaded(int32_t _scriptHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F0F0C783EB16C04);
	ctx->Reset();
	ctx->Push(_scriptHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasScriptWithNameHashLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_doesScriptWithNameHashExist(int32_t _scriptHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF86AA3C56BA31381);
	ctx->Reset();
	ctx->Push(_scriptHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesScriptWithNameHashExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_terminateThread(int32_t _threadId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8B189ED9138BCD4);
	ctx->Reset();
	ctx->Push(_threadId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native terminateThread call failed" << Log::Endl;
	}
}

EXPORT bool Native_isThreadActive(int32_t _threadId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46E9AE36D8FA6417);
	ctx->Reset();
	ctx->Push(_threadId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isThreadActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT const char* Native_getNameOfThread(int32_t _threadId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x05A42BA9FC8DA96B);
	ctx->Reset();
	ctx->Push(_threadId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNameOfThread call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT void Native_scriptThreadIteratorReset() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDADFADA5A20143A8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scriptThreadIteratorReset call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_scriptThreadIteratorGetNextThreadId() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30B4FA1C82DD4B9F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scriptThreadIteratorGetNextThreadId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getIdOfThisThread() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC30338E8088E2E21);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIdOfThisThread call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_terminateThisThread() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1090044AD1DA76FA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native terminateThisThread call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getNumberOfReferencesOfScriptWithNameHash(int32_t _scriptHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C83A9DA6BFFC4F9);
	ctx->Reset();
	ctx->Push(_scriptHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumberOfReferencesOfScriptWithNameHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT const char* Native_getThisScriptName() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x442E0A7EDE4A738A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getThisScriptName call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT int32_t Native_getHashOfThisScriptName() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A1C8B1738FFE87E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHashOfThisScriptName call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumberOfEvents(int32_t _eventGroup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F92A689A06620AA);
	ctx->Reset();
	ctx->Push(_eventGroup);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumberOfEvents call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getEventExists(int32_t _eventGroup, int32_t _eventIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x936E6168A9BCEDB5);
	ctx->Reset();
	ctx->Push(_eventGroup);
	ctx->Push(_eventIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEventExists call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getEventAtIndex(int32_t _eventGroup, int32_t _eventIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8F66A3A60C62153);
	ctx->Reset();
	ctx->Push(_eventGroup);
	ctx->Push(_eventIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEventAtIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getEventData(int32_t _eventGroup, int32_t _eventIndex, int32_t& _eventData, int32_t _eventDataSize) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2902843FCD2B2D79);
	ctx->Reset();
	ctx->Push(_eventGroup);
	ctx->Push(_eventIndex);
	ctx->Push(_eventData);
	ctx->Push(_eventDataSize);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEventData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_triggerScriptEvent(int32_t _eventGroup, int32_t& _eventData, int32_t _eventDataSize, int32_t _playerBits) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AE99C571D5BBE5D);
	ctx->Reset();
	ctx->Push(_eventGroup);
	ctx->Push(_eventData);
	ctx->Push(_eventDataSize);
	ctx->Push(_playerBits);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native triggerScriptEvent call failed" << Log::Endl;
	}
}

EXPORT void Native_shutdownLoadingScreen() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x078EBE9809CCD637);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native shutdownLoadingScreen call failed" << Log::Endl;
	}
}

EXPORT void Native_setNoLoadingScreen(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5262CC1995D07E09);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNoLoadingScreen call failed" << Log::Endl;
	}
}

EXPORT bool Native_getNoLoadingScreen() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x18C1270EA7F199BC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNoLoadingScreen call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xB1577667C3708F9B() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1577667C3708F9B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB1577667C3708F9B call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x836B62713E0534CA() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x836B62713E0534CA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x836B62713E0534CA call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x760910B49D2B98EA() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x760910B49D2B98EA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x760910B49D2B98EA call failed" << Log::Endl;
	}
}

EXPORT void Native_bgStartContextHash(int32_t _contextHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75B18E49607874C7);
	ctx->Reset();
	ctx->Push(_contextHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native bgStartContextHash call failed" << Log::Endl;
	}
}

EXPORT void Native_bgEndContextHash(int32_t _contextHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x107E5CC7CA942BC1);
	ctx->Reset();
	ctx->Push(_contextHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native bgEndContextHash call failed" << Log::Endl;
	}
}

EXPORT void Native_bgStartContext(const char* _contextName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D5A25BADB742ACD);
	ctx->Reset();
	ctx->Push(_contextName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native bgStartContext call failed" << Log::Endl;
	}
}

EXPORT void Native_bgEndContext(const char* _contextName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC2BACD920D0A0DD);
	ctx->Reset();
	ctx->Push(_contextName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native bgEndContext call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x0F6F1EBBC4E1D5E6(int32_t _scriptIndex, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F6F1EBBC4E1D5E6);
	ctx->Reset();
	ctx->Push(_scriptIndex);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0F6F1EBBC4E1D5E6 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x22E21FBCFC88C149(int32_t _scriptIndex, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22E21FBCFC88C149);
	ctx->Reset();
	ctx->Push(_scriptIndex);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x22E21FBCFC88C149 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x829CD22E043A2577(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x829CD22E043A2577);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x829CD22E043A2577 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_startShapeTestLosProbe(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _flags, int32_t _entity, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EE9F5D83DD4F90E);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_flags);
	ctx->Push(_entity);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startShapeTestLosProbe call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_startExpensiveSynchronousShapeTestLosProbe(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _flags, int32_t _entity, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x377906D8A31E5586);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_flags);
	ctx->Push(_entity);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startExpensiveSynchronousShapeTestLosProbe call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_startShapeTestBoundingBox(int32_t _entity, int32_t _flags1, int32_t _flags2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x052837721A854EC7);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_flags1);
	ctx->Push(_flags2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startShapeTestBoundingBox call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_startShapeTestBox(float _x, float _y, float _z, float _x1, float _y2, float _z2, float _rotX, float _rotY, float _rotZ, int32_t _p9, int32_t _flags, int32_t _entity, int32_t _p12) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE466162C4401D18);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_x1);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_p9);
	ctx->Push(_flags);
	ctx->Push(_entity);
	ctx->Push(_p12);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startShapeTestBox call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_startShapeTestBound(int32_t _entity, int32_t _flags1, int32_t _flags2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37181417CE7C8900);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_flags1);
	ctx->Push(_flags2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startShapeTestBound call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_startShapeTestCapsule(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _radius, int32_t _flags, int32_t _entity, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28579D1B8F8AAC80);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_radius);
	ctx->Push(_flags);
	ctx->Push(_entity);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startShapeTestCapsule call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_startShapeTestSweptSphere(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, float _radius, int32_t _flags, int32_t _entity, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6AC6C45FBE83004);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_radius);
	ctx->Push(_flags);
	ctx->Push(_entity);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startShapeTestSweptSphere call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_startShapeTestSurroundingCoords(vector3_t& _pVec1, vector3_t& _pVec2, int32_t _flag, int32_t _entity, int32_t _flag2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF6BE494C7987F34);
	ctx->Reset();
	alt::INative::Vector3 converted_pVec1 { _pVec1.x, 0, _pVec1.y, 0, _pVec1.z };
	ctx->Push(&converted_pVec1);
	alt::INative::Vector3 converted_pVec2 { _pVec2.x, 0, _pVec2.y, 0, _pVec2.z };
	ctx->Push(&converted_pVec2);
	ctx->Push(_flag);
	ctx->Push(_entity);
	ctx->Push(_flag2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startShapeTestSurroundingCoords call failed" << Log::Endl;
	}
	return ctx->ResultInt();
	_pVec1.x = converted_pVec1.x;
	_pVec1.y = converted_pVec1.y;
	_pVec1.z = converted_pVec1.z;
	_pVec2.x = converted_pVec2.x;
	_pVec2.y = converted_pVec2.y;
	_pVec2.z = converted_pVec2.z;
}

EXPORT int32_t Native_getShapeTestResult(int32_t _shapeTestHandle, bool& _hit, vector3_t& _endCoords, vector3_t& _surfaceNormal, int32_t& _entityHit) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D87450E15D98694);
	ctx->Reset();
	ctx->Push(_shapeTestHandle);
	ctx->Push(_hit);
	alt::INative::Vector3 converted_endCoords { _endCoords.x, 0, _endCoords.y, 0, _endCoords.z };
	ctx->Push(&converted_endCoords);
	alt::INative::Vector3 converted_surfaceNormal { _surfaceNormal.x, 0, _surfaceNormal.y, 0, _surfaceNormal.z };
	ctx->Push(&converted_surfaceNormal);
	ctx->Push(_entityHit);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getShapeTestResult call failed" << Log::Endl;
	}
	return ctx->ResultInt();
	_endCoords.x = converted_endCoords.x;
	_endCoords.y = converted_endCoords.y;
	_endCoords.z = converted_endCoords.z;
	_surfaceNormal.x = converted_surfaceNormal.x;
	_surfaceNormal.y = converted_surfaceNormal.y;
	_surfaceNormal.z = converted_surfaceNormal.z;
}

EXPORT int32_t Native_getShapeTestResultIncludingMaterial(int32_t _shapeTestHandle, bool& _hit, vector3_t& _endCoords, vector3_t& _surfaceNormal, int32_t& _materialHash, int32_t& _entityHit) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65287525D951F6BE);
	ctx->Reset();
	ctx->Push(_shapeTestHandle);
	ctx->Push(_hit);
	alt::INative::Vector3 converted_endCoords { _endCoords.x, 0, _endCoords.y, 0, _endCoords.z };
	ctx->Push(&converted_endCoords);
	alt::INative::Vector3 converted_surfaceNormal { _surfaceNormal.x, 0, _surfaceNormal.y, 0, _surfaceNormal.z };
	ctx->Push(&converted_surfaceNormal);
	ctx->Push(_materialHash);
	ctx->Push(_entityHit);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getShapeTestResultIncludingMaterial call failed" << Log::Endl;
	}
	return ctx->ResultInt();
	_endCoords.x = converted_endCoords.x;
	_endCoords.y = converted_endCoords.y;
	_endCoords.z = converted_endCoords.z;
	_surfaceNormal.x = converted_surfaceNormal.x;
	_surfaceNormal.y = converted_surfaceNormal.y;
	_surfaceNormal.z = converted_surfaceNormal.z;
}

EXPORT void Native_releaseScriptGuidFromEntity(int32_t _entityHit) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B3334BCA57CD799);
	ctx->Reset();
	ctx->Push(_entityHit);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native releaseScriptGuidFromEntity call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_scInboxGetTotalNumMessages() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03A93FF1A2CA0864);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scInboxGetTotalNumMessages call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_scInboxGetMessageTypeAtIndex(int32_t _msgIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB8EA16ECBC976C4);
	ctx->Reset();
	ctx->Push(_msgIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scInboxGetMessageTypeAtIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_scInboxGetMessageIsReadAtIndex(int32_t _msgIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93028F1DB42BFD08);
	ctx->Reset();
	ctx->Push(_msgIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scInboxGetMessageIsReadAtIndex call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_scInboxMessagePop(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C015348CF19CA1D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scInboxMessagePop call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_scInboxMessageGetDataInt(int32_t _p0, const char* _context, int32_t& _out) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA00EFE4082C4056E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_context);
	ctx->Push(_out);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scInboxMessageGetDataInt call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_scInboxMessageGetDataBool(int32_t _p0, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFFE5C16F402D851D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scInboxMessageGetDataBool call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_scInboxMessageGetDataString(int32_t _p0, const char* _context, const char*& _out) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7572EF42FC6A9B6D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_context);
	ctx->Push(_out);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scInboxMessageGetDataString call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_scInboxMessageDoApply(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A2C8064B6C1E41A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scInboxMessageDoApply call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT const char* Native_scInboxMessageGetString(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3E31D16CBDCB304);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scInboxMessageGetString call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT void Native_scInboxMessagePushGamerToEventRecipList(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA024BDBD600F44A);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scInboxMessagePushGamerToEventRecipList call failed" << Log::Endl;
	}
}

EXPORT void Native_scInboxMessageSendUgcStatUpdateEvent(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA68D3D229F4F3B06);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scInboxMessageSendUgcStatUpdateEvent call failed" << Log::Endl;
	}
}

EXPORT bool Native_scInboxMessageGetUgcdata(int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69D82604A1A5A254);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scInboxMessageGetUgcdata call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_scInboxMessageSendBountyPresenceEvent(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6AFD2CD753FEEF83);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scInboxMessageSendBountyPresenceEvent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_scInboxMessageGetBountyData(int32_t _index, int32_t& _outData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87E0052F08BD64E6);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_outData);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scInboxMessageGetBountyData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_scInboxGetEmails(int32_t _offset, int32_t _limit) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x040ADDCBAFA1018A);
	ctx->Reset();
	ctx->Push(_offset);
	ctx->Push(_limit);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scInboxGetEmails call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x16DA8172459434AA() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16DA8172459434AA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x16DA8172459434AA call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x7DB18CA8CAD5B098() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7DB18CA8CAD5B098);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7DB18CA8CAD5B098 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x4737980E8A283806(int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4737980E8A283806);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4737980E8A283806 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x44ACA259D67651DB(int32_t& _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44ACA259D67651DB);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x44ACA259D67651DB call failed" << Log::Endl;
	}
}

EXPORT void Native_scEmailMessagePushGamerToRecipList(int32_t& _gamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2330C12A7A605D16);
	ctx->Reset();
	ctx->Push(_gamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scEmailMessagePushGamerToRecipList call failed" << Log::Endl;
	}
}

EXPORT void Native_scEmailMessageClearRecipList() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55DF6DB45179236E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scEmailMessageClearRecipList call failed" << Log::Endl;
	}
}

EXPORT void Native__0x116FB94DC4B79F17(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x116FB94DC4B79F17);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x116FB94DC4B79F17 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x07DBD622D9533857(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07DBD622D9533857);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x07DBD622D9533857 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setHandleRockstarMessageViaScript(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFA0A56A817C6C7D);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHandleRockstarMessageViaScript call failed" << Log::Endl;
	}
}

EXPORT bool Native_isRockstarMessageReadyForScript() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC1CC91205EC8D6E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isRockstarMessageReadyForScript call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT const char* Native_rockstarMessageGetString() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF649C4E9AFDD788);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native rockstarMessageGetString call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT bool Native_scPresenceAttrSetInt(int32_t _attrHash, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F1E9682483697C7);
	ctx->Reset();
	ctx->Push(_attrHash);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scPresenceAttrSetInt call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_scPresenceAttrSetFloat(int32_t _attrHash, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4C4575F62534A24);
	ctx->Reset();
	ctx->Push(_attrHash);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scPresenceAttrSetFloat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_scPresenceAttrSetString(int32_t _attrHash, const char* _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x287F1F75D2803595);
	ctx->Reset();
	ctx->Push(_attrHash);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scPresenceAttrSetString call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x487912FD248EFDDF(int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x487912FD248EFDDF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x487912FD248EFDDF call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xC85A7127E7AD02AA() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC85A7127E7AD02AA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC85A7127E7AD02AA call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xA770C8EEC6FB2AC5() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA770C8EEC6FB2AC5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA770C8EEC6FB2AC5 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_scGetIsProfileAttributeSet(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8416FE4E4629D7D7);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scGetIsProfileAttributeSet call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x7FFCBFEE44ECFABF() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FFCBFEE44ECFABF);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7FFCBFEE44ECFABF call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x2D874D4AE612A65F() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D874D4AE612A65F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2D874D4AE612A65F call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_scProfanityCheckString(const char* _string, int32_t& _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75632C5ECD7ED843);
	ctx->Reset();
	ctx->Push(_string);
	ctx->Push(_token);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scProfanityCheckString call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_scProfanityCheckUgcString(const char* _string, int32_t& _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB2BF817463DFA28);
	ctx->Reset();
	ctx->Push(_string);
	ctx->Push(_token);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scProfanityCheckUgcString call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_scProfanityGetCheckIsValid(int32_t _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1753344C770358AE);
	ctx->Reset();
	ctx->Push(_token);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scProfanityGetCheckIsValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_scProfanityGetCheckIsPending(int32_t _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82E4A58BABC15AE7);
	ctx->Reset();
	ctx->Push(_token);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scProfanityGetCheckIsPending call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_scProfanityGetStringPassed(int32_t _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85535ACF97FC0969);
	ctx->Reset();
	ctx->Push(_token);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scProfanityGetStringPassed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_scProfanityGetStringStatus(int32_t _token) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x930DE22F07B1CCE3);
	ctx->Reset();
	ctx->Push(_token);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scProfanityGetStringStatus call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0xF6BAAAF762E1BF40(const char* _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6BAAAF762E1BF40);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF6BAAAF762E1BF40 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xF22CA0FD74B80E7A(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF22CA0FD74B80E7A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF22CA0FD74B80E7A call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x9237E334F6E43156(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9237E334F6E43156);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9237E334F6E43156 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x700569DBA175A77C(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x700569DBA175A77C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x700569DBA175A77C call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x1D4446A62D35B0D0(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D4446A62D35B0D0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1D4446A62D35B0D0 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x2E89990DDFF670C3(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E89990DDFF670C3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2E89990DDFF670C3 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0xD0EE05FE193646EA(const char* _p0, const char* _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0EE05FE193646EA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD0EE05FE193646EA call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x1989C6E6F67E76A8(const char* _p0, int32_t& _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1989C6E6F67E76A8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1989C6E6F67E76A8 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x07C61676E5BB52CD(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07C61676E5BB52CD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x07C61676E5BB52CD call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x8147FFF6A718E1AD(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8147FFF6A718E1AD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8147FFF6A718E1AD call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x0F73393BAC7E6730(const char* _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F73393BAC7E6730);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0F73393BAC7E6730 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xD302E99EDF0449CF(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD302E99EDF0449CF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD302E99EDF0449CF call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x5C4EBFFA98BDB41C(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C4EBFFA98BDB41C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5C4EBFFA98BDB41C call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0xFF8F3A92B75ED67A() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF8F3A92B75ED67A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFF8F3A92B75ED67A call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x4ED9C8D6DA297639() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4ED9C8D6DA297639);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4ED9C8D6DA297639 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x710BCDA8071EDED1(const char* _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x710BCDA8071EDED1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x710BCDA8071EDED1 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x50A8A36201DBF83E(const char* _p0, float& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50A8A36201DBF83E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x50A8A36201DBF83E call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x9DE5D2F723575ED0(const char* _p0, const char*& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DE5D2F723575ED0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9DE5D2F723575ED0 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xC2C97EA97711D1AE(const char*& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2C97EA97711D1AE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC2C97EA97711D1AE call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x450819D8CF90C416(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x450819D8CF90C416);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x450819D8CF90C416 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x4A7D6E727F941747(const char* _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A7D6E727F941747);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4A7D6E727F941747 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0xE75A4A2E5E316D86(const char* _p0, int32_t& _p1, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE75A4A2E5E316D86);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE75A4A2E5E316D86 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x2570E26BE63964E3(const char* _p0, float& _p1, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2570E26BE63964E3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2570E26BE63964E3 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x1D12A56FC95BE92E(const char* _p0, const char*& _p1, const char* _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D12A56FC95BE92E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1D12A56FC95BE92E call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x33DF47CC0642061B(const char*& _p0, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33DF47CC0642061B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x33DF47CC0642061B call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xA468E0BE12B12C70(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA468E0BE12B12C70);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA468E0BE12B12C70 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x8CC469AB4D349B7C(int32_t _p0, const char* _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8CC469AB4D349B7C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8CC469AB4D349B7C call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xC5A35C73B68F3C49(int32_t _p0, const char* _p1, float& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5A35C73B68F3C49);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC5A35C73B68F3C49 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x699E4A5C8C893A18(int32_t _p0, const char* _p1, const char*& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x699E4A5C8C893A18);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x699E4A5C8C893A18 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x19853B5B17D77BCA(int32_t _p0, const char*& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19853B5B17D77BCA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x19853B5B17D77BCA call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x6BFB12CE158E3DD4(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6BFB12CE158E3DD4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6BFB12CE158E3DD4 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xFE4C1D0D3B9CC17E(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE4C1D0D3B9CC17E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFE4C1D0D3B9CC17E call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xD8122C407663B995() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8122C407663B995);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD8122C407663B995 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x3001BEF2FECA3680() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3001BEF2FECA3680);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3001BEF2FECA3680 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x92DA6E70EF249BD1(const char* _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92DA6E70EF249BD1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x92DA6E70EF249BD1 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x675721C9F644D161() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x675721C9F644D161);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x675721C9F644D161 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xE4F6E8D07A2F0F51(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4F6E8D07A2F0F51);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE4F6E8D07A2F0F51 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x8A4416C0DB05FA66(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A4416C0DB05FA66);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8A4416C0DB05FA66 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xEA95C0853A27888E() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA95C0853A27888E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEA95C0853A27888E call failed" << Log::Endl;
	}
}

EXPORT const char* Native_scGetNickname() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x198D161F458ECC7F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scGetNickname call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT bool Native__0x225798743970412B(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x225798743970412B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x225798743970412B call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_scGetHasAchievementBeenPassed(int32_t _achievementId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x418DC16FAE452C1C);
	ctx->Reset();
	ctx->Push(_achievementId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native scGetHasAchievementBeenPassed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_statClearSlotForReload(int32_t _statSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB0A72181D4AA4AD);
	ctx->Reset();
	ctx->Push(_statSlot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statClearSlotForReload call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_statLoad(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA651443F437B1CE6);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statLoad call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statSave(int32_t _p0, bool _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE07BCA305B82D2FD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSave call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x5688585E6D563CD8(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5688585E6D563CD8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5688585E6D563CD8 call failed" << Log::Endl;
	}
}

EXPORT bool Native_statLoadPending(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1750FFAFA181661);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statLoadPending call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statSavePending() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D3A583856F2C5AC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSavePending call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statSavePendingOrRequested() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBB6AD006F1BBEA3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSavePendingOrRequested call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_statDeleteSlot(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49A49BED12794D70);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statDeleteSlot call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_statSlotIsLoaded(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D0A9F0E7BD91E3C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSlotIsLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x7F2C4CDF2E82DF4C(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F2C4CDF2E82DF4C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7F2C4CDF2E82DF4C call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xE496A53BA5F50A56(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE496A53BA5F50A56);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE496A53BA5F50A56 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_statSetBlockSaves(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF434A10BA01C37D0);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSetBlockSaves call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x6A7F19756F1A9016() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A7F19756F1A9016);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6A7F19756F1A9016 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0x7E6946F68A38B74F(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E6946F68A38B74F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7E6946F68A38B74F call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xA8733668D1047B51(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA8733668D1047B51);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA8733668D1047B51 call failed" << Log::Endl;
	}
}

EXPORT bool Native__0xECB41AC6AB754401() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xECB41AC6AB754401);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xECB41AC6AB754401 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x9B4BD21D69B1E609() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B4BD21D69B1E609);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9B4BD21D69B1E609 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xC0E0D686DDFC6EAE() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0E0D686DDFC6EAE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC0E0D686DDFC6EAE call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_statSetInt(int32_t _statName, int32_t _value, bool _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3271D7AB655B441);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_value);
	ctx->Push(_save);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSetInt call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statSetFloat(int32_t _statName, float _value, bool _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4851997F37FE9B3C);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_value);
	ctx->Push(_save);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSetFloat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statSetBool(int32_t _statName, bool _value, bool _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B33C4243DE0C432);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_value);
	ctx->Push(_save);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSetBool call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statSetGxtLabel(int32_t _statName, const char* _value, bool _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17695002FD8B2AE0);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_value);
	ctx->Push(_save);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSetGxtLabel call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statSetDate(int32_t _statName, int32_t& _value, int32_t _numFields, bool _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C29BFB64F4FCBE4);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_value);
	ctx->Push(_numFields);
	ctx->Push(_save);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSetDate call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statSetString(int32_t _statName, const char* _value, bool _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA87B2335D12531D7);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_value);
	ctx->Push(_save);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSetString call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statSetPos(int32_t _statName, float _x, float _y, float _z, bool _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB283FDE680FE72E);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_save);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSetPos call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statSetMaskedInt(int32_t _statName, int32_t _p1, int32_t _p2, int32_t _p3, bool _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7BBB1B54583ED410);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_save);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSetMaskedInt call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statSetUserId(int32_t _statName, const char* _value, bool _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8CDDF1E452BABE11);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_value);
	ctx->Push(_save);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSetUserId call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statSetCurrentPosixTime(int32_t _statName, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2F84B7F9C4D0C61);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSetCurrentPosixTime call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statGetInt(int32_t _statHash, int32_t& _outValue, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x767FBC2AC802EF3D);
	ctx->Reset();
	ctx->Push(_statHash);
	ctx->Push(_outValue);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetInt call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statGetFloat(int32_t _statHash, float& _outValue, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7AE6C9C9C6AC54C);
	ctx->Reset();
	ctx->Push(_statHash);
	ctx->Push(_outValue);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetFloat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statGetBool(int32_t _statHash, bool& _outValue, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11B5E6D2AE73F48E);
	ctx->Reset();
	ctx->Push(_statHash);
	ctx->Push(_outValue);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetBool call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statGetDate(int32_t _statHash, int32_t& _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B0FACEFC36C824B);
	ctx->Reset();
	ctx->Push(_statHash);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetDate call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT const char* Native_statGetString(int32_t _statHash, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE50384ACC2C3DB74);
	ctx->Reset();
	ctx->Push(_statHash);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetString call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT bool Native_statGetPos(int32_t _p0, int32_t& _p1, int32_t& _p2, int32_t& _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x350F82CCB186AA1B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetPos call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statGetMaskedInt(int32_t _p0, int32_t& _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x655185A06D9EEAAB);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetMaskedInt call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT const char* Native_statGetUserId(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2365C388E393BBE2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetUserId call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_statGetLicensePlate(int32_t _statName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5473D4195058B2E4);
	ctx->Reset();
	ctx->Push(_statName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetLicensePlate call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT bool Native_statSetLicensePlate(int32_t _statName, const char* _str) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69FF13266D7296DA);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_str);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSetLicensePlate call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_statIncrement(int32_t _statName, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B5A68C6489E9909);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statIncrement call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x5A556B229A169402() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A556B229A169402);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5A556B229A169402 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xB1D2BB1E1631F5B1() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1D2BB1E1631F5B1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB1D2BB1E1631F5B1 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xBED9F5693F34ED17(int32_t _statName, int32_t _p1, float& _outValue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBED9F5693F34ED17);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_p1);
	ctx->Push(_outValue);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBED9F5693F34ED17 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x26D7399B9587FE89(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26D7399B9587FE89);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x26D7399B9587FE89 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA78B8FA58200DA56(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA78B8FA58200DA56);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA78B8FA58200DA56 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_statGetNumberOfDays(int32_t _statName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE0E854F5280FB769);
	ctx->Reset();
	ctx->Push(_statName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetNumberOfDays call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_statGetNumberOfHours(int32_t _statName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2D4B2FE415AAFC3);
	ctx->Reset();
	ctx->Push(_statName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetNumberOfHours call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_statGetNumberOfMinutes(int32_t _statName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7583B4BE4C5A41B5);
	ctx->Reset();
	ctx->Push(_statName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetNumberOfMinutes call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_statGetNumberOfSeconds(int32_t _statName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CE056FF3723F00B);
	ctx->Reset();
	ctx->Push(_statName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetNumberOfSeconds call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_statSetProfileSettingValue(int32_t _profileSetting, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68F01422BE1D838F);
	ctx->Reset();
	ctx->Push(_profileSetting);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSetProfileSettingValue call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC01D2470F22CDE5A() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC01D2470F22CDE5A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC01D2470F22CDE5A call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_statGetPackedBoolMask(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4D8E7AC2A27758C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetPackedBoolMask call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_statGetPackedIntMask(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94F12ABF9C79E339);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetPackedIntMask call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPackedBoolStatKey(int32_t _index, bool _spStat, bool _charStat, int32_t _character) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80C75307B1C42837);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_spStat);
	ctx->Push(_charStat);
	ctx->Push(_character);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPackedBoolStatKey call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPackedIntStatKey(int32_t _index, bool _spStat, bool _charStat, int32_t _character) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61E111E323419E07);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_spStat);
	ctx->Push(_charStat);
	ctx->Push(_character);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPackedIntStatKey call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPackedTuBoolStatKey(int32_t _index, bool _spStat, bool _charStat, int32_t _character) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4BB08EE7907471E);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_spStat);
	ctx->Push(_charStat);
	ctx->Push(_character);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPackedTuBoolStatKey call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPackedTuIntStatKey(int32_t _index, bool _spStat, bool _charStat, int32_t _character) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD16C2AD6B8E32854);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_spStat);
	ctx->Push(_charStat);
	ctx->Push(_character);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPackedTuIntStatKey call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNgstatBoolHash(int32_t _index, bool _spStat, bool _charStat, int32_t _character, const char* _section) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA52FF538ED2BC71);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_spStat);
	ctx->Push(_charStat);
	ctx->Push(_character);
	ctx->Push(_section);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNgstatBoolHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNgstatIntHash(int32_t _index, bool _spStat, bool _charStat, int32_t _character, const char* _section) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B4CDCA6F07FF3DA);
	ctx->Reset();
	ctx->Push(_index);
	ctx->Push(_spStat);
	ctx->Push(_charStat);
	ctx->Push(_character);
	ctx->Push(_section);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNgstatIntHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_statGetBoolMasked(int32_t _statName, int32_t _mask, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10FE3F1B79F9B071);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_mask);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetBoolMasked call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_statSetBoolMasked(int32_t _statName, bool _value, int32_t _mask, bool _save) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BC62EC1937B9E5B);
	ctx->Reset();
	ctx->Push(_statName);
	ctx->Push(_value);
	ctx->Push(_mask);
	ctx->Push(_save);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSetBoolMasked call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_playstatsBackgroundScriptAction(const char* _action, int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5009DFD741329729);
	ctx->Reset();
	ctx->Push(_action);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsBackgroundScriptAction call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsNpcInvite(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93054C88E6AA7C44);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsNpcInvite call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsAwardXp(int32_t _amount, int32_t _type, int32_t _category) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46F917F6B4128FE4);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_type);
	ctx->Push(_category);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsAwardXp call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsRankUp(int32_t _rank) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC7F2DE41D102BFB4);
	ctx->Reset();
	ctx->Push(_rank);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsRankUp call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsStartOfflineMode() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x098760C7461724CD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsStartOfflineMode call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsActivityDone(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA071E0ED98F91286);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsActivityDone call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsLeaveJobChain(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5BE134EC7BA96A0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsLeaveJobChain call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsMissionStarted(int32_t& _p0, int32_t _p1, int32_t _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC19A2925C34D2231);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsMissionStarted call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsMissionOver(int32_t& _p0, int32_t _p1, int32_t _p2, bool _p3, bool _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C4BB33A8CED7324);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsMissionOver call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsMissionCheckpoint(int32_t& _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC900596A63978C1D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsMissionCheckpoint call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsRandomMissionDone(const char* _name, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71862B1D855F32E1);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsRandomMissionDone call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsRosBet(int32_t _amount, int32_t _act, int32_t _player, float _cm) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x121FB4DDDC2D5291);
	ctx->Reset();
	ctx->Push(_amount);
	ctx->Push(_act);
	ctx->Push(_player);
	ctx->Push(_cm);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsRosBet call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsRaceCheckpoint(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C375C315099DDE4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsRaceCheckpoint call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x6DEE77AFF8C21BD1(int32_t& _playerAccountId, int32_t& _posixTime) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6DEE77AFF8C21BD1);
	ctx->Reset();
	ctx->Push(_playerAccountId);
	ctx->Push(_posixTime);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6DEE77AFF8C21BD1 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_playstatsMatchStarted(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC80E22DED931E3D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsMatchStarted call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsShopItem(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x176852ACAAC173D1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsShopItem call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCrateDropMissionDone(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CAE5D2E3F9A07F0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCrateDropMissionDone call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCrateCreatedMissionDone(float _p0, float _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFC7E5E075A96F46);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCrateCreatedMissionDone call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsHoldUpMissionDone(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB00196B31C39EB1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsHoldUpMissionDone call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsImportExportMissionDone(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B69F5074C894811);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsImportExportMissionDone call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsRaceToPointMissionDone(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADDD1C754E2E2914);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsRaceToPointMissionDone call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsAcquiredHiddenPackage(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79AB33F0FBFAC40C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsAcquiredHiddenPackage call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsWebsiteVisited(int32_t _scaleformHash, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDDF24D535060F811);
	ctx->Reset();
	ctx->Push(_scaleformHash);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsWebsiteVisited call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsFriendActivity(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F71DE29AB2258F1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsFriendActivity call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsOddjobDone(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69DEA3E9DB727B4C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsOddjobDone call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsPropChange(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA739D6D5A05D6E7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsPropChange call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsClothChange(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34B973047A2268B9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsClothChange call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsWeaponModeChange(int32_t _weaponHash, int32_t _componentHashTo, int32_t _componentHashFrom) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE95C8A1875A02CA4);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_componentHashTo);
	ctx->Push(_componentHashFrom);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsWeaponModeChange call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCheatApplied(const char* _cheat) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6058665D72302D3F);
	ctx->Reset();
	ctx->Push(_cheat);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCheatApplied call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF8C54A461C3E11DC(int32_t& _p0, int32_t& _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8C54A461C3E11DC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF8C54A461C3E11DC call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF5BB8DAC426A52C0(int32_t& _p0, int32_t& _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5BB8DAC426A52C0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF5BB8DAC426A52C0 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA736CF7FB7C5BFF4(int32_t& _p0, int32_t& _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA736CF7FB7C5BFF4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA736CF7FB7C5BFF4 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x14E0B2D1AD1044E0(int32_t& _p0, int32_t& _p1, int32_t& _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14E0B2D1AD1044E0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x14E0B2D1AD1044E0 call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsQuickfixTool(int32_t _element, const char* _item) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90D0622866E80445);
	ctx->Reset();
	ctx->Push(_element);
	ctx->Push(_item);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsQuickfixTool call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsIdleKick(int32_t _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DA3A8DE8CB6226F);
	ctx->Reset();
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsIdleKick call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD1032E482629049E(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1032E482629049E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD1032E482629049E call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsHeistSaveCheat(int32_t _hash, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4FF020A08BC8863);
	ctx->Reset();
	ctx->Push(_hash);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsHeistSaveCheat call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsDirectorMode(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46326E13DA4E0546);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsDirectorMode call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsAwardBadsport(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47B32F5611E6E483);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsAwardBadsport call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsPegasaircraft(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9572BD4DD6B72122);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsPegasaircraft call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6A60E43998228229(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A60E43998228229);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6A60E43998228229 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBFAFDB5FAAA5C5AB(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFAFDB5FAAA5C5AB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBFAFDB5FAAA5C5AB call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8C9D11605E59D955(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C9D11605E59D955);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8C9D11605E59D955 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x3DE3AA516FB126A4(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DE3AA516FB126A4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3DE3AA516FB126A4 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBAA2F0490E146BE8(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAA2F0490E146BE8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBAA2F0490E146BE8 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1A7CE7CD3E653485(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A7CE7CD3E653485);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1A7CE7CD3E653485 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x419615486BBF1956(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x419615486BBF1956);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x419615486BBF1956 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x84DFC579C2FC214C(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84DFC579C2FC214C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x84DFC579C2FC214C call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0A9C7F36E5D7B683(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A9C7F36E5D7B683);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0A9C7F36E5D7B683 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x164C5FF663790845(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x164C5FF663790845);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x164C5FF663790845 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xEDBF6C9B0D2C65C8(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDBF6C9B0D2C65C8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEDBF6C9B0D2C65C8 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6551B1F7F6CD46EA(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6551B1F7F6CD46EA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6551B1F7F6CD46EA call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2CD90358F67D0AA8(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CD90358F67D0AA8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2CD90358F67D0AA8 call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsPiMenuHideSettings(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x203B381133817079);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsPiMenuHideSettings call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_leaderboardsGetNumberOfColumns(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x117B45156D7EFF2E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboardsGetNumberOfColumns call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_leaderboardsGetColumnId(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4B5467A1886EA7E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboardsGetColumnId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_leaderboardsGetColumnType(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF4FEF46DB7894D3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboardsGetColumnType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_leaderboardsReadClearAll() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA34CB6E6F0DF4A0B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboardsReadClearAll call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_leaderboardsReadClear(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7CCE5C737A665701);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboardsReadClear call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_leaderboardsReadPending(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC392C8483342AC2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboardsReadPending call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_leaderboardsReadAnyPending() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA31FD15197B192BD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboardsReadAnyPending call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_leaderboardsReadSuccessful(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FB19228983E832C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboardsReadSuccessful call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_leaderboards2ReadFriendsByRow(int32_t& _p0, int32_t& _p1, int32_t _p2, bool _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x918B101666F9CB83);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboards2ReadFriendsByRow call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_leaderboards2ReadByHandle(int32_t& _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC30713A383BFBF0E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboards2ReadByHandle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_leaderboards2ReadByRow(int32_t& _p0, int32_t& _p1, int32_t _p2, int32_t& _p3, int32_t _p4, int32_t& _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9CDB1E3F0A49883);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboards2ReadByRow call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_leaderboards2ReadByRank(int32_t& _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA2C7DB0C129449A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboards2ReadByRank call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_leaderboards2ReadByRadius(int32_t& _p0, int32_t _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CE587FB5A42C8C4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboards2ReadByRadius call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_leaderboards2ReadByScoreInt(int32_t& _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EEC7E4F6984A16A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboards2ReadByScoreInt call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_leaderboards2ReadByScoreFloat(int32_t& _p0, float _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE662C8B759D08F3C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboards2ReadByScoreFloat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_leaderboards2ReadRankPrediction(int32_t& _p0, int32_t& _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC38DC1E90D22547C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboards2ReadRankPrediction call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_leaderboards2ReadByPlatform(int32_t& _p0, const char* _gamerHandleCsv, const char* _platformName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1AE5DCDBFCA2721);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_gamerHandleCsv);
	ctx->Push(_platformName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboards2ReadByPlatform call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xA0F93D5465B3094D(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0F93D5465B3094D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA0F93D5465B3094D call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x71B008056E5692D6() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71B008056E5692D6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x71B008056E5692D6 call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x34770B9CE0E03B91(int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34770B9CE0E03B91);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x34770B9CE0E03B91 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x88578F6EC36B4A3A(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88578F6EC36B4A3A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x88578F6EC36B4A3A call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT float Native__0x38491439B6BA7F7D(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38491439B6BA7F7D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x38491439B6BA7F7D call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT bool Native_leaderboards2WriteData(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE2206545888AE49);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboards2WriteData call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_leaderboardsWriteAddColumn(int32_t _p0, int32_t _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BCA1D2C47B0D269);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboardsWriteAddColumn call failed" << Log::Endl;
	}
}

EXPORT void Native_leaderboardsWriteAddColumnLong(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E65248609523599);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboardsWriteAddColumnLong call failed" << Log::Endl;
	}
}

EXPORT bool Native_leaderboardsCacheDataRow(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9BB18E2C40142ED);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboardsCacheDataRow call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_leaderboardsClearCacheData() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4B02A6B476E1FDC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboardsClearCacheData call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8EC74CEB042E7CFF(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EC74CEB042E7CFF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8EC74CEB042E7CFF call failed" << Log::Endl;
	}
}

EXPORT bool Native_leaderboardsGetCacheExists(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C51349BE6CDFE2C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboardsGetCacheExists call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_leaderboardsGetCacheTime(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF04C1C27DA35F6C8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboardsGetCacheTime call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_leaderboardsGetCacheNumberOfRows(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58A651CD201D89AD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboardsGetCacheNumberOfRows call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_leaderboardsGetCacheDataRow(int32_t _p0, int32_t _p1, int32_t& _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9120E8DBA3D69273);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboardsGetCacheDataRow call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_updateStatInt(int32_t _statHash, int32_t _value, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11FF1C80276097ED);
	ctx->Reset();
	ctx->Push(_statHash);
	ctx->Push(_value);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native updateStatInt call failed" << Log::Endl;
	}
}

EXPORT void Native_updateStatFloat(int32_t _statHash, float _value, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30A6614C1F7799B8);
	ctx->Reset();
	ctx->Push(_statHash);
	ctx->Push(_value);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native updateStatFloat call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6483C25849031C4F(int32_t _p0, int32_t _p1, int32_t _p2, int32_t& _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6483C25849031C4F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6483C25849031C4F call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x5EAD2BF6484852E4() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EAD2BF6484852E4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5EAD2BF6484852E4 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xC141B8917E0017EC() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC141B8917E0017EC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC141B8917E0017EC call failed" << Log::Endl;
	}
}

EXPORT void Native_setProfileSettingPrologueComplete() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB475F27C6A994D65);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setProfileSettingPrologueComplete call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC67E2DA1CBE759E2() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC67E2DA1CBE759E2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC67E2DA1CBE759E2 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF1A1803D3476F215(int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1A1803D3476F215);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF1A1803D3476F215 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x38BAAA5DD4C9D19F(int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38BAAA5DD4C9D19F);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x38BAAA5DD4C9D19F call failed" << Log::Endl;
	}
}

EXPORT void Native__0x55384438FC55AD8E(int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55384438FC55AD8E);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x55384438FC55AD8E call failed" << Log::Endl;
	}
}

EXPORT void Native__0x723C1CE13FBFDB67(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x723C1CE13FBFDB67);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x723C1CE13FBFDB67 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0D01D20616FC73FB(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D01D20616FC73FB);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0D01D20616FC73FB call failed" << Log::Endl;
	}
}

EXPORT void Native__0x428EAF89E24F6C36(int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x428EAF89E24F6C36);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x428EAF89E24F6C36 call failed" << Log::Endl;
	}
}

EXPORT void Native_statSetCheatIsActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x047CBED6F6F8B63C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSetCheatIsActive call failed" << Log::Endl;
	}
}

EXPORT bool Native_leaderboards2WriteDataForEventType(int32_t& _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC980E62E33DF1D5C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native leaderboards2WriteDataForEventType call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x6F361B8889A792A3() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F361B8889A792A3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6F361B8889A792A3 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC847B43F369AC0B5() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC847B43F369AC0B5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC847B43F369AC0B5 call failed" << Log::Endl;
	}
}

EXPORT bool Native_statMigrateSave(const char* _platformName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5C80D8E768A9E66);
	ctx->Reset();
	ctx->Push(_platformName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statMigrateSave call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x9A62EC95AE10E011() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A62EC95AE10E011);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9A62EC95AE10E011 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x4C89FE2BDEB3F169() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C89FE2BDEB3F169);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4C89FE2BDEB3F169 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xC6E0E2616A7576BB() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6E0E2616A7576BB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC6E0E2616A7576BB call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x5BD5F255321C4AAF(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BD5F255321C4AAF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5BD5F255321C4AAF call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xDEAAF77EB3687E97(int32_t _p0, int32_t& _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEAAF77EB3687E97);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDEAAF77EB3687E97 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_statGetSaveMigrationStatus(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x886913BBEACA68C1);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetSaveMigrationStatus call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_statSaveMigrationCancel() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4FEF53183C3C6414);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSaveMigrationCancel call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_statGetCancelSaveMigrationStatus() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x567384DFA67029E6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetCancelSaveMigrationStatus call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_statSaveMigrationConsumeContentUnlock(int32_t _contentId, const char* _srcPlatform, const char* _srcGamerHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3270F67EED31FBC1);
	ctx->Reset();
	ctx->Push(_contentId);
	ctx->Push(_srcPlatform);
	ctx->Push(_srcGamerHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statSaveMigrationConsumeContentUnlock call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_statGetSaveMigrationConsumeContentUnlockStatus(int32_t& _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE5AA445ABA8DEE0);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native statGetSaveMigrationConsumeContentUnlockStatus call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x98E2BC1CA26287C3() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98E2BC1CA26287C3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x98E2BC1CA26287C3 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x629526ABA383BCAA() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x629526ABA383BCAA);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x629526ABA383BCAA call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xBE3DB208333D9844() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE3DB208333D9844);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBE3DB208333D9844 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x33D72899E24C3365(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33D72899E24C3365);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x33D72899E24C3365 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xA761D4AC6115623D() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA761D4AC6115623D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA761D4AC6115623D call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xF11F01D98113536A(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF11F01D98113536A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF11F01D98113536A call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x8B9CDBD6C566C38C() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B9CDBD6C566C38C);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8B9CDBD6C566C38C call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xE8853FBCE7D8D0D6() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8853FBCE7D8D0D6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE8853FBCE7D8D0D6 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xA943FD1722E11EFD() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA943FD1722E11EFD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA943FD1722E11EFD call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x84A810B375E69C0E() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84A810B375E69C0E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x84A810B375E69C0E call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x9EC8858184CD253A() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9EC8858184CD253A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9EC8858184CD253A call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xBA9749CC94C1FD85() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA9749CC94C1FD85);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBA9749CC94C1FD85 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x55A8BECAF28A4EB7() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55A8BECAF28A4EB7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x55A8BECAF28A4EB7 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x32CAC93C9DE73D32() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32CAC93C9DE73D32);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x32CAC93C9DE73D32 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xAFF47709F1D5DCCE() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAFF47709F1D5DCCE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAFF47709F1D5DCCE call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x6E0A5253375C4584() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E0A5253375C4584);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6E0A5253375C4584 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x1A8EA222F9C67DBB(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A8EA222F9C67DBB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1A8EA222F9C67DBB call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xF9F2922717B819EC() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9F2922717B819EC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF9F2922717B819EC call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x0B8B7F74BF061C6D() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B8B7F74BF061C6D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0B8B7F74BF061C6D call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0xB3DA2606774A8E2D() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3DA2606774A8E2D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB3DA2606774A8E2D call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setHasContentUnlocksFlags(int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDAC073C7901F9E15);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHasContentUnlocksFlags call failed" << Log::Endl;
	}
}

EXPORT void Native_setSaveMigrationTransactionId(int32_t _transactionId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6792800AC95350D);
	ctx->Reset();
	ctx->Push(_transactionId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSaveMigrationTransactionId call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6BC0ACD0673ACEBE(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6BC0ACD0673ACEBE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6BC0ACD0673ACEBE call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8D8ADB562F09A245(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D8ADB562F09A245);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8D8ADB562F09A245 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD1A1EE3B4FA8E760(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1A1EE3B4FA8E760);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD1A1EE3B4FA8E760 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x88087EE1F28024AE(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88087EE1F28024AE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x88087EE1F28024AE call failed" << Log::Endl;
	}
}

EXPORT void Native__0xFCC228E07217FCAC(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCC228E07217FCAC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFCC228E07217FCAC call failed" << Log::Endl;
	}
}

EXPORT void Native__0x678F86D8FC040BDB(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x678F86D8FC040BDB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x678F86D8FC040BDB call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA6F54BB2FFCA35EA(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6F54BB2FFCA35EA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA6F54BB2FFCA35EA call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5FF2C33B13A02A11(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FF2C33B13A02A11);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5FF2C33B13A02A11 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x282B6739644F4347(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x282B6739644F4347);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x282B6739644F4347 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF06A6F41CB445443(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF06A6F41CB445443);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF06A6F41CB445443 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x7B18DA61F6BAE9D5(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7B18DA61F6BAE9D5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7B18DA61F6BAE9D5 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x06EAF70AE066441E(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06EAF70AE066441E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x06EAF70AE066441E call failed" << Log::Endl;
	}
}

EXPORT void Native__0x14EDA9EE27BD1626(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14EDA9EE27BD1626);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x14EDA9EE27BD1626 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x930F504203F561C9(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x930F504203F561C9);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x930F504203F561C9 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE3261D791EB44ACB(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3261D791EB44ACB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE3261D791EB44ACB call failed" << Log::Endl;
	}
}

EXPORT void Native__0x73001E34F85137F8(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73001E34F85137F8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x73001E34F85137F8 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x53CAE13E9B426993(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53CAE13E9B426993);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x53CAE13E9B426993 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x7D36291161859389(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D36291161859389);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7D36291161859389 call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsSpentPiCustomLoadout(int32_t _amount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE509B0A3693DE8B);
	ctx->Reset();
	ctx->Push(_amount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsSpentPiCustomLoadout call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsBuyContraband(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD6781E42755531F7);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsBuyContraband call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsSellContraband(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC729991A9065376E);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsSellContraband call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsDefendContraband(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2605663BD4F23B5D);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsDefendContraband call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsRecoverContraband(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04D90BA8207ADA2D);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsRecoverContraband call failed" << Log::Endl;
	}
}

EXPORT void Native__0x60EEDC12AF66E846(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60EEDC12AF66E846);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x60EEDC12AF66E846 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x3EBEAC6C3F81F6BD(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3EBEAC6C3F81F6BD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3EBEAC6C3F81F6BD call failed" << Log::Endl;
	}
}

EXPORT void Native__0x96E6D5150DBF1C09(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x96E6D5150DBF1C09);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x96E6D5150DBF1C09 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA3C53804BDB68ED2(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA3C53804BDB68ED2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA3C53804BDB68ED2 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6BCCF9948492FD85(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6BCCF9948492FD85);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6BCCF9948492FD85 call failed" << Log::Endl;
	}
}

EXPORT void Native_hiredLimo(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x792271AB35C356A4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hiredLimo call failed" << Log::Endl;
	}
}

EXPORT void Native_orderedBossVehicle(int32_t _p0, int32_t _p1, int32_t _vehicleHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEA553E35C2246E1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_vehicleHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native orderedBossVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD1C9B92BDD3F151D(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD1C9B92BDD3F151D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD1C9B92BDD3F151D call failed" << Log::Endl;
	}
}

EXPORT void Native__0x44919CC079BB60BF(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44919CC079BB60BF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x44919CC079BB60BF call failed" << Log::Endl;
	}
}

EXPORT void Native__0x7033EEFD9B28088E(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7033EEFD9B28088E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7033EEFD9B28088E call failed" << Log::Endl;
	}
}

EXPORT void Native__0xAA525DFF66BB82F5(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA525DFF66BB82F5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAA525DFF66BB82F5 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x015B03EE1C43E6EC(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x015B03EE1C43E6EC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x015B03EE1C43E6EC call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsStuntPerformedEventAllowTrigger() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x928DBFB892638EF3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsStuntPerformedEventAllowTrigger call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsStuntPerformedEventDisallowTrigger() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A800DACCC0DA55D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsStuntPerformedEventDisallowTrigger call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBF371CD2B64212FD(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF371CD2B64212FD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBF371CD2B64212FD call failed" << Log::Endl;
	}
}

EXPORT void Native__0x7D8BA05688AD64C7(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D8BA05688AD64C7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7D8BA05688AD64C7 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0B565B0AAE56A0E8(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0B565B0AAE56A0E8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0B565B0AAE56A0E8 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x28ECB8AC2F607DB2(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28ECB8AC2F607DB2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x28ECB8AC2F607DB2 call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsChangeMcEmblem(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A50D2604E05CB94);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsChangeMcEmblem call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCC25A4553DFBF9EA(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC25A4553DFBF9EA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCC25A4553DFBF9EA call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF534D94DFA2EAD26(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF534D94DFA2EAD26);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF534D94DFA2EAD26 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD558BEC0BBA7E8D2(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD558BEC0BBA7E8D2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD558BEC0BBA7E8D2 call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsEarnedMcPoints(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x501478855A6074CE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsEarnedMcPoints call failed" << Log::Endl;
	}
}

EXPORT void Native__0x03C2EEBB04B3FB72(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03C2EEBB04B3FB72);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x03C2EEBB04B3FB72 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8989CBD7B4E82534(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8989CBD7B4E82534);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8989CBD7B4E82534 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x27AA1C973CACFE63(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27AA1C973CACFE63);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x27AA1C973CACFE63 call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCopyRankIntoNewSlot(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7257BA2550EA10A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCopyRankIntoNewSlot call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsDupeDetection(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x848B66100EE33B05);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsDupeDetection call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsBanAlert(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x516FC96EB88EEFE5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsBanAlert call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsGunrunMissionEnded(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0EACDF8487D5155A);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsGunrunMissionEnded call failed" << Log::Endl;
	}
}

EXPORT void Native__0xDAF80797FC534BEC(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDAF80797FC534BEC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDAF80797FC534BEC call failed" << Log::Endl;
	}
}

EXPORT void Native__0x316DB59CD14C1774(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x316DB59CD14C1774);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x316DB59CD14C1774 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2D7A9B577E72385E(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D7A9B577E72385E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2D7A9B577E72385E call failed" << Log::Endl;
	}
}

EXPORT void Native__0x830C3A44EB3F2CF9(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x830C3A44EB3F2CF9);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x830C3A44EB3F2CF9 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB26F670685631727(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB26F670685631727);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB26F670685631727 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC14BD9F5337219B2(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC14BD9F5337219B2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC14BD9F5337219B2 call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsStoneHatchetEnd(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35E39E5570358630);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsStoneHatchetEnd call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsSmugMissionEnded(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x320C35147D5B5DDD);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsSmugMissionEnded call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsH2FmprepEnd(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8AFB345A9C5CCBB);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsH2FmprepEnd call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsH2InstanceEnd(int32_t& _data, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E1497D0D2108115);
	ctx->Reset();
	ctx->Push(_data);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsH2InstanceEnd call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsDarMissionEnd(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BC254FF3A911501);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsDarMissionEnd call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsEnterSessionPack(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x878FF156D36E9956);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsEnterSessionPack call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsDroneUsage(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66C7BB2416ED3FCE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsDroneUsage call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsSpectatorWheelSpin(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6731DE84A38BFAD0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsSpectatorWheelSpin call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsArenaWarSpectator(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F4F599753F8200A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsArenaWarSpectator call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsArenaWarsEnded(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB479D9F0D48A1BC5);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsArenaWarsEnded call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsPassiveMode(bool _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35EEC6C2BC821A71);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsPassiveMode call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCollectible(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD0A8A9338681CF2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCollectible call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCasinoStoryMissionEnded(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFCCCAC2BD3C1F180);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCasinoStoryMissionEnded call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCasinoChip(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0999F3F090EC5012);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCasinoChip call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCasinoRoulette(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95101C443A84E7F1);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCasinoRoulette call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCasinoBlackjack(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3EAE97309727E7AD);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCasinoBlackjack call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCasinoThreecardpoker(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF740FB339D471C35);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCasinoThreecardpoker call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCasinoSlotmachine(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF5EC67D392B830A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCasinoSlotmachine call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCasinoInsidetrack(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x049F059625058A86);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCasinoInsidetrack call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCasinoLuckyseven(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C432C1435F5E4FA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCasinoLuckyseven call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCasinoRouletteLight(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6572ABA3DE1197FC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCasinoRouletteLight call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCasinoBlackjackLight(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5451C7BF151EB6F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCasinoBlackjackLight call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCasinoThreecardpokerLight(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9001364B4388F22);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCasinoThreecardpokerLight call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCasinoSlotmachineLight(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE60054A0FAE8227F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCasinoSlotmachineLight call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCasinoInsidetrackLight(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23A3CBCD50D54E47);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCasinoInsidetrackLight call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsArcadegame(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x533A7D1EA58DF958);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsArcadegame call failed" << Log::Endl;
	}
}

EXPORT void Native__0x4FCDBD3F0A813C25(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4FCDBD3F0A813C25);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4FCDBD3F0A813C25 call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCasinoMissionEnded(int32_t& _data) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A0D4A6C336B7BC5);
	ctx->Reset();
	ctx->Push(_data);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCasinoMissionEnded call failed" << Log::Endl;
	}
}

EXPORT void Native__0xDFBD93BF2943E29B(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFBD93BF2943E29B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDFBD93BF2943E29B call failed" << Log::Endl;
	}
}

EXPORT void Native__0x92FC0EEDFAC04A14(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92FC0EEDFAC04A14);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x92FC0EEDFAC04A14 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0077F15613D36993(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0077F15613D36993);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0077F15613D36993 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF9096193DF1F99D4(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9096193DF1F99D4);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF9096193DF1F99D4 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2E0259BABC27A327(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E0259BABC27A327);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2E0259BABC27A327 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x53C31853EC9531FF(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53C31853EC9531FF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x53C31853EC9531FF call failed" << Log::Endl;
	}
}

EXPORT void Native__0x810B5FCC52EC7FF0(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x810B5FCC52EC7FF0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x810B5FCC52EC7FF0 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5BF29846C6527C54(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BF29846C6527C54);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5BF29846C6527C54 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC03FAB2C2F92289B(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC03FAB2C2F92289B);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC03FAB2C2F92289B call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5CDAED54B34B0ED0(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CDAED54B34B0ED0);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5CDAED54B34B0ED0 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x4AFF7E02E485E92B() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AFF7E02E485E92B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4AFF7E02E485E92B call failed" << Log::Endl;
	}
}

EXPORT void Native__0xDFCDB14317A9B361(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFCDB14317A9B361);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDFCDB14317A9B361 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC1E963C58664B556(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1E963C58664B556);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC1E963C58664B556 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2FA3173480008493(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FA3173480008493);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2FA3173480008493 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD4367D310F079DB0(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4367D310F079DB0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD4367D310F079DB0 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x4DC416F246A41FC8(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4DC416F246A41FC8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4DC416F246A41FC8 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2818FF6638CB09DE(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2818FF6638CB09DE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2818FF6638CB09DE call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD6CA58B3B53A0F22(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD6CA58B3B53A0F22);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD6CA58B3B53A0F22 call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsRobberyPrep(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A67DFBF1F5C3835);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsRobberyPrep call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsRobberyFinale(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBA55BE9AAAABF44);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsRobberyFinale call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsExtraEvent(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA5B74BAB8A7EF99);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsExtraEvent call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCarclubPoints(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF14D6FEEC507BBE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCarclubPoints call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCarclubChallenge(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1187CB58D7F3BED7);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCarclubChallenge call failed" << Log::Endl;
	}
}

EXPORT void Native_playstatsCarclubPrize(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69C922B677621428);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playstatsCarclubPrize call failed" << Log::Endl;
	}
}

EXPORT void Native_loadAllObjectsNow() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD6E84632DD4CB3F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native loadAllObjectsNow call failed" << Log::Endl;
	}
}

EXPORT void Native_loadScene(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4448EB75B4904BDB);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native loadScene call failed" << Log::Endl;
	}
}

EXPORT bool Native_networkUpdateLoadScene() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4582015556D1C46);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkUpdateLoadScene call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isNetworkLoadingScene() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41CA5A33160EA4AB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isNetworkLoadingScene call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setInteriorActive(int32_t _interiorID, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE37B76C387BE28ED);
	ctx->Reset();
	ctx->Push(_interiorID);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setInteriorActive call failed" << Log::Endl;
	}
}

EXPORT void Native_requestModel(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x963D27A58DF860AC);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestModel call failed" << Log::Endl;
	}
}

EXPORT void Native_requestMenuPedModel(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0261AEF7ACFC51E);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestMenuPedModel call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasModelLoaded(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98A4EB5D89A0C952);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasModelLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_requestModelsInRoom(int32_t _interior, const char* _roomName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A7A40100EDFEC58);
	ctx->Reset();
	ctx->Push(_interior);
	ctx->Push(_roomName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestModelsInRoom call failed" << Log::Endl;
	}
}

EXPORT void Native_setModelAsNoLongerNeeded(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE532F5D78798DAAB);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setModelAsNoLongerNeeded call failed" << Log::Endl;
	}
}

EXPORT bool Native_isModelInCdimage(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35B9E0803292B641);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isModelInCdimage call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isModelValid(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0296A2EDF545E92);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isModelValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isModelAPed(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75816577FEA6DAD5);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isModelAPed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isModelAVehicle(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19AAC8F07BFEC53E);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isModelAVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_requestCollisionAtCoord(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07503F7948F491A7);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestCollisionAtCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_requestCollisionForModel(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x923CB32A3B874FCB);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestCollisionForModel call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasCollisionForModelLoaded(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22CCA434E368F03A);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasCollisionForModelLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_requestAdditionalCollisionAtCoord(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC9156DC11411A9EA);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestAdditionalCollisionAtCoord call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesAnimDictExist(const char* _animDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DA49C3B79856961);
	ctx->Reset();
	ctx->Push(_animDict);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesAnimDictExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_requestAnimDict(const char* _animDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3BD40951412FEF6);
	ctx->Reset();
	ctx->Push(_animDict);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestAnimDict call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasAnimDictLoaded(const char* _animDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD031A9162D01088C);
	ctx->Reset();
	ctx->Push(_animDict);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasAnimDictLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeAnimDict(const char* _animDict) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF66A602F829E2A06);
	ctx->Reset();
	ctx->Push(_animDict);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeAnimDict call failed" << Log::Endl;
	}
}

EXPORT void Native_requestAnimSet(const char* _animSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6EA47DAE7FAD0EED);
	ctx->Reset();
	ctx->Push(_animSet);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestAnimSet call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasAnimSetLoaded(const char* _animSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4EA073D86FB29B0);
	ctx->Reset();
	ctx->Push(_animSet);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasAnimSetLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeAnimSet(const char* _animSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16350528F93024B3);
	ctx->Reset();
	ctx->Push(_animSet);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeAnimSet call failed" << Log::Endl;
	}
}

EXPORT void Native_requestClipSet(const char* _clipSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2A71E1A77418A49);
	ctx->Reset();
	ctx->Push(_clipSet);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestClipSet call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasClipSetLoaded(const char* _clipSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x318234F4F3738AF3);
	ctx->Reset();
	ctx->Push(_clipSet);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasClipSetLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeClipSet(const char* _clipSet) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01F73A131C18CD94);
	ctx->Reset();
	ctx->Push(_clipSet);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeClipSet call failed" << Log::Endl;
	}
}

EXPORT void Native_requestIpl(const char* _iplName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41B4893843BBDB74);
	ctx->Reset();
	ctx->Push(_iplName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestIpl call failed" << Log::Endl;
	}
}

EXPORT void Native_removeIpl(const char* _iplName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE6C5AD3ECE0A82D);
	ctx->Reset();
	ctx->Push(_iplName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeIpl call failed" << Log::Endl;
	}
}

EXPORT bool Native_isIplActive(const char* _iplName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88A741E44A2B3495);
	ctx->Reset();
	ctx->Push(_iplName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isIplActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setStreaming(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E0C692677008888);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setStreaming call failed" << Log::Endl;
	}
}

EXPORT void Native_loadGlobalWaterType(int32_t _waterType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7E3F55ED251B76D3);
	ctx->Reset();
	ctx->Push(_waterType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native loadGlobalWaterType call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getGlobalWaterType() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF741BD853611592D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getGlobalWaterType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setGamePausesForStreaming(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x717CD6E6FAEBBEDC);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGamePausesForStreaming call failed" << Log::Endl;
	}
}

EXPORT void Native_setReducePedModelBudget(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77B5F9A36BF96710);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setReducePedModelBudget call failed" << Log::Endl;
	}
}

EXPORT void Native_setReduceVehicleModelBudget(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80C527893080CCF3);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setReduceVehicleModelBudget call failed" << Log::Endl;
	}
}

EXPORT void Native_setDitchPoliceModels(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42CBE54462D92634);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDitchPoliceModels call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getNumberOfStreamingRequests() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4060057271CEBC89);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumberOfStreamingRequests call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_requestPtfxAsset() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x944955FB2A3935C8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestPtfxAsset call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasPtfxAssetLoaded() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA7D9B86ECA7481B);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasPtfxAssetLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removePtfxAsset() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88C6814073DD4A73);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removePtfxAsset call failed" << Log::Endl;
	}
}

EXPORT void Native_requestNamedPtfxAsset(const char* _fxName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB80D8756B4668AB6);
	ctx->Reset();
	ctx->Push(_fxName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestNamedPtfxAsset call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasNamedPtfxAssetLoaded(const char* _fxName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8702416E512EC454);
	ctx->Reset();
	ctx->Push(_fxName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasNamedPtfxAssetLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeNamedPtfxAsset(const char* _fxName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F61EBBE1A00F96D);
	ctx->Reset();
	ctx->Push(_fxName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeNamedPtfxAsset call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehiclePopulationBudget(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB9E1EB3BE2AF4E9);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehiclePopulationBudget call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedPopulationBudget(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C95333CFC3340F3);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPopulationBudget call failed" << Log::Endl;
	}
}

EXPORT void Native_clearFocus() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31B73D1EA9F01DA2);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearFocus call failed" << Log::Endl;
	}
}

EXPORT void Native_setFocusPosAndVel(float _x, float _y, float _z, float _offsetX, float _offsetY, float _offsetZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB7454BAFF08FE25);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFocusPosAndVel call failed" << Log::Endl;
	}
}

EXPORT void Native_setFocusEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x198F77705FA0931D);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFocusEntity call failed" << Log::Endl;
	}
}

EXPORT bool Native_isEntityFocus(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DDFF3FB9075D747);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityFocus call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x0811381EF5062FEC(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0811381EF5062FEC);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0811381EF5062FEC call failed" << Log::Endl;
	}
}

EXPORT void Native_setMapdatacullboxEnabled(const char* _name, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF12610C644A35C9);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMapdatacullboxEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native__0x4E52E752C76E7E7A(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E52E752C76E7E7A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4E52E752C76E7E7A call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_streamvolCreateSphere(float _x, float _y, float _z, float _rad, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x219C7B8D53E429FD);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_rad);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native streamvolCreateSphere call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_streamvolCreateFrustum(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F3F018BC3AFA77C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native streamvolCreateFrustum call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_streamvolCreateLine(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AD9710CEE2F590F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native streamvolCreateLine call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_streamvolDelete(int32_t _unused) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1EE7D8DF4425F053);
	ctx->Reset();
	ctx->Push(_unused);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native streamvolDelete call failed" << Log::Endl;
	}
}

EXPORT bool Native_streamvolHasLoaded(int32_t _unused) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D41E9D2D17C5B2D);
	ctx->Reset();
	ctx->Push(_unused);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native streamvolHasLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_streamvolIsValid(int32_t _unused) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07C313F94746702C);
	ctx->Reset();
	ctx->Push(_unused);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native streamvolIsValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isStreamvolActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC9823AB80A3DCAC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isStreamvolActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_newLoadSceneStart(float _posX, float _posY, float _posZ, float _offsetX, float _offsetY, float _offsetZ, float _radius, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x212A8D0D2BABFAC2);
	ctx->Reset();
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_radius);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native newLoadSceneStart call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_newLoadSceneStartSphere(float _x, float _y, float _z, float _radius, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xACCFB4ACF53551B0);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native newLoadSceneStartSphere call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_newLoadSceneStop() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC197616D221FF4A4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native newLoadSceneStop call failed" << Log::Endl;
	}
}

EXPORT bool Native_isNewLoadSceneActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA41A05B6CB741B85);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isNewLoadSceneActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isNewLoadSceneLoaded() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01B8247A7A8B9AD1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isNewLoadSceneLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x71E7B2E657449AAD() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71E7B2E657449AAD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x71E7B2E657449AAD call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_startPlayerSwitch(int32_t _from, int32_t _to, int32_t _flags, int32_t _switchType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAA23F2CBA159D67);
	ctx->Reset();
	ctx->Push(_from);
	ctx->Push(_to);
	ctx->Push(_flags);
	ctx->Push(_switchType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startPlayerSwitch call failed" << Log::Endl;
	}
}

EXPORT void Native_stopPlayerSwitch() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95C0A5BBDC189AA1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopPlayerSwitch call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPlayerSwitchInProgress() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9D2CFFF49FAB35F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayerSwitchInProgress call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getPlayerSwitchType() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3C94A90D9FC9E62);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerSwitchType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getIdealPlayerSwitchType(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5D7B26B45720E05);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIdealPlayerSwitchType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPlayerSwitchState() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x470555300D10B2A5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerSwitchState call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPlayerShortSwitchState() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20F898A5D9782800);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerShortSwitchState call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x5F2013F8BC24EE69(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F2013F8BC24EE69);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5F2013F8BC24EE69 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPlayerSwitchJumpCutIndex() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78C0D93253149435);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerSwitchJumpCutIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPlayerSwitchOutro(float _cameraCoordX, float _cameraCoordY, float _cameraCoordZ, float _camRotationX, float _camRotationY, float _camRotationZ, float _camFov, float _camFarClip, int32_t _rotationOrder) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC208B673CE446B61);
	ctx->Reset();
	ctx->Push(_cameraCoordX);
	ctx->Push(_cameraCoordY);
	ctx->Push(_cameraCoordZ);
	ctx->Push(_camRotationX);
	ctx->Push(_camRotationY);
	ctx->Push(_camRotationZ);
	ctx->Push(_camFov);
	ctx->Push(_camFarClip);
	ctx->Push(_rotationOrder);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerSwitchOutro call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerSwitchEstablishingShot(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0FDE9DBFC0A6BC65);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerSwitchEstablishingShot call failed" << Log::Endl;
	}
}

EXPORT void Native_allowPlayerSwitchPan() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43D1680C6D19A8E9);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native allowPlayerSwitchPan call failed" << Log::Endl;
	}
}

EXPORT void Native_allowPlayerSwitchOutro() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74DE2E8739086740);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native allowPlayerSwitchOutro call failed" << Log::Endl;
	}
}

EXPORT void Native_allowPlayerSwitchAscent() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E2A065ABDAE6994);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native allowPlayerSwitchAscent call failed" << Log::Endl;
	}
}

EXPORT void Native_allowPlayerSwitchDescent() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD5FDF34B81BFE79);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native allowPlayerSwitchDescent call failed" << Log::Endl;
	}
}

EXPORT bool Native_isSwitchReadyForDescent() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFA80CB25D0A19B3);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSwitchReadyForDescent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_enableSwitchPauseBeforeDescent() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4793DFF3AF2ABCD);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableSwitchPauseBeforeDescent call failed" << Log::Endl;
	}
}

EXPORT void Native_disableSwitchOutroFx() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD605B8E0E18B3BB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableSwitchOutroFx call failed" << Log::Endl;
	}
}

EXPORT void Native_switchOutPlayer(int32_t _ped, int32_t _flags, int32_t _switchType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAB3200ED59016BC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_flags);
	ctx->Push(_switchType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native switchOutPlayer call failed" << Log::Endl;
	}
}

EXPORT void Native_switchInPlayer(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8295AF639FD9CB8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native switchInPlayer call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x933BBEEB8C61B5F4() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x933BBEEB8C61B5F4);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x933BBEEB8C61B5F4 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getPlayerSwitchInterpOutDuration() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x08C2D6C52A3104BB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerSwitchInterpOutDuration call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPlayerSwitchInterpOutCurrentTime() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B48A06DD0E792A5);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPlayerSwitchInterpOutCurrentTime call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isSwitchSkippingDescent() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B74EA8CFD5E3E7E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSwitchSkippingDescent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x1E9057A74FD73E23() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E9057A74FD73E23);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1E9057A74FD73E23 call failed" << Log::Endl;
	}
}

EXPORT float Native_getLodscale() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0C15B0E443B2349D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getLodscale call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_overrideLodscaleThisFrame(float _scaling) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA76359FC80B2438E);
	ctx->Reset();
	ctx->Push(_scaling);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native overrideLodscaleThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBED8CA5FF5E04113(float _p0, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBED8CA5FF5E04113);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBED8CA5FF5E04113 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x472397322E92A856() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x472397322E92A856);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x472397322E92A856 call failed" << Log::Endl;
	}
}

EXPORT void Native_setRenderHdOnly(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x40AEFD1A244741F2);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRenderHdOnly call failed" << Log::Endl;
	}
}

EXPORT void Native__0x03F1A106BDA7DD3E() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x03F1A106BDA7DD3E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x03F1A106BDA7DD3E call failed" << Log::Endl;
	}
}

EXPORT void Native__0x95A7DABDDBB78AE7(const char* _iplName1, const char* _iplName2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95A7DABDDBB78AE7);
	ctx->Reset();
	ctx->Push(_iplName1);
	ctx->Push(_iplName2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x95A7DABDDBB78AE7 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x63EB2B972A218CAC() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63EB2B972A218CAC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x63EB2B972A218CAC call failed" << Log::Endl;
	}
}

EXPORT bool Native__0xFB199266061F820A() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB199266061F820A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFB199266061F820A call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xF4A0DADB70F57FA6() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4A0DADB70F57FA6);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF4A0DADB70F57FA6 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x5068F488DDB54DD8() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5068F488DDB54DD8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5068F488DDB54DD8 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_prefetchSrl(const char* _srl) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D245789CE12982C);
	ctx->Reset();
	ctx->Push(_srl);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native prefetchSrl call failed" << Log::Endl;
	}
}

EXPORT bool Native_isSrlLoaded() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0263801A4C5B0BB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSrlLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_beginSrl() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BADDC94EF83B823);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native beginSrl call failed" << Log::Endl;
	}
}

EXPORT void Native_endSrl() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A41540E63C9EE17);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native endSrl call failed" << Log::Endl;
	}
}

EXPORT void Native_setSrlTime(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA74A541C6884E7B8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSrlTime call failed" << Log::Endl;
	}
}

EXPORT void Native__0xEF39EE20C537E98C(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF39EE20C537E98C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEF39EE20C537E98C call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBEB2D9A1D9A8F55A(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBEB2D9A1D9A8F55A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBEB2D9A1D9A8F55A call failed" << Log::Endl;
	}
}

EXPORT void Native__0x20C6C7E4EB082A7F(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20C6C7E4EB082A7F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x20C6C7E4EB082A7F call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF8155A7F03DDFC8E(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8155A7F03DDFC8E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF8155A7F03DDFC8E call failed" << Log::Endl;
	}
}

EXPORT void Native_setHdArea(float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB85F26619073E775);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHdArea call failed" << Log::Endl;
	}
}

EXPORT void Native_clearHdArea() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE58B1CFB9290813);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearHdArea call failed" << Log::Endl;
	}
}

EXPORT void Native_initCreatorBudget() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5A4DB34FE89B88A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native initCreatorBudget call failed" << Log::Endl;
	}
}

EXPORT void Native_shutdownCreatorBudget() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCE26000E9A6FAD7);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native shutdownCreatorBudget call failed" << Log::Endl;
	}
}

EXPORT bool Native_addModelToCreatorBudget(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BC3144DEB678666);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addModelToCreatorBudget call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeModelFromCreatorBudget(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF086AD9354FAC3A3);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeModelFromCreatorBudget call failed" << Log::Endl;
	}
}

EXPORT float Native_getUsedCreatorModelMemoryPercentage() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D3D8B3BE5A83D35);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getUsedCreatorModelMemoryPercentage call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setIslandHopperEnabled(const char* _name, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A9D1BA639675CF1);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setIslandHopperEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPause(int32_t _ped, int32_t _ms) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE73A266DB0CA9042);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ms);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPause call failed" << Log::Endl;
	}
}

EXPORT void Native_taskStandStill(int32_t _ped, int32_t _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x919BE13EED931959);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskStandStill call failed" << Log::Endl;
	}
}

EXPORT void Native_taskJump(int32_t _ped, bool _unused, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AE4086104E067B1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_unused);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskJump call failed" << Log::Endl;
	}
}

EXPORT void Native_taskCower(int32_t _ped, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3EB1FE9E8E908E15);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskCower call failed" << Log::Endl;
	}
}

EXPORT void Native_taskHandsUp(int32_t _ped, int32_t _duration, int32_t _facingPed, int32_t _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2EAB31979A7F910);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_duration);
	ctx->Push(_facingPed);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskHandsUp call failed" << Log::Endl;
	}
}

EXPORT void Native_updateTaskHandsUpDuration(int32_t _ped, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA98FCAFD7893C834);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native updateTaskHandsUpDuration call failed" << Log::Endl;
	}
}

EXPORT void Native_taskOpenVehicleDoor(int32_t _ped, int32_t _vehicle, int32_t _timeOut, int32_t _seat, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x965791A9A488A062);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_timeOut);
	ctx->Push(_seat);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskOpenVehicleDoor call failed" << Log::Endl;
	}
}

EXPORT void Native_taskEnterVehicle(int32_t _ped, int32_t _vehicle, int32_t _timeout, int32_t _seat, float _speed, int32_t _flag, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC20E50AA46D09CA8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_timeout);
	ctx->Push(_seat);
	ctx->Push(_speed);
	ctx->Push(_flag);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskEnterVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_taskLeaveVehicle(int32_t _ped, int32_t _vehicle, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3DBCE61A490BE02);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskLeaveVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_taskGetOffBoat(int32_t _ped, int32_t _boat) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C00E77AF14B2DFF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_boat);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGetOffBoat call failed" << Log::Endl;
	}
}

EXPORT void Native_taskSkyDive(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x601736CFE536B0A0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskSkyDive call failed" << Log::Endl;
	}
}

EXPORT void Native_taskParachute(int32_t _ped, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2F1C53C97EE81AB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskParachute call failed" << Log::Endl;
	}
}

EXPORT void Native_taskParachuteToTarget(int32_t _ped, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB33E291AFA6BD03A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskParachuteToTarget call failed" << Log::Endl;
	}
}

EXPORT void Native_setParachuteTaskTarget(int32_t _ped, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC313379AF0FCEDA7);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setParachuteTaskTarget call failed" << Log::Endl;
	}
}

EXPORT void Native_setParachuteTaskThrust(int32_t _ped, float _thrust) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0729BAC1B8C64317);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_thrust);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setParachuteTaskThrust call failed" << Log::Endl;
	}
}

EXPORT void Native_taskRappelFromHeli(int32_t _ped, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x09693B0312F91649);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskRappelFromHeli call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleDriveToCoord(int32_t _ped, int32_t _vehicle, float _x, float _y, float _z, float _speed, int32_t _p6, int32_t _vehicleModel, int32_t _drivingMode, float _stopRange, float _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2A2AA2F659D77A7);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_speed);
	ctx->Push(_p6);
	ctx->Push(_vehicleModel);
	ctx->Push(_drivingMode);
	ctx->Push(_stopRange);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleDriveToCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleDriveToCoordLongrange(int32_t _ped, int32_t _vehicle, float _x, float _y, float _z, float _speed, int32_t _driveMode, float _stopRange) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x158BB33F920D360C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_speed);
	ctx->Push(_driveMode);
	ctx->Push(_stopRange);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleDriveToCoordLongrange call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleDriveWander(int32_t _ped, int32_t _vehicle, float _speed, int32_t _drivingStyle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x480142959D337D00);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_speed);
	ctx->Push(_drivingStyle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleDriveWander call failed" << Log::Endl;
	}
}

EXPORT void Native_taskFollowToOffsetOfEntity(int32_t _ped, int32_t _entity, float _offsetX, float _offsetY, float _offsetZ, float _movementSpeed, int32_t _timeout, float _stoppingRange, bool _persistFollowing) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x304AE42E357B8C7E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_entity);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_movementSpeed);
	ctx->Push(_timeout);
	ctx->Push(_stoppingRange);
	ctx->Push(_persistFollowing);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskFollowToOffsetOfEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_taskGoStraightToCoord(int32_t _ped, float _x, float _y, float _z, float _speed, int32_t _timeout, float _targetHeading, float _distanceToSlide) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD76B57B44F1E6F8B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_speed);
	ctx->Push(_timeout);
	ctx->Push(_targetHeading);
	ctx->Push(_distanceToSlide);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGoStraightToCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_taskGoStraightToCoordRelativeToEntity(int32_t _entity1, int32_t _entity2, float _p2, float _p3, float _p4, float _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61E360B7E040D12E);
	ctx->Reset();
	ctx->Push(_entity1);
	ctx->Push(_entity2);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGoStraightToCoordRelativeToEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_taskAchieveHeading(int32_t _ped, float _heading, int32_t _timeout) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93B93A37987F1F3D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_heading);
	ctx->Push(_timeout);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskAchieveHeading call failed" << Log::Endl;
	}
}

EXPORT void Native_taskFlushRoute() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x841142A1376E9006);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskFlushRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_taskExtendRoute(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E7889778264843A);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskExtendRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_taskFollowPointRoute(int32_t _ped, float _speed, int32_t _unknown) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x595583281858626E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_speed);
	ctx->Push(_unknown);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskFollowPointRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_taskGoToEntity(int32_t _entity, int32_t _target, int32_t _duration, float _distance, float _speed, float _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A071245EB0D1882);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_target);
	ctx->Push(_duration);
	ctx->Push(_distance);
	ctx->Push(_speed);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGoToEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_taskSmartFleeCoord(int32_t _ped, float _x, float _y, float _z, float _distance, int32_t _time, bool _p6, bool _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94587F17E9C365D5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_distance);
	ctx->Push(_time);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskSmartFleeCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_taskSmartFleePed(int32_t _ped, int32_t _fleeTarget, float _distance, int32_t _fleeTime, bool _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22B0D0E37CCB840D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_fleeTarget);
	ctx->Push(_distance);
	ctx->Push(_fleeTime);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskSmartFleePed call failed" << Log::Endl;
	}
}

EXPORT void Native_taskReactAndFleePed(int32_t _ped, int32_t _fleeTarget) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72C896464915D1B1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_fleeTarget);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskReactAndFleePed call failed" << Log::Endl;
	}
}

EXPORT void Native_taskShockingEventReact(int32_t _ped, int32_t _eventHandle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x452419CBD838065B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_eventHandle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskShockingEventReact call failed" << Log::Endl;
	}
}

EXPORT void Native_taskWanderInArea(int32_t _ped, float _x, float _y, float _z, float _radius, float _minimalLength, float _timeBetweenWalks) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE054346CA3A0F315);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_minimalLength);
	ctx->Push(_timeBetweenWalks);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskWanderInArea call failed" << Log::Endl;
	}
}

EXPORT void Native_taskWanderStandard(int32_t _ped, float _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB9CE077274F6A1B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskWanderStandard call failed" << Log::Endl;
	}
}

EXPORT void Native_taskWanderSpecific(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6919A2F136426098);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskWanderSpecific call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehiclePark(int32_t _ped, int32_t _vehicle, float _x, float _y, float _z, float _heading, int32_t _mode, float _radius, bool _keepEngineOn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F3E34E968EA374E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(_mode);
	ctx->Push(_radius);
	ctx->Push(_keepEngineOn);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehiclePark call failed" << Log::Endl;
	}
}

EXPORT void Native_taskStealthKill(int32_t _killer, int32_t _target, int32_t _actionType, float _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA5DC05579D60BD9);
	ctx->Reset();
	ctx->Push(_killer);
	ctx->Push(_target);
	ctx->Push(_actionType);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskStealthKill call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPlantBomb(int32_t _ped, float _x, float _y, float _z, float _heading) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x965FEC691D55E9BF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPlantBomb call failed" << Log::Endl;
	}
}

EXPORT void Native_taskFollowNavMeshToCoord(int32_t _ped, float _x, float _y, float _z, float _speed, int32_t _timeout, float _stoppingRange, bool _persistFollowing, float _unk) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15D3A79D4E44B913);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_speed);
	ctx->Push(_timeout);
	ctx->Push(_stoppingRange);
	ctx->Push(_persistFollowing);
	ctx->Push(_unk);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskFollowNavMeshToCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_taskFollowNavMeshToCoordAdvanced(int32_t _ped, float _x, float _y, float _z, float _speed, int32_t _timeout, float _unkFloat, int32_t _unkInt, float _unkX, float _unkY, float _unkZ, float _unk_40000f) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x17F58B88D085DBAC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_speed);
	ctx->Push(_timeout);
	ctx->Push(_unkFloat);
	ctx->Push(_unkInt);
	ctx->Push(_unkX);
	ctx->Push(_unkY);
	ctx->Push(_unkZ);
	ctx->Push(_unk_40000f);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskFollowNavMeshToCoordAdvanced call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedPathCanUseClimbovers(int32_t _ped, bool _Toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E06A6FE76C9EFF4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_Toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPathCanUseClimbovers call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedPathCanUseLadders(int32_t _ped, bool _Toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77A5B103C87F476E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_Toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPathCanUseLadders call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedPathCanDropFromHeight(int32_t _ped, bool _Toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE361C5C71C431A4F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_Toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPathCanDropFromHeight call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedPathClimbCostModifier(int32_t _ped, float _modifier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88E32DB8C1A4AA4B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_modifier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPathClimbCostModifier call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedPathMayEnterWater(int32_t _ped, bool _mayEnterWater) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF35425A4204367EC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_mayEnterWater);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPathMayEnterWater call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedPathPreferToAvoidWater(int32_t _ped, bool _avoidWater) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x38FE1EC73743793C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_avoidWater);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPathPreferToAvoidWater call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedPathAvoidFire(int32_t _ped, bool _avoidFire) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4455517B28441E60);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_avoidFire);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedPathAvoidFire call failed" << Log::Endl;
	}
}

EXPORT void Native_setGlobalMinBirdFlightHeight(float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C6B148586F934F7);
	ctx->Reset();
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGlobalMinBirdFlightHeight call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getNavmeshRouteDistanceRemaining(int32_t _ped, float& _distanceRemaining, bool& _isPathReady) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6F5C0BCDC74D62D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_distanceRemaining);
	ctx->Push(_isPathReady);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNavmeshRouteDistanceRemaining call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNavmeshRouteResult(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x632E831F382A0FA8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNavmeshRouteResult call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native__0x3E38E28A1D80DDF6(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E38E28A1D80DDF6);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3E38E28A1D80DDF6 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_taskGoToCoordAnyMeans(int32_t _ped, float _x, float _y, float _z, float _speed, int32_t _p5, bool _p6, int32_t _walkingStyle, float _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BC448CB78FA3E88);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_speed);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_walkingStyle);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGoToCoordAnyMeans call failed" << Log::Endl;
	}
}

EXPORT void Native_taskGoToCoordAnyMeansExtraParams(int32_t _ped, float _x, float _y, float _z, float _speed, int32_t _p5, bool _p6, int32_t _walkingStyle, float _p8, int32_t _p9, int32_t _p10, int32_t _p11, int32_t _p12) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DD45F9ECFDB1BC9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_speed);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_walkingStyle);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGoToCoordAnyMeansExtraParams call failed" << Log::Endl;
	}
}

EXPORT void Native_taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed(int32_t _ped, float _x, float _y, float _z, float _speed, int32_t _p5, bool _p6, int32_t _walkingStyle, float _p8, int32_t _p9, int32_t _p10, int32_t _p11, int32_t _p12, int32_t _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8ECD61F531A7B02);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_speed);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_walkingStyle);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	ctx->Push(_p13);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGoToCoordAnyMeansExtraParamsWithCruiseSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPlayAnim(int32_t _ped, const char* _animDictionary, const char* _animationName, float _blendInSpeed, float _blendOutSpeed, int32_t _duration, int32_t _flag, float _playbackRate, bool _lockX, bool _lockY, bool _lockZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA47FE3719165B94);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_animDictionary);
	ctx->Push(_animationName);
	ctx->Push(_blendInSpeed);
	ctx->Push(_blendOutSpeed);
	ctx->Push(_duration);
	ctx->Push(_flag);
	ctx->Push(_playbackRate);
	ctx->Push(_lockX);
	ctx->Push(_lockY);
	ctx->Push(_lockZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPlayAnim call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPlayAnimAdvanced(int32_t _ped, const char* _animDict, const char* _animName, float _posX, float _posY, float _posZ, float _rotX, float _rotY, float _rotZ, float _animEnterSpeed, float _animExitSpeed, int32_t _duration, int32_t _flag, float _animTime, int32_t _p14, int32_t _p15) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83CDB10EA29B370B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_animDict);
	ctx->Push(_animName);
	ctx->Push(_posX);
	ctx->Push(_posY);
	ctx->Push(_posZ);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_animEnterSpeed);
	ctx->Push(_animExitSpeed);
	ctx->Push(_duration);
	ctx->Push(_flag);
	ctx->Push(_animTime);
	ctx->Push(_p14);
	ctx->Push(_p15);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPlayAnimAdvanced call failed" << Log::Endl;
	}
}

EXPORT void Native_stopAnimTask(int32_t _ped, const char* _animDictionary, const char* _animationName, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97FF36A1D40EA00A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_animDictionary);
	ctx->Push(_animationName);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopAnimTask call failed" << Log::Endl;
	}
}

EXPORT void Native_taskScriptedAnimation(int32_t _ped, int32_t& _p1, int32_t& _p2, int32_t& _p3, float _p4, float _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x126EF75F1E17ABE5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskScriptedAnimation call failed" << Log::Endl;
	}
}

EXPORT void Native_playEntityScriptedAnim(int32_t _p0, int32_t& _p1, int32_t& _p2, int32_t& _p3, float _p4, float _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77A1EEC547E7FCF1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playEntityScriptedAnim call failed" << Log::Endl;
	}
}

EXPORT void Native_stopAnimPlayback(int32_t _ped, int32_t _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEE08C992D238C5D1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopAnimPlayback call failed" << Log::Endl;
	}
}

EXPORT void Native_setAnimWeight(int32_t _p0, float _p1, int32_t _p2, int32_t _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x207F1A47C0342F48);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAnimWeight call failed" << Log::Endl;
	}
}

EXPORT void Native_setAnimPlaybackTime(int32_t _entity, float _p1, int32_t _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDDF3CB5A0A4C0B49);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAnimPlaybackTime call failed" << Log::Endl;
	}
}

EXPORT void Native_setAnimRate(int32_t _p0, float _p1, int32_t _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x032D49C5E359C847);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAnimRate call failed" << Log::Endl;
	}
}

EXPORT void Native_setAnimLooped(int32_t _p0, bool _p1, int32_t _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70033C3CC29A1FF4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAnimLooped call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPlayPhoneGestureAnimation(int32_t _ped, const char* _animDict, const char* _animation, const char* _boneMaskType, float _p4, float _p5, bool _p6, bool _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8FBB6758B3B3E9EC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_animDict);
	ctx->Push(_animation);
	ctx->Push(_boneMaskType);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPlayPhoneGestureAnimation call failed" << Log::Endl;
	}
}

EXPORT void Native_taskStopPhoneGestureAnimation(int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3FA00D4F4641BFAE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskStopPhoneGestureAnimation call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPlayingPhoneGestureAnim(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8EBB1E9D3588C10);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlayingPhoneGestureAnim call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT float Native_getPhoneGestureAnimCurrentTime(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47619ABE8B268C60);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPhoneGestureAnimCurrentTime call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getPhoneGestureAnimTotalTime(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1EE0F68A7C25DEC6);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPhoneGestureAnimTotalTime call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_taskVehiclePlayAnim(int32_t _vehicle, const char* _animationSet, const char* _animationName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69F5C3BD0F3EBD89);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_animationSet);
	ctx->Push(_animationName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehiclePlayAnim call failed" << Log::Endl;
	}
}

EXPORT void Native_taskLookAtCoord(int32_t _entity, float _x, float _y, float _z, int32_t _duration, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6FA46612594F7973);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_duration);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskLookAtCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_taskLookAtEntity(int32_t _ped, int32_t _lookAt, int32_t _duration, int32_t _unknown1, int32_t _unknown2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x69F4BE8C8CC4796C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_lookAt);
	ctx->Push(_duration);
	ctx->Push(_unknown1);
	ctx->Push(_unknown2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskLookAtEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_taskClearLookAt(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F804F1DB19B9689);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskClearLookAt call failed" << Log::Endl;
	}
}

EXPORT void Native_openSequenceTask(int32_t& _taskSequenceId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8854A4326B9E12B);
	ctx->Reset();
	ctx->Push(_taskSequenceId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native openSequenceTask call failed" << Log::Endl;
	}
}

EXPORT void Native_closeSequenceTask(int32_t _taskSequenceId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39E72BC99E6360CB);
	ctx->Reset();
	ctx->Push(_taskSequenceId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native closeSequenceTask call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPerformSequence(int32_t _ped, int32_t _taskSequenceId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5ABA3986D90D8A3B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_taskSequenceId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPerformSequence call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPerformSequenceLocally(int32_t _ped, int32_t _taskSequenceId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C33220C8D78CA0D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_taskSequenceId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPerformSequenceLocally call failed" << Log::Endl;
	}
}

EXPORT void Native_clearSequenceTask(int32_t& _taskSequenceId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3841422E9C488D8C);
	ctx->Reset();
	ctx->Push(_taskSequenceId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearSequenceTask call failed" << Log::Endl;
	}
}

EXPORT void Native_setSequenceToRepeat(int32_t _taskSequenceId, bool _repeat) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58C70CF3A41E4AE7);
	ctx->Reset();
	ctx->Push(_taskSequenceId);
	ctx->Push(_repeat);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSequenceToRepeat call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getSequenceProgress(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x00A9010CFE1E3533);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getSequenceProgress call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getIsTaskActive(int32_t _ped, int32_t _taskIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB0760331C7AA4155);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_taskIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsTaskActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getScriptTaskStatus(int32_t _ped, int32_t _taskHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x77F1BEB8863288D5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_taskHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getScriptTaskStatus call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getActiveVehicleMissionType(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x534AEBA6E5ED4CAB);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getActiveVehicleMissionType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_taskLeaveAnyVehicle(int32_t _ped, int32_t _p1, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x504D54DF3F6F2247);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskLeaveAnyVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_taskAimGunScripted(int32_t _ped, int32_t _scriptTask, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7A192BE16D373D00);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_scriptTask);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskAimGunScripted call failed" << Log::Endl;
	}
}

EXPORT void Native_taskAimGunScriptedWithTarget(int32_t _p0, int32_t _p1, float _p2, float _p3, float _p4, int32_t _p5, bool _p6, bool _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8605AF0DE8B3A5AC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskAimGunScriptedWithTarget call failed" << Log::Endl;
	}
}

EXPORT void Native_updateTaskAimGunScriptedTarget(int32_t _p0, int32_t _p1, float _p2, float _p3, float _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9724FB59A3E72AD0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native updateTaskAimGunScriptedTarget call failed" << Log::Endl;
	}
}

EXPORT const char* Native_getClipSetForScriptedGunTask(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A8CADC7D37AACC5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClipSetForScriptedGunTask call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT void Native_taskAimGunAtEntity(int32_t _ped, int32_t _entity, int32_t _duration, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B53BB6E8943AF53);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_entity);
	ctx->Push(_duration);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskAimGunAtEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_taskTurnPedToFaceEntity(int32_t _ped, int32_t _entity, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AD23D40115353AC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_entity);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskTurnPedToFaceEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_taskAimGunAtCoord(int32_t _ped, float _x, float _y, float _z, int32_t _time, bool _p5, bool _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6671F3EEC681BDA1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_time);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskAimGunAtCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_taskShootAtCoord(int32_t _ped, float _x, float _y, float _z, int32_t _duration, int32_t _firingPattern) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46A6CC01E0826106);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_duration);
	ctx->Push(_firingPattern);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskShootAtCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_taskShuffleToNextVehicleSeat(int32_t _ped, int32_t _vehicle, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7AA80209BDA643EB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskShuffleToNextVehicleSeat call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPedTasks(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE1EF3C1216AFF2CD);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedTasks call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPedSecondaryTask(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x176CECF6F920D707);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedSecondaryTask call failed" << Log::Endl;
	}
}

EXPORT void Native_taskEveryoneLeaveVehicle(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F93691AB4B92272);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskEveryoneLeaveVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_taskGotoEntityOffset(int32_t _ped, int32_t _p1, int32_t _p2, float _x, float _y, float _z, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE39B4FF4FDEBDE27);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGotoEntityOffset call failed" << Log::Endl;
	}
}

EXPORT void Native_taskGotoEntityOffsetXy(int32_t _p0, int32_t _oed, int32_t _duration, float _p3, float _p4, float _p5, float _p6, bool _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x338E7EF52B6095A9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_oed);
	ctx->Push(_duration);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGotoEntityOffsetXy call failed" << Log::Endl;
	}
}

EXPORT void Native_taskTurnPedToFaceCoord(int32_t _ped, float _x, float _y, float _z, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DDA930A0AC38571);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskTurnPedToFaceCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleTempAction(int32_t _driver, int32_t _vehicle, int32_t _action, int32_t _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC429DCEEB339E129);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_vehicle);
	ctx->Push(_action);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleTempAction call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleMission(int32_t _driver, int32_t _vehicle, int32_t _vehicleTarget, int32_t _missionType, float _p4, int32_t _p5, float _p6, float _p7, bool _DriveAgainstTraffic) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x659427E0EF36BCDE);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_vehicle);
	ctx->Push(_vehicleTarget);
	ctx->Push(_missionType);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_DriveAgainstTraffic);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleMission call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleMissionPedTarget(int32_t _ped, int32_t _vehicle, int32_t _pedTarget, int32_t _missionType, float _maxSpeed, int32_t _drivingStyle, float _minDistance, float _p7, bool _DriveAgainstTraffic) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9454528DF15D657A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_pedTarget);
	ctx->Push(_missionType);
	ctx->Push(_maxSpeed);
	ctx->Push(_drivingStyle);
	ctx->Push(_minDistance);
	ctx->Push(_p7);
	ctx->Push(_DriveAgainstTraffic);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleMissionPedTarget call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleMissionCoorsTarget(int32_t _ped, int32_t _vehicle, float _x, float _y, float _z, int32_t _p5, int32_t _p6, int32_t _p7, float _p8, float _p9, bool _DriveAgainstTraffic) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0AF20AA7731F8C3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_DriveAgainstTraffic);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleMissionCoorsTarget call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleEscort(int32_t _ped, int32_t _vehicle, int32_t _targetVehicle, int32_t _mode, float _speed, int32_t _drivingStyle, float _minDistance, int32_t _p7, float _noRoadsDistance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0FA6E4B75F302400);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_targetVehicle);
	ctx->Push(_mode);
	ctx->Push(_speed);
	ctx->Push(_drivingStyle);
	ctx->Push(_minDistance);
	ctx->Push(_p7);
	ctx->Push(_noRoadsDistance);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleEscort call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleFollow(int32_t _driver, int32_t _vehicle, int32_t _targetEntity, float _speed, int32_t _drivingStyle, int32_t _minDistance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC545A9F0626E3B6);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_vehicle);
	ctx->Push(_targetEntity);
	ctx->Push(_speed);
	ctx->Push(_drivingStyle);
	ctx->Push(_minDistance);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleFollow call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleChase(int32_t _driver, int32_t _targetEnt) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C08A8E30363B353);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_targetEnt);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleChase call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleHeliProtect(int32_t _pilot, int32_t _vehicle, int32_t _entityToFollow, float _targetSpeed, int32_t _p4, float _radius, int32_t _altitude, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E09C32048FEFD1C);
	ctx->Reset();
	ctx->Push(_pilot);
	ctx->Push(_vehicle);
	ctx->Push(_entityToFollow);
	ctx->Push(_targetSpeed);
	ctx->Push(_p4);
	ctx->Push(_radius);
	ctx->Push(_altitude);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleHeliProtect call failed" << Log::Endl;
	}
}

EXPORT void Native_setTaskVehicleChaseBehaviorFlag(int32_t _ped, int32_t _flag, bool _set) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCC665AAC360D31E7);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_flag);
	ctx->Push(_set);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTaskVehicleChaseBehaviorFlag call failed" << Log::Endl;
	}
}

EXPORT void Native_setTaskVehicleChaseIdealPursuitDistance(int32_t _ped, float _distance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x639B642FACBE4EDD);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_distance);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTaskVehicleChaseIdealPursuitDistance call failed" << Log::Endl;
	}
}

EXPORT void Native_taskHeliChase(int32_t _pilot, int32_t _entityToFollow, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC83B1DB38D0ADA0);
	ctx->Reset();
	ctx->Push(_pilot);
	ctx->Push(_entityToFollow);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskHeliChase call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPlaneChase(int32_t _pilot, int32_t _entityToFollow, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D2386F273FF7A25);
	ctx->Reset();
	ctx->Push(_pilot);
	ctx->Push(_entityToFollow);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPlaneChase call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPlaneLand(int32_t _pilot, int32_t _plane, float _runwayStartX, float _runwayStartY, float _runwayStartZ, float _runwayEndX, float _runwayEndY, float _runwayEndZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF19721FA34D32C0);
	ctx->Reset();
	ctx->Push(_pilot);
	ctx->Push(_plane);
	ctx->Push(_runwayStartX);
	ctx->Push(_runwayStartY);
	ctx->Push(_runwayStartZ);
	ctx->Push(_runwayEndX);
	ctx->Push(_runwayEndY);
	ctx->Push(_runwayEndZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPlaneLand call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6100B3CEFD43452E(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6100B3CEFD43452E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6100B3CEFD43452E call failed" << Log::Endl;
	}
}

EXPORT void Native_clearVehicleTasks(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBBC7A2432524127);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearVehicleTasks call failed" << Log::Endl;
	}
}

EXPORT void Native__0x53DDC75BC3AC0A90(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53DDC75BC3AC0A90);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x53DDC75BC3AC0A90 call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPlaneGotoPreciseVtol(int32_t _ped, int32_t _vehicle, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7F9DCCA89E7505B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPlaneGotoPreciseVtol call failed" << Log::Endl;
	}
}

EXPORT void Native_taskSubmarineGotoAndStop(int32_t _p0, int32_t _submarine, float _x, float _y, float _z, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC22B40579A498CA4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_submarine);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskSubmarineGotoAndStop call failed" << Log::Endl;
	}
}

EXPORT void Native_taskHeliMission(int32_t _pilot, int32_t _aircraft, int32_t _targetVehicle, int32_t _targetPed, float _destinationX, float _destinationY, float _destinationZ, int32_t _missionFlag, float _maxSpeed, float _radius, float _targetHeading, int32_t _maxHeight, int32_t _minHeight, float _unk3, int32_t _behaviorFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDAD029E187A2BEB4);
	ctx->Reset();
	ctx->Push(_pilot);
	ctx->Push(_aircraft);
	ctx->Push(_targetVehicle);
	ctx->Push(_targetPed);
	ctx->Push(_destinationX);
	ctx->Push(_destinationY);
	ctx->Push(_destinationZ);
	ctx->Push(_missionFlag);
	ctx->Push(_maxSpeed);
	ctx->Push(_radius);
	ctx->Push(_targetHeading);
	ctx->Push(_maxHeight);
	ctx->Push(_minHeight);
	ctx->Push(_unk3);
	ctx->Push(_behaviorFlags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskHeliMission call failed" << Log::Endl;
	}
}

EXPORT void Native_taskHeliEscortHeli(int32_t _pilot, int32_t _heli1, int32_t _heli2, float _p3, float _p4, float _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB385523325077210);
	ctx->Reset();
	ctx->Push(_pilot);
	ctx->Push(_heli1);
	ctx->Push(_heli2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskHeliEscortHeli call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPlaneMission(int32_t _pilot, int32_t _aircraft, int32_t _targetVehicle, int32_t _targetPed, float _destinationX, float _destinationY, float _destinationZ, int32_t _missionFlag, float _angularDrag, float _unk, float _targetHeading, float _maxZ, float _minZ, int32_t _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23703CD154E83B88);
	ctx->Reset();
	ctx->Push(_pilot);
	ctx->Push(_aircraft);
	ctx->Push(_targetVehicle);
	ctx->Push(_targetPed);
	ctx->Push(_destinationX);
	ctx->Push(_destinationY);
	ctx->Push(_destinationZ);
	ctx->Push(_missionFlag);
	ctx->Push(_angularDrag);
	ctx->Push(_unk);
	ctx->Push(_targetHeading);
	ctx->Push(_maxZ);
	ctx->Push(_minZ);
	ctx->Push(_p13);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPlaneMission call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPlaneTaxi(int32_t _pilot, int32_t _aircraft, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92C360B5F15D2302);
	ctx->Reset();
	ctx->Push(_pilot);
	ctx->Push(_aircraft);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPlaneTaxi call failed" << Log::Endl;
	}
}

EXPORT void Native_taskBoatMission(int32_t _pedDriver, int32_t _boat, int32_t _p2, int32_t _p3, float _x, float _y, float _z, int32_t _p7, float _maxSpeed, int32_t _drivingStyle, float _p10, int32_t _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x15C86013127CE63F);
	ctx->Reset();
	ctx->Push(_pedDriver);
	ctx->Push(_boat);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p7);
	ctx->Push(_maxSpeed);
	ctx->Push(_drivingStyle);
	ctx->Push(_p10);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskBoatMission call failed" << Log::Endl;
	}
}

EXPORT void Native_taskDriveBy(int32_t _driverPed, int32_t _targetPed, int32_t _targetVehicle, float _targetX, float _targetY, float _targetZ, float _distanceToShoot, int32_t _pedAccuracy, bool _p8, int32_t _firingPattern) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F8AF0E82773A171);
	ctx->Reset();
	ctx->Push(_driverPed);
	ctx->Push(_targetPed);
	ctx->Push(_targetVehicle);
	ctx->Push(_targetX);
	ctx->Push(_targetY);
	ctx->Push(_targetZ);
	ctx->Push(_distanceToShoot);
	ctx->Push(_pedAccuracy);
	ctx->Push(_p8);
	ctx->Push(_firingPattern);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskDriveBy call failed" << Log::Endl;
	}
}

EXPORT void Native_setDrivebyTaskTarget(int32_t _shootingPed, int32_t _targetPed, int32_t _targetVehicle, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE5B302114D8162EE);
	ctx->Reset();
	ctx->Push(_shootingPed);
	ctx->Push(_targetPed);
	ctx->Push(_targetVehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDrivebyTaskTarget call failed" << Log::Endl;
	}
}

EXPORT void Native_clearDrivebyTaskUnderneathDrivingTask(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC35B5CDB2824CF69);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearDrivebyTaskUnderneathDrivingTask call failed" << Log::Endl;
	}
}

EXPORT bool Native_isDrivebyTaskUnderneathDrivingTask(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8785E6E40C7A8818);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isDrivebyTaskUnderneathDrivingTask call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_controlMountedWeapon(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCFE42068FE0135A);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native controlMountedWeapon call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setMountedWeaponTarget(int32_t _shootingPed, int32_t _targetPed, int32_t _targetVehicle, float _x, float _y, float _z, int32_t _p6, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCCD892192C6D2BB9);
	ctx->Reset();
	ctx->Push(_shootingPed);
	ctx->Push(_targetPed);
	ctx->Push(_targetVehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMountedWeaponTarget call failed" << Log::Endl;
	}
}

EXPORT bool Native_isMountedWeaponTaskUnderneathDrivingTask(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA320EF046186FA3B);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMountedWeaponTaskUnderneathDrivingTask call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_taskUseMobilePhone(int32_t _ped, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD2A8EC3AF4DE7DB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskUseMobilePhone call failed" << Log::Endl;
	}
}

EXPORT void Native_taskUseMobilePhoneTimed(int32_t _ped, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EE02954A14C69DB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskUseMobilePhoneTimed call failed" << Log::Endl;
	}
}

EXPORT void Native_taskChatToPed(int32_t _ped, int32_t _target, int32_t _p2, float _p3, float _p4, float _p5, float _p6, float _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C338E0263E4FD19);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskChatToPed call failed" << Log::Endl;
	}
}

EXPORT void Native_taskWarpPedIntoVehicle(int32_t _ped, int32_t _vehicle, int32_t _seat) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A7D091411C5F684);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_seat);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskWarpPedIntoVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_taskShootAtEntity(int32_t _entity, int32_t _target, int32_t _duration, int32_t _firingPattern) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x08DA95E8298AE772);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_target);
	ctx->Push(_duration);
	ctx->Push(_firingPattern);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskShootAtEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_taskClimb(int32_t _ped, bool _unused) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89D9FCC2435112F1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_unused);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskClimb call failed" << Log::Endl;
	}
}

EXPORT void Native_taskClimbLadder(int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB6C987F9285A3814);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskClimbLadder call failed" << Log::Endl;
	}
}

EXPORT void Native_taskRappelDownWall(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9, int32_t _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAF66ACDDC794793);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskRappelDownWall call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x9D252648778160DF(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D252648778160DF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9D252648778160DF call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_clearPedTasksImmediately(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAAA34F8A7CB32098);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedTasksImmediately call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPerformSequenceFromProgress(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89221B16730234F0);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPerformSequenceFromProgress call failed" << Log::Endl;
	}
}

EXPORT void Native_setNextDesiredMoveState(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1B9F16E89E2C93A);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNextDesiredMoveState call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedDesiredMoveBlendRatio(int32_t _ped, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E982AC8716912C5);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDesiredMoveBlendRatio call failed" << Log::Endl;
	}
}

EXPORT float Native_getPedDesiredMoveBlendRatio(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8517D4A6CA8513ED);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedDesiredMoveBlendRatio call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_taskGotoEntityAiming(int32_t _ped, int32_t _target, float _distanceToStopAt, float _StartAimingDist) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA9DA48FAB8A76C12);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_distanceToStopAt);
	ctx->Push(_StartAimingDist);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGotoEntityAiming call failed" << Log::Endl;
	}
}

EXPORT void Native_taskSetDecisionMaker(int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB8517DDA73720DA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskSetDecisionMaker call failed" << Log::Endl;
	}
}

EXPORT void Native_taskSetSphereDefensiveArea(int32_t _p0, float _p1, float _p2, float _p3, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x933C06518B52A9A4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskSetSphereDefensiveArea call failed" << Log::Endl;
	}
}

EXPORT void Native_taskClearDefensiveArea(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95A6C46A31D1917D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskClearDefensiveArea call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPedSlideToCoord(int32_t _ped, float _x, float _y, float _z, float _heading, float _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD04FE6765D990A06);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPedSlideToCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPedSlideToCoordHdgRate(int32_t _ped, float _x, float _y, float _z, float _heading, float _p5, float _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A4A6A6D3DC64F52);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPedSlideToCoordHdgRate call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_addCoverPoint(float _p0, float _p1, float _p2, float _p3, int32_t _p4, int32_t _p5, int32_t _p6, bool _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5C12A75C7B9497F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addCoverPoint call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_removeCoverPoint(int32_t _coverpoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE287C923D891715);
	ctx->Reset();
	ctx->Push(_coverpoint);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeCoverPoint call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesScriptedCoverPointExistAtCoords(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA98B8E3C088E5A31);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesScriptedCoverPointExistAtCoords call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT vector3_t Native_getScriptedCoverPointCoords(int32_t _coverpoint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x594A1028FC2A3E85);
	ctx->Reset();
	ctx->Push(_coverpoint);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getScriptedCoverPointCoords call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT void Native_taskCombatPed(int32_t _ped, int32_t _targetPed, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF166E48407BAC484);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_targetPed);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskCombatPed call failed" << Log::Endl;
	}
}

EXPORT void Native_taskCombatPedTimed(int32_t _p0, int32_t _ped, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x944F30DCB7096BDE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_ped);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskCombatPedTimed call failed" << Log::Endl;
	}
}

EXPORT void Native_taskSeekCoverFromPos(int32_t _ped, float _x, float _y, float _z, int32_t _duration, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75AC2B60386D89F2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_duration);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskSeekCoverFromPos call failed" << Log::Endl;
	}
}

EXPORT void Native_taskSeekCoverFromPed(int32_t _ped, int32_t _target, int32_t _duration, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84D32B3BEC531324);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_duration);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskSeekCoverFromPed call failed" << Log::Endl;
	}
}

EXPORT void Native_taskSeekCoverToCoverPoint(int32_t _p0, int32_t _p1, float _p2, float _p3, float _p4, int32_t _p5, bool _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD43D95C7A869447F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskSeekCoverToCoverPoint call failed" << Log::Endl;
	}
}

EXPORT void Native_taskSeekCoverToCoords(int32_t _ped, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _p7, bool _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39246A6958EF072C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskSeekCoverToCoords call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPutPedDirectlyIntoCover(int32_t _ped, float _x, float _y, float _z, int32_t _timeout, bool _p5, float _p6, bool _p7, bool _p8, int32_t _p9, bool _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4172393E6BE1FECE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_timeout);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPutPedDirectlyIntoCover call failed" << Log::Endl;
	}
}

EXPORT void Native_taskExitCover(int32_t _p0, int32_t _p1, float _p2, float _p3, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79B258E397854D29);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskExitCover call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPutPedDirectlyIntoMelee(int32_t _ped, int32_t _meleeTarget, float _p2, float _p3, float _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C6CD14A876FFE39);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_meleeTarget);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPutPedDirectlyIntoMelee call failed" << Log::Endl;
	}
}

EXPORT void Native_taskToggleDuck(bool _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC96609B9995EDF8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskToggleDuck call failed" << Log::Endl;
	}
}

EXPORT void Native_taskGuardCurrentPosition(int32_t _p0, float _p1, float _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4A58A47A72E3FCB4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGuardCurrentPosition call failed" << Log::Endl;
	}
}

EXPORT void Native_taskGuardAssignedDefensiveArea(int32_t _p0, float _p1, float _p2, float _p3, float _p4, float _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2A207EEBDF9889B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGuardAssignedDefensiveArea call failed" << Log::Endl;
	}
}

EXPORT void Native_taskGuardSphereDefensiveArea(int32_t _p0, float _p1, float _p2, float _p3, float _p4, float _p5, int32_t _p6, float _p7, float _p8, float _p9, float _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC946FE14BE0EB5E2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGuardSphereDefensiveArea call failed" << Log::Endl;
	}
}

EXPORT void Native_taskStandGuard(int32_t _ped, float _x, float _y, float _z, float _heading, const char* _scenarioName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE032F8BBA959E90);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(_scenarioName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskStandGuard call failed" << Log::Endl;
	}
}

EXPORT void Native_setDriveTaskCruiseSpeed(int32_t _driver, float _cruiseSpeed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C9B84BD7D31D908);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_cruiseSpeed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDriveTaskCruiseSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native_setDriveTaskMaxCruiseSpeed(int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x404A5AA9B9F0B746);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDriveTaskMaxCruiseSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native_setDriveTaskDrivingStyle(int32_t _ped, int32_t _drivingStyle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDACE1BE37D88AF67);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_drivingStyle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDriveTaskDrivingStyle call failed" << Log::Endl;
	}
}

EXPORT void Native_addCoverBlockingArea(float _playerX, float _playerY, float _playerZ, float _radiusX, float _radiusY, float _radiusZ, bool _p6, bool _p7, bool _p8, bool _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45C597097DD7CB81);
	ctx->Reset();
	ctx->Push(_playerX);
	ctx->Push(_playerY);
	ctx->Push(_playerZ);
	ctx->Push(_radiusX);
	ctx->Push(_radiusY);
	ctx->Push(_radiusZ);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addCoverBlockingArea call failed" << Log::Endl;
	}
}

EXPORT void Native_removeAllCoverBlockingAreas() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDB6708C0B46F56D8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeAllCoverBlockingAreas call failed" << Log::Endl;
	}
}

EXPORT void Native__0xFA83CA6776038F64(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA83CA6776038F64);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFA83CA6776038F64 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1F351CF1C6475734(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F351CF1C6475734);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1F351CF1C6475734 call failed" << Log::Endl;
	}
}

EXPORT void Native_taskStartScenarioInPlace(int32_t _ped, const char* _scenarioName, int32_t _unkDelay, bool _playEnterAnim) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x142A02425FF02BD9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_scenarioName);
	ctx->Push(_unkDelay);
	ctx->Push(_playEnterAnim);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskStartScenarioInPlace call failed" << Log::Endl;
	}
}

EXPORT void Native_taskStartScenarioAtPosition(int32_t _ped, const char* _scenarioName, float _x, float _y, float _z, float _heading, int32_t _duration, bool _sittingScenario, bool _teleport) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFA4EFC79F69D4F07);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_scenarioName);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(_duration);
	ctx->Push(_sittingScenario);
	ctx->Push(_teleport);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskStartScenarioAtPosition call failed" << Log::Endl;
	}
}

EXPORT void Native_taskUseNearestScenarioToCoord(int32_t _ped, float _x, float _y, float _z, float _distance, int32_t _duration) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x277F471BA9DB000B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_distance);
	ctx->Push(_duration);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskUseNearestScenarioToCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_taskUseNearestScenarioToCoordWarp(int32_t _ped, float _x, float _y, float _z, float _radius, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x58E2E0F23F6B76C3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskUseNearestScenarioToCoordWarp call failed" << Log::Endl;
	}
}

EXPORT void Native_taskUseNearestScenarioChainToCoord(int32_t _p0, float _p1, float _p2, float _p3, float _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FDA1B3D7E7028B3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskUseNearestScenarioChainToCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_taskUseNearestScenarioChainToCoordWarp(int32_t _p0, float _p1, float _p2, float _p3, float _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97A28E63F0BA5631);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskUseNearestScenarioChainToCoordWarp call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesScenarioExistInArea(float _x, float _y, float _z, float _radius, bool _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A59271FFADD33C1);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesScenarioExistInArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_doesScenarioOfTypeExistInArea(float _p0, float _p1, float _p2, int32_t& _p3, float _p4, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A9D0C2A3BBC86C1);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesScenarioOfTypeExistInArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isScenarioOccupied(float _p0, float _p1, float _p2, float _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x788756D73AC2E07C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScenarioOccupied call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_pedHasUseScenarioTask(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x295E3CCEC879CCD7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pedHasUseScenarioTask call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_playAnimOnRunningScenario(int32_t _ped, const char* _animDict, const char* _animName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x748040460F8DF5DC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_animDict);
	ctx->Push(_animName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native playAnimOnRunningScenario call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesScenarioGroupExist(const char* _scenarioGroup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF9034C136C9E00D3);
	ctx->Reset();
	ctx->Push(_scenarioGroup);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesScenarioGroupExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isScenarioGroupEnabled(const char* _scenarioGroup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x367A09DED4E05B99);
	ctx->Reset();
	ctx->Push(_scenarioGroup);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScenarioGroupEnabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setScenarioGroupEnabled(const char* _scenarioGroup, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02C8E5B49848664E);
	ctx->Reset();
	ctx->Push(_scenarioGroup);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScenarioGroupEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native_resetScenarioGroupsEnabled() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDD902D0349AFAD3A);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetScenarioGroupsEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native_setExclusiveScenarioGroup(const char* _scenarioGroup) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x535E97E1F7FC0C6A);
	ctx->Reset();
	ctx->Push(_scenarioGroup);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setExclusiveScenarioGroup call failed" << Log::Endl;
	}
}

EXPORT void Native_resetExclusiveScenarioGroup() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4202BBCB8684563D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetExclusiveScenarioGroup call failed" << Log::Endl;
	}
}

EXPORT bool Native_isScenarioTypeEnabled(const char* _scenarioType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A815DB3EA088722);
	ctx->Reset();
	ctx->Push(_scenarioType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isScenarioTypeEnabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setScenarioTypeEnabled(const char* _scenarioType, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB47EC4E34FB7EE1);
	ctx->Reset();
	ctx->Push(_scenarioType);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScenarioTypeEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native_resetScenarioTypesEnabled() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D40EE2A7F2B2D6D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetScenarioTypesEnabled call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedActiveInScenario(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA135F9482C82CC3);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedActiveInScenario call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedPlayingBaseClipInScenario(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x621C6E4729388E41);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedPlayingBaseClipInScenario call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPedCanPlayAmbientIdles(int32_t _ped, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8FD89A6240813FD0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCanPlayAmbientIdles call failed" << Log::Endl;
	}
}

EXPORT void Native_taskCombatHatedTargetsInArea(int32_t _ped, float _x, float _y, float _z, float _radius, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4CF5F55DAC3280A0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskCombatHatedTargetsInArea call failed" << Log::Endl;
	}
}

EXPORT void Native_taskCombatHatedTargetsAroundPed(int32_t _ped, float _radius, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7BF835BB9E2698C8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_radius);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskCombatHatedTargetsAroundPed call failed" << Log::Endl;
	}
}

EXPORT void Native_taskCombatHatedTargetsAroundPedTimed(int32_t _p0, float _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2BBA30B854534A0C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskCombatHatedTargetsAroundPedTimed call failed" << Log::Endl;
	}
}

EXPORT void Native_taskThrowProjectile(int32_t _ped, float _x, float _y, float _z, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7285951DBF6B5A51);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskThrowProjectile call failed" << Log::Endl;
	}
}

EXPORT void Native_taskSwapWeapon(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA21C51255B205245);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskSwapWeapon call failed" << Log::Endl;
	}
}

EXPORT void Native_taskReloadWeapon(int32_t _ped, bool _unused) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62D2916F56B9CD2D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_unused);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskReloadWeapon call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedGettingUp(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A74E1D5F2F00EEC);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedGettingUp call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_taskWrithe(int32_t _ped, int32_t _target, int32_t _time, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCDDC2B77CE54AC6E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_time);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskWrithe call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedInWrithe(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEB6D52126E7D640);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedInWrithe call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_openPatrolRoute(const char* _patrolRoute) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA36BFB5EE89F3D82);
	ctx->Reset();
	ctx->Push(_patrolRoute);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native openPatrolRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_closePatrolRoute() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB043ECA801B8CBC1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native closePatrolRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_addPatrolRouteNode(int32_t _p0, const char* _p1, float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EDF950167586B7C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addPatrolRouteNode call failed" << Log::Endl;
	}
}

EXPORT void Native_addPatrolRouteLink(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23083260DEC3A551);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addPatrolRouteLink call failed" << Log::Endl;
	}
}

EXPORT void Native_createPatrolRoute() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF8A443CCC8018DC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createPatrolRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_deletePatrolRoute(const char* _patrolRoute) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7767DD9D65E91319);
	ctx->Reset();
	ctx->Push(_patrolRoute);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native deletePatrolRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_taskPatrol(int32_t _ped, const char* _p1, int32_t _p2, bool _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBDA5DF49D080FE4E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskPatrol call failed" << Log::Endl;
	}
}

EXPORT void Native_taskStayInCover(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE5DA8615A6180789);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskStayInCover call failed" << Log::Endl;
	}
}

EXPORT void Native_addVehicleSubtaskAttackCoord(int32_t _ped, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CF0D8F9BBA0DD75);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addVehicleSubtaskAttackCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_addVehicleSubtaskAttackPed(int32_t _ped, int32_t _ped2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85F462BADC7DA47F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ped2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addVehicleSubtaskAttackPed call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleShootAtPed(int32_t _ped, int32_t _target, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10AB107B887214D8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleShootAtPed call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleAimAtPed(int32_t _ped, int32_t _target) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE41885592B08B097);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleAimAtPed call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleShootAtCoord(int32_t _ped, float _x, float _y, float _z, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5190796ED39C9B6D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleShootAtCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleAimAtCoord(int32_t _ped, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x447C1E9EF844BC0F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleAimAtCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleGotoNavmesh(int32_t _ped, int32_t _vehicle, float _x, float _y, float _z, float _speed, int32_t _behaviorFlag, float _stoppingRange) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x195AEEB13CEFE2EE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_speed);
	ctx->Push(_behaviorFlag);
	ctx->Push(_stoppingRange);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleGotoNavmesh call failed" << Log::Endl;
	}
}

EXPORT void Native_taskGoToCoordWhileAimingAtCoord(int32_t _ped, float _x, float _y, float _z, float _aimAtX, float _aimAtY, float _aimAtZ, float _moveSpeed, bool _p8, float _p9, float _p10, bool _p11, int32_t _flags, bool _p13, int32_t _firingPattern) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11315AB3385B8AC0);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_aimAtX);
	ctx->Push(_aimAtY);
	ctx->Push(_aimAtZ);
	ctx->Push(_moveSpeed);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_flags);
	ctx->Push(_p13);
	ctx->Push(_firingPattern);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGoToCoordWhileAimingAtCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_taskGoToCoordWhileAimingAtEntity(int32_t _p0, float _p1, float _p2, float _p3, int32_t _p4, float _p5, bool _p6, float _p7, float _p8, bool _p9, int32_t _p10, bool _p11, int32_t _p12, int32_t _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2A16444EAD9AE47);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	ctx->Push(_p13);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGoToCoordWhileAimingAtEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_taskGoToCoordAndAimAtHatedEntitiesNearCoord(int32_t _pedHandle, float _goToLocationX, float _goToLocationY, float _goToLocationZ, float _focusLocationX, float _focusLocationY, float _focusLocationZ, float _speed, bool _shootAtEnemies, float _distanceToStopAt, float _noRoadsDistance, bool _unkTrue, int32_t _unkFlag, int32_t _aimingFlag, int32_t _firingPattern) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA55547801EB331FC);
	ctx->Reset();
	ctx->Push(_pedHandle);
	ctx->Push(_goToLocationX);
	ctx->Push(_goToLocationY);
	ctx->Push(_goToLocationZ);
	ctx->Push(_focusLocationX);
	ctx->Push(_focusLocationY);
	ctx->Push(_focusLocationZ);
	ctx->Push(_speed);
	ctx->Push(_shootAtEnemies);
	ctx->Push(_distanceToStopAt);
	ctx->Push(_noRoadsDistance);
	ctx->Push(_unkTrue);
	ctx->Push(_unkFlag);
	ctx->Push(_aimingFlag);
	ctx->Push(_firingPattern);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGoToCoordAndAimAtHatedEntitiesNearCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_taskGoToEntityWhileAimingAtCoord(int32_t _p0, int32_t _p1, float _p2, float _p3, float _p4, float _p5, bool _p6, float _p7, float _p8, bool _p9, bool _p10, int32_t _p11) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04701832B739DCE5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGoToEntityWhileAimingAtCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_taskGoToEntityWhileAimingAtEntity(int32_t _ped, int32_t _entityToWalkTo, int32_t _entityToAimAt, float _speed, bool _shootatEntity, float _p5, float _p6, bool _p7, bool _p8, int32_t _firingPattern) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97465886D35210E9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_entityToWalkTo);
	ctx->Push(_entityToAimAt);
	ctx->Push(_speed);
	ctx->Push(_shootatEntity);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_firingPattern);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskGoToEntityWhileAimingAtEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_setHighFallTask(int32_t _ped, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C825BDC7741D37C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHighFallTask call failed" << Log::Endl;
	}
}

EXPORT void Native_requestWaypointRecording(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9EEFB62EB27B5792);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestWaypointRecording call failed" << Log::Endl;
	}
}

EXPORT bool Native_getIsWaypointRecordingLoaded(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCB4E8BE8A0063C5D);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsWaypointRecordingLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeWaypointRecording(const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFF1B8B4AA1C25DC8);
	ctx->Reset();
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeWaypointRecording call failed" << Log::Endl;
	}
}

EXPORT bool Native_waypointRecordingGetNumPoints(const char* _name, int32_t& _points) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5343532C01A07234);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_points);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waypointRecordingGetNumPoints call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_waypointRecordingGetCoord(const char* _name, int32_t _point, vector3_t& _coord) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FB897405C90B361);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_point);
	alt::INative::Vector3 converted_coord { _coord.x, 0, _coord.y, 0, _coord.z };
	ctx->Push(&converted_coord);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waypointRecordingGetCoord call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_coord.x = converted_coord.x;
	_coord.y = converted_coord.y;
	_coord.z = converted_coord.z;
}

EXPORT float Native_waypointRecordingGetSpeedAtPoint(const char* _name, int32_t _point) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x005622AEBC33ACA9);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_point);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waypointRecordingGetSpeedAtPoint call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT bool Native_waypointRecordingGetClosestWaypoint(const char* _name, float _x, float _y, float _z, int32_t& _point) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB629A298081F876F);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_point);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waypointRecordingGetClosestWaypoint call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_taskFollowWaypointRecording(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0759591819534F7B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskFollowWaypointRecording call failed" << Log::Endl;
	}
}

EXPORT bool Native_isWaypointPlaybackGoingOnForPed(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE03B3F2D3DC59B64);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isWaypointPlaybackGoingOnForPed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getPedWaypointProgress(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2720AAA75001E094);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedWaypointProgress call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT float Native_getPedWaypointDistance(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6A877C64CAF1BC5);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedWaypointDistance call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native_setPedWaypointRouteOffset(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED98E10B0AFCE4B4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedWaypointRouteOffset call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT float Native_getWaypointDistanceAlongRoute(const char* _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5B769058763E497);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWaypointDistanceAlongRoute call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT bool Native_waypointPlaybackGetIsPaused(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x701375A7D43F01CB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waypointPlaybackGetIsPaused call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_waypointPlaybackPause(int32_t _p0, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F342546AA06FED5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waypointPlaybackPause call failed" << Log::Endl;
	}
}

EXPORT void Native_waypointPlaybackResume(int32_t _p0, bool _p1, int32_t _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x244F70C84C547D2D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waypointPlaybackResume call failed" << Log::Endl;
	}
}

EXPORT void Native_waypointPlaybackOverrideSpeed(int32_t _p0, float _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D7D2B47FA788E85);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waypointPlaybackOverrideSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native_waypointPlaybackUseDefaultSpeed(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6599D834B12D0800);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waypointPlaybackUseDefaultSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native_useWaypointRecordingAsAssistedMovementRoute(const char* _name, bool _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5A353B8E6B1095B5);
	ctx->Reset();
	ctx->Push(_name);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native useWaypointRecordingAsAssistedMovementRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_waypointPlaybackStartAimingAtPed(int32_t _p0, int32_t _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20E330937C399D29);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waypointPlaybackStartAimingAtPed call failed" << Log::Endl;
	}
}

EXPORT void Native_waypointPlaybackStartAimingAtCoord(int32_t _p0, float _p1, float _p2, float _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8968400D900ED8B3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waypointPlaybackStartAimingAtCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_waypointPlaybackStartShootingAtPed(int32_t _p0, int32_t _p1, bool _p2, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE70BA7B90F8390DC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waypointPlaybackStartShootingAtPed call failed" << Log::Endl;
	}
}

EXPORT void Native_waypointPlaybackStartShootingAtCoord(int32_t _p0, float _p1, float _p2, float _p3, bool _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x057A25CFCC9DB671);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waypointPlaybackStartShootingAtCoord call failed" << Log::Endl;
	}
}

EXPORT void Native_waypointPlaybackStopAimingOrShooting(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x47EFA040EBB8E2EA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native waypointPlaybackStopAimingOrShooting call failed" << Log::Endl;
	}
}

EXPORT void Native_assistedMovementRequestRoute(const char* _route) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x817268968605947A);
	ctx->Reset();
	ctx->Push(_route);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native assistedMovementRequestRoute call failed" << Log::Endl;
	}
}

EXPORT void Native_assistedMovementRemoveRoute(const char* _route) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3548536485DD792B);
	ctx->Reset();
	ctx->Push(_route);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native assistedMovementRemoveRoute call failed" << Log::Endl;
	}
}

EXPORT bool Native_assistedMovementIsRouteLoaded(const char* _route) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60F9A4393A21F741);
	ctx->Reset();
	ctx->Push(_route);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native assistedMovementIsRouteLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_assistedMovementSetRouteProperties(const char* _route, int32_t _props) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5002D78B7162E1B);
	ctx->Reset();
	ctx->Push(_route);
	ctx->Push(_props);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native assistedMovementSetRouteProperties call failed" << Log::Endl;
	}
}

EXPORT void Native_assistedMovementOverrideLoadDistanceThisFrame(float _dist) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x13945951E16EF912);
	ctx->Reset();
	ctx->Push(_dist);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native assistedMovementOverrideLoadDistanceThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_taskVehicleFollowWaypointRecording(int32_t _ped, int32_t _vehicle, const char* _WPRecording, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, float _p7, bool _p8, float _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3123FAA6DB1CF7ED);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_WPRecording);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskVehicleFollowWaypointRecording call failed" << Log::Endl;
	}
}

EXPORT bool Native_isWaypointPlaybackGoingOnForVehicle(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF5134943EA29868C);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isWaypointPlaybackGoingOnForVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getVehicleWaypointProgress(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9824CFF8FC66E159);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleWaypointProgress call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehicleWaypointTargetPoint(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x416B62AC8B9E5BBD);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleWaypointTargetPoint call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_vehicleWaypointPlaybackPause(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8A4E6AC373666BC5);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native vehicleWaypointPlaybackPause call failed" << Log::Endl;
	}
}

EXPORT void Native_vehicleWaypointPlaybackResume(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC04FCAA7839D492);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native vehicleWaypointPlaybackResume call failed" << Log::Endl;
	}
}

EXPORT void Native_vehicleWaypointPlaybackUseDefaultSpeed(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CEB25A7D2848963);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native vehicleWaypointPlaybackUseDefaultSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native_vehicleWaypointPlaybackOverrideSpeed(int32_t _vehicle, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x121F0593E0A431D7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native vehicleWaypointPlaybackOverrideSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native_taskSetBlockingOfNonTemporaryEvents(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90D2156198831D69);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskSetBlockingOfNonTemporaryEvents call failed" << Log::Endl;
	}
}

EXPORT void Native_taskForceMotionState(int32_t _ped, int32_t _state, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F056E1AFFEF17AB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_state);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskForceMotionState call failed" << Log::Endl;
	}
}

EXPORT void Native_taskMoveNetworkByName(int32_t _ped, const char* _task, float _multiplier, bool _p3, const char* _animDict, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D537BA194896636);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_task);
	ctx->Push(_multiplier);
	ctx->Push(_p3);
	ctx->Push(_animDict);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskMoveNetworkByName call failed" << Log::Endl;
	}
}

EXPORT void Native_taskMoveNetworkAdvancedByName(int32_t _ped, const char* _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, int32_t _p8, float _p9, bool _p10, const char* _animDict, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5B35BEA41919ACB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_animDict);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskMoveNetworkAdvancedByName call failed" << Log::Endl;
	}
}

EXPORT void Native_taskMoveNetworkByNameWithInitParams(int32_t _ped, const char* _p1, int32_t& _data, float _p3, bool _p4, const char* _animDict, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D45B0B355C5E0C9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_data);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_animDict);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskMoveNetworkByNameWithInitParams call failed" << Log::Endl;
	}
}

EXPORT void Native__0x29682E2CCF21E9B5(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8, int32_t _p9, int32_t _p10, int32_t _p11, int32_t _p12, int32_t _p13) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29682E2CCF21E9B5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	ctx->Push(_p13);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x29682E2CCF21E9B5 call failed" << Log::Endl;
	}
}

EXPORT bool Native_isTaskMoveNetworkActive(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x921CE12C489C4C41);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isTaskMoveNetworkActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isTaskMoveNetworkReadyForTransition(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30ED88D5E0C56A37);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isTaskMoveNetworkReadyForTransition call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_requestTaskMoveNetworkStateTransition(int32_t _ped, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD01015C7316AE176);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestTaskMoveNetworkStateTransition call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0xAB13A5565480B6D9(int32_t _ped, const char* _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB13A5565480B6D9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAB13A5565480B6D9 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT const char* Native_getTaskMoveNetworkState(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x717E4D1F2048376D);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTaskMoveNetworkState call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT void Native__0x8423541E8B3A1589(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8423541E8B3A1589);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8423541E8B3A1589 call failed" << Log::Endl;
	}
}

EXPORT void Native_setTaskMoveNetworkSignalFloat(int32_t _ped, const char* _signalName, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD5BB4025AE449A4E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_signalName);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTaskMoveNetworkSignalFloat call failed" << Log::Endl;
	}
}

EXPORT void Native_setTaskMoveNetworkSignalFloat2(int32_t _ped, const char* _signalName, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x373EF409B82697A3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_signalName);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTaskMoveNetworkSignalFloat2 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8634CEF2522D987B(int32_t _ped, const char* _p1, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8634CEF2522D987B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8634CEF2522D987B call failed" << Log::Endl;
	}
}

EXPORT void Native_setTaskMoveNetworkSignalBool(int32_t _ped, const char* _signalName, bool _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB0A6CFD2C69C1088);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_signalName);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTaskMoveNetworkSignalBool call failed" << Log::Endl;
	}
}

EXPORT float Native_getTaskMoveNetworkSignalFloat(int32_t _ped, const char* _signalName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44AB0B3AFECCE242);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_signalName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTaskMoveNetworkSignalFloat call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT bool Native_getTaskMoveNetworkSignalBool(int32_t _ped, const char* _signalName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7FFBA498E4AAF67);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_signalName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTaskMoveNetworkSignalBool call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getTaskMoveNetworkEvent(int32_t _ped, const char* _eventName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4F47213DF45A64C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_eventName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTaskMoveNetworkEvent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native__0x0FFB3C758E8C07B9(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0FFB3C758E8C07B9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0FFB3C758E8C07B9 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isMoveBlendRatioStill(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x349CE7B56DAFD95C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMoveBlendRatioStill call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isMoveBlendRatioWalking(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF133BBBE91E1691F);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMoveBlendRatioWalking call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isMoveBlendRatioRunning(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4D8636C0199A939);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMoveBlendRatioRunning call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isMoveBlendRatioSprinting(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24A2AD74FA9814E2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMoveBlendRatioSprinting call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedStill(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC29253EEF8F0180);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedStill call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedWalking(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDE4C184B2B9B071A);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedWalking call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedRunning(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5286FFC176F28A2);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedRunning call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedSprinting(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57E457CD2C0FC168);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedSprinting call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedStrafing(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE45B7F222DE47E09);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedStrafing call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_taskSynchronizedScene(int32_t _ped, int32_t _scene, const char* _animDictionary, const char* _animationName, float _speed, float _speedMultiplier, int32_t _duration, int32_t _flag, float _playbackRate, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEA929141F699854);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_scene);
	ctx->Push(_animDictionary);
	ctx->Push(_animationName);
	ctx->Push(_speed);
	ctx->Push(_speedMultiplier);
	ctx->Push(_duration);
	ctx->Push(_flag);
	ctx->Push(_playbackRate);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskSynchronizedScene call failed" << Log::Endl;
	}
}

EXPORT void Native_taskAgitatedAction(int32_t _ped, int32_t _ped2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x19D1B791CB3670FE);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ped2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskAgitatedAction call failed" << Log::Endl;
	}
}

EXPORT void Native_taskSweepAimEntity(int32_t _ped, const char* _anim, const char* _p2, const char* _p3, const char* _p4, int32_t _p5, int32_t _vehicle, float _p7, float _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2047C02158D6405A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_anim);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_vehicle);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskSweepAimEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_updateTaskSweepAimEntity(int32_t _ped, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4973DBDBE6E44B3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native updateTaskSweepAimEntity call failed" << Log::Endl;
	}
}

EXPORT void Native_taskSweepAimPosition(int32_t _p0, int32_t& _p1, int32_t& _p2, int32_t& _p3, int32_t& _p4, int32_t _p5, float _p6, float _p7, float _p8, float _p9, float _p10) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7AFE8FDC10BC07D2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskSweepAimPosition call failed" << Log::Endl;
	}
}

EXPORT void Native_updateTaskSweepAimPosition(int32_t _p0, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB106883F5201FC4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native updateTaskSweepAimPosition call failed" << Log::Endl;
	}
}

EXPORT void Native_taskArrestPed(int32_t _ped, int32_t _target) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3B9A78A178572B1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_target);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native taskArrestPed call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedRunningArrestTask(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DC52677769B4AE0);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedRunningArrestTask call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedBeingArrested(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90A09F3A45FED688);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedBeingArrested call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_uncuffPed(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67406F2C8F87FC4F);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native uncuffPed call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedCuffed(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74E559B3BC910685);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedCuffed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_createVehicle(int32_t _modelHash, float _x, float _y, float _z, float _heading, bool _isNetwork, bool _bScriptHostVeh, bool _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF35D0D2583051B0);
	ctx->Reset();
	ctx->Push(_modelHash);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(_isNetwork);
	ctx->Push(_bScriptHostVeh);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createVehicle call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_deleteVehicle(int32_t& _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA386986E786A54F);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native deleteVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native__0x7D6F9A3EF26136A0(int32_t _vehicle, bool _toggle, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D6F9A3EF26136A0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7D6F9A3EF26136A0 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleCanBeLockedOn(int32_t _vehicle, bool _canBeLockedOn, bool _unk) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DDA078D12879EEE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_canBeLockedOn);
	ctx->Push(_unk);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleCanBeLockedOn call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleAllowNoPassengersLockon(int32_t _veh, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5D14D4154BFE7B2C);
	ctx->Reset();
	ctx->Push(_veh);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleAllowNoPassengersLockon call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehicleHomingLockonState(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6B0E8CFC3633BF0);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleHomingLockonState call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0x6EAAEFC76ACC311F(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6EAAEFC76ACC311F);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6EAAEFC76ACC311F call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x407DC5E97DB1A4D3(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x407DC5E97DB1A4D3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x407DC5E97DB1A4D3 call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleModel(int32_t _vehicle, int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x423E8DE37D934D89);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleModel call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_doesScriptVehicleGeneratorExist(int32_t _vehicleGenerator) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6086BC836400876);
	ctx->Reset();
	ctx->Push(_vehicleGenerator);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesScriptVehicleGeneratorExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_createScriptVehicleGenerator(float _x, float _y, float _z, float _heading, float _p4, float _p5, int32_t _modelHash, int32_t _p7, int32_t _p8, int32_t _p9, int32_t _p10, bool _p11, bool _p12, bool _p13, bool _p14, bool _p15, int32_t _p16) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DEF883114668116);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_heading);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_modelHash);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_p10);
	ctx->Push(_p11);
	ctx->Push(_p12);
	ctx->Push(_p13);
	ctx->Push(_p14);
	ctx->Push(_p15);
	ctx->Push(_p16);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createScriptVehicleGenerator call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_deleteScriptVehicleGenerator(int32_t _vehicleGenerator) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22102C9ABFCF125D);
	ctx->Reset();
	ctx->Push(_vehicleGenerator);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native deleteScriptVehicleGenerator call failed" << Log::Endl;
	}
}

EXPORT void Native_setScriptVehicleGenerator(int32_t _vehicleGenerator, bool _enabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD9D620E0AC6DC4B0);
	ctx->Reset();
	ctx->Push(_vehicleGenerator);
	ctx->Push(_enabled);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setScriptVehicleGenerator call failed" << Log::Endl;
	}
}

EXPORT void Native_setAllVehicleGeneratorsActiveInArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, bool _p6, bool _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC12321827687FE4D);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAllVehicleGeneratorsActiveInArea call failed" << Log::Endl;
	}
}

EXPORT void Native_setAllVehicleGeneratorsActive() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34AD89078831A4BC);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAllVehicleGeneratorsActive call failed" << Log::Endl;
	}
}

EXPORT void Native_setAllLowPriorityVehicleGeneratorsActive(bool _active) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x608207E7A8FB787C);
	ctx->Reset();
	ctx->Push(_active);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAllLowPriorityVehicleGeneratorsActive call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9A75585FB2E54FAD(float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A75585FB2E54FAD);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9A75585FB2E54FAD call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0A436B8643716D14() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A436B8643716D14);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0A436B8643716D14 call failed" << Log::Endl;
	}
}

EXPORT bool Native_setVehicleOnGroundProperly(int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x49733E92263139D1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleOnGroundProperly call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_setVehicleUseCutsceneWheelCompression(int32_t _p0, bool _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE023E8AC4EF7C117);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleUseCutsceneWheelCompression call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isVehicleStuckOnRoof(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB497F06B288DCFDF);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleStuckOnRoof call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_addVehicleUpsidedownCheck(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB72E26D81006005B);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addVehicleUpsidedownCheck call failed" << Log::Endl;
	}
}

EXPORT void Native_removeVehicleUpsidedownCheck(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC53EB42A499A7E90);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeVehicleUpsidedownCheck call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleStopped(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5721B434AD84D57A);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleStopped call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getVehicleNumberOfPassengers(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24CB2137731FFE89);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleNumberOfPassengers call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehicleMaxNumberOfPassengers(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7C4F2C6E744A550);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleMaxNumberOfPassengers call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehicleModelNumberOfSeats(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2AD93716F184EDA4);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModelNumberOfSeats call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isSeatWarpOnly(int32_t _vehicle, int32_t _seatIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7F203E31F96F6A1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isSeatWarpOnly call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isTurretSeat(int32_t _vehicle, int32_t _seatIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE33FFA906CE74880);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isTurretSeat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_doesVehicleAllowRappel(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E417C547182C84D);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesVehicleAllowRappel call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleDensityMultiplierThisFrame(float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x245A6883D966D537);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDensityMultiplierThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setRandomVehicleDensityMultiplierThisFrame(float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3B3359379FE77D3);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRandomVehicleDensityMultiplierThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setParkedVehicleDensityMultiplierThisFrame(float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEAE6DCC7EEE3DB1D);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setParkedVehicleDensityMultiplierThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setDisableRandomTrainsThisFrame(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4B8E3D1917BC86B);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDisableRandomTrainsThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setAmbientVehicleRangeMultiplierThisFrame(float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90B6DA738A9A25DA);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAmbientVehicleRangeMultiplierThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setFarDrawVehicles(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26324F33423F3CC3);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFarDrawVehicles call failed" << Log::Endl;
	}
}

EXPORT void Native_setNumberOfParkedVehicles(int32_t _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCAA15F13EBD417FF);
	ctx->Reset();
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setNumberOfParkedVehicles call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleDoorsLocked(int32_t _vehicle, int32_t _doorLockStatus) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB664292EAECF7FA6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorLockStatus);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDoorsLocked call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleIndividualDoorsLocked(int32_t _vehicle, int32_t _doorId, int32_t _doorLockStatus) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE70724027F85BCD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	ctx->Push(_doorLockStatus);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleIndividualDoorsLocked call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleHasMutedSirens(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD8050E0EB60CF274);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleHasMutedSirens call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleDoorsLockedForPlayer(int32_t _vehicle, int32_t _player, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x517AAF684BB50CD1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_player);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDoorsLockedForPlayer call failed" << Log::Endl;
	}
}

EXPORT bool Native_getVehicleDoorsLockedForPlayer(int32_t _vehicle, int32_t _player) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6AF6CB341349015);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_player);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleDoorsLockedForPlayer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleDoorsLockedForAllPlayers(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2F80B8D040727CC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDoorsLockedForAllPlayers call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleDoorsLockedForNonScriptPlayers(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9737A37136F07E75);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDoorsLockedForNonScriptPlayers call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleDoorsLockedForTeam(int32_t _vehicle, int32_t _team, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB81F6D4A8F5EEBA8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_team);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDoorsLockedForTeam call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleDoorsLockedForUnk(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x203B527D1B77904C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDoorsLockedForUnk call failed" << Log::Endl;
	}
}

EXPORT void Native__0x76D26A22750E849E(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76D26A22750E849E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x76D26A22750E849E call failed" << Log::Endl;
	}
}

EXPORT void Native_explodeVehicle(int32_t _vehicle, bool _isAudible, bool _isInvisible) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA71116ADF5B514C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_isAudible);
	ctx->Push(_isInvisible);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native explodeVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleOutOfControl(int32_t _vehicle, bool _killDriver, bool _explodeOnImpact) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF19D095E42D430CC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_killDriver);
	ctx->Push(_explodeOnImpact);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleOutOfControl call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleTimedExplosion(int32_t _vehicle, int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E0A74E1002380B1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleTimedExplosion call failed" << Log::Endl;
	}
}

EXPORT void Native_addVehiclePhoneExplosiveDevice(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99AD4CCCB128CBC9);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addVehiclePhoneExplosiveDevice call failed" << Log::Endl;
	}
}

EXPORT void Native_clearVehiclePhoneExplosiveDevice() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA3F739ABDDCF21F);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearVehiclePhoneExplosiveDevice call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasVehiclePhoneExplosiveDevice() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6ADAABD3068C5235);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasVehiclePhoneExplosiveDevice call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_detonateVehiclePhoneExplosiveDevice() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEF49CF0270307CBE);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native detonateVehiclePhoneExplosiveDevice call failed" << Log::Endl;
	}
}

EXPORT void Native_setTaxiLights(int32_t _vehicle, bool _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x598803E85E8448D9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTaxiLights call failed" << Log::Endl;
	}
}

EXPORT bool Native_isTaxiLightOn(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7504C0F113AB50FC);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isTaxiLightOn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isVehicleInGarageArea(const char* _garageName, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEE4490CD57BB3C2);
	ctx->Reset();
	ctx->Push(_garageName);
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleInGarageArea call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleColours(int32_t _vehicle, int32_t _colorPrimary, int32_t _colorSecondary) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F1D4BE3A7F24601);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_colorPrimary);
	ctx->Push(_colorSecondary);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleColours call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleFullbeam(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8B7FD87F0DDB421E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleFullbeam call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleIsRacing(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x07116E24E9D1929D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleIsRacing call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleCustomPrimaryColour(int32_t _vehicle, int32_t _r, int32_t _g, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7141766F91D15BEA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleCustomPrimaryColour call failed" << Log::Endl;
	}
}

EXPORT void Native_getVehicleCustomPrimaryColour(int32_t _vehicle, int32_t& _r, int32_t& _g, int32_t& _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB64CF2CCA9D95F52);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleCustomPrimaryColour call failed" << Log::Endl;
	}
}

EXPORT void Native_clearVehicleCustomPrimaryColour(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55E1D2758F34E437);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearVehicleCustomPrimaryColour call failed" << Log::Endl;
	}
}

EXPORT bool Native_getIsVehiclePrimaryColourCustom(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF095C0405307B21B);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsVehiclePrimaryColourCustom call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleCustomSecondaryColour(int32_t _vehicle, int32_t _r, int32_t _g, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36CED73BFED89754);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleCustomSecondaryColour call failed" << Log::Endl;
	}
}

EXPORT void Native_getVehicleCustomSecondaryColour(int32_t _vehicle, int32_t& _r, int32_t& _g, int32_t& _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8389CD56CA8072DC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleCustomSecondaryColour call failed" << Log::Endl;
	}
}

EXPORT void Native_clearVehicleCustomSecondaryColour(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FFBDEEC3E8E2009);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearVehicleCustomSecondaryColour call failed" << Log::Endl;
	}
}

EXPORT bool Native_getIsVehicleSecondaryColourCustom(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x910A32E7AAD2656C);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsVehicleSecondaryColourCustom call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleEnveffScale(int32_t _vehicle, float _fade) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3AFDC536C3D01674);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_fade);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleEnveffScale call failed" << Log::Endl;
	}
}

EXPORT float Native_getVehicleEnveffScale(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA82819CAC9C4C403);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleEnveffScale call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setCanResprayVehicle(int32_t _vehicle, bool _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52BBA29D5EC69356);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCanResprayVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native__0xAB31EF4DE6800CE9(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB31EF4DE6800CE9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAB31EF4DE6800CE9 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1B212B26DD3C04DF(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1B212B26DD3C04DF);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1B212B26DD3C04DF call failed" << Log::Endl;
	}
}

EXPORT void Native_forceSubmarineSurfaceMode(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33506883545AC0DF);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forceSubmarineSurfaceMode call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC67DB108A9ADE3BE(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC67DB108A9ADE3BE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC67DB108A9ADE3BE call failed" << Log::Endl;
	}
}

EXPORT void Native_setSubmarineCrushDepths(int32_t _vehicle, bool _p1, float _depth1, float _depth2, float _depth3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC59872A5134879C7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_depth1);
	ctx->Push(_depth2);
	ctx->Push(_depth3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSubmarineCrushDepths call failed" << Log::Endl;
	}
}

EXPORT bool Native_getSubmarineIsBelowFirstCrushDepth(int32_t _submarine) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E71D0B300B7AA79);
	ctx->Reset();
	ctx->Push(_submarine);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getSubmarineIsBelowFirstCrushDepth call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getSubmarineCrushDepthWarningState(int32_t _submarine) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x093D6DDCA5B8FBAE);
	ctx->Reset();
	ctx->Push(_submarine);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getSubmarineCrushDepthWarningState call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0xED5EDE9E676643C9(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED5EDE9E676643C9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xED5EDE9E676643C9 call failed" << Log::Endl;
	}
}

EXPORT void Native_setBoatAnchor(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75DBEC174AEEAD10);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBoatAnchor call failed" << Log::Endl;
	}
}

EXPORT bool Native_canAnchorBoatHere(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26C10ECBDA5D043B);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canAnchorBoatHere call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_canAnchorBoatHere2(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24F4121D07579880);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canAnchorBoatHere2 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setBoatFrozenWhenAnchored(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE3EBAAE484798530);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBoatFrozenWhenAnchored call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB28B1FE5BFADD7F5(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB28B1FE5BFADD7F5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB28B1FE5BFADD7F5 call failed" << Log::Endl;
	}
}

EXPORT void Native_setBoatMovementResistance(int32_t _vehicle, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE842A9398079BD82);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBoatMovementResistance call failed" << Log::Endl;
	}
}

EXPORT bool Native_isBoatAnchoredAndFrozen(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB0AD1238A709B1A2);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isBoatAnchoredAndFrozen call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setBoatSinksWhenWrecked(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F719973E1445BA2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBoatSinksWhenWrecked call failed" << Log::Endl;
	}
}

EXPORT void Native_setBoatIsSinking(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBD32E46AA95C1DD2);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBoatIsSinking call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleSiren(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4924635A19EB37D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleSiren call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleSirenOn(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C9BF537BE2634B2);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleSirenOn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isVehicleSirenAudioOn(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5CC40FBCB586380);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleSirenAudioOn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleStrong(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E8C8727991A8A0B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleStrong call failed" << Log::Endl;
	}
}

EXPORT void Native_removeVehicleStuckCheck(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8386BFB614D06749);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeVehicleStuckCheck call failed" << Log::Endl;
	}
}

EXPORT void Native_getVehicleColours(int32_t _vehicle, int32_t& _colorPrimary, int32_t& _colorSecondary) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA19435F193E081AC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_colorPrimary);
	ctx->Push(_colorSecondary);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleColours call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleSeatFree(int32_t _vehicle, int32_t _seatIndex, bool _isTaskRunning) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x22AC59A870E6A669);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	ctx->Push(_isTaskRunning);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleSeatFree call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getPedInVehicleSeat(int32_t _vehicle, int32_t _seatIndex, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB40DD2270B65366);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedInVehicleSeat call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getLastPedInVehicleSeat(int32_t _vehicle, int32_t _seatIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83F969AA1EE2A664);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getLastPedInVehicleSeat call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getVehicleLightsState(int32_t _vehicle, bool& _lightsOn, bool& _highbeamsOn) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB91B4C20085BD12F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_lightsOn);
	ctx->Push(_highbeamsOn);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleLightsState call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isVehicleTyreBurst(int32_t _vehicle, int32_t _wheelID, bool _completely) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA291848A0815CA9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelID);
	ctx->Push(_completely);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleTyreBurst call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleForwardSpeed(int32_t _vehicle, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB54A438726D25D5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleForwardSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6501129C9E0FFA05(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6501129C9E0FFA05);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6501129C9E0FFA05 call failed" << Log::Endl;
	}
}

EXPORT void Native_bringVehicleToHalt(int32_t _vehicle, float _distance, int32_t _duration, bool _unknown) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x260BE8F09E326A20);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_distance);
	ctx->Push(_duration);
	ctx->Push(_unknown);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native bringVehicleToHalt call failed" << Log::Endl;
	}
}

EXPORT void Native__0xDCE97BDF8A0EABC8(int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCE97BDF8A0EABC8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDCE97BDF8A0EABC8 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9849DE24FCF23CCC(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9849DE24FCF23CCC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9849DE24FCF23CCC call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8664170EF165C4A6(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8664170EF165C4A6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8664170EF165C4A6 call failed" << Log::Endl;
	}
}

EXPORT void Native_stopBringVehicleToHalt(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C06330BFDDA182E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopBringVehicleToHalt call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleBeingHalted(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC69BB1D832A710EF);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleBeingHalted call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setForkliftForkHeight(int32_t _vehicle, float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37EBBF3117BD6A25);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setForkliftForkHeight call failed" << Log::Endl;
	}
}

EXPORT bool Native_isEntityAttachedToHandlerFrame(int32_t _vehicle, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57715966069157AD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isEntityAttachedToHandlerFrame call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isAnyEntityAttachedToHandlerFrame(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x62CA17B74C435651);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAnyEntityAttachedToHandlerFrame call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_findVehicleCarryingThisEntity(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x375E7FC44F21C8AB);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native findVehicleCarryingThisEntity call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isHandlerFrameAboveContainer(int32_t _vehicle, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89D630CF5EA96D23);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isHandlerFrameAboveContainer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x6A98C2ECF57FA5D4(int32_t _vehicle, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A98C2ECF57FA5D4);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6A98C2ECF57FA5D4 call failed" << Log::Endl;
	}
}

EXPORT void Native_detachContainerFromHandlerFrame(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C0043FDFF6436BC);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native detachContainerFromHandlerFrame call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8AA9180DE2FEDD45(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8AA9180DE2FEDD45);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8AA9180DE2FEDD45 call failed" << Log::Endl;
	}
}

EXPORT void Native_setBoatDisableAvoidance(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A6A279F3AA4FD70);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBoatDisableAvoidance call failed" << Log::Endl;
	}
}

EXPORT bool Native_isHeliLandingAreaBlocked(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x634148744F385576);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isHeliLandingAreaBlocked call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x107A473D7A6647A9(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x107A473D7A6647A9);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x107A473D7A6647A9 call failed" << Log::Endl;
	}
}

EXPORT void Native_setHeliTurbulenceScalar(int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6F13851780394DA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHeliTurbulenceScalar call failed" << Log::Endl;
	}
}

EXPORT void Native_setCarBootOpen(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC40CBF7B90CA77C);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCarBootOpen call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleTyreBurst(int32_t _vehicle, int32_t _index, bool _onRim, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC6A202EE4960385);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_index);
	ctx->Push(_onRim);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleTyreBurst call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleDoorsShut(int32_t _vehicle, bool _closeInstantly) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x781B3D62BB013EF5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_closeInstantly);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDoorsShut call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleTyresCanBurst(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEB9DC3C7D8596C46);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleTyresCanBurst call failed" << Log::Endl;
	}
}

EXPORT bool Native_getVehicleTyresCanBurst(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x678B9BB8C3F58FEB);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleTyresCanBurst call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleWheelsCanBreak(int32_t _vehicle, bool _enabled) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29B18B4FD460CA8F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_enabled);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleWheelsCanBreak call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleDoorOpen(int32_t _vehicle, int32_t _doorId, bool _loose, bool _openInstantly) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7C65DAC73C35C862);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	ctx->Push(_loose);
	ctx->Push(_openInstantly);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDoorOpen call failed" << Log::Endl;
	}
}

EXPORT void Native__0x3B458DDB57038F08(int32_t _vehicle, int32_t _doorId, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B458DDB57038F08);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3B458DDB57038F08 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA247F9EF01D8082E(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA247F9EF01D8082E);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA247F9EF01D8082E call failed" << Log::Endl;
	}
}

EXPORT void Native_removeVehicleWindow(int32_t _vehicle, int32_t _windowIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA711568EEDB43069);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_windowIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeVehicleWindow call failed" << Log::Endl;
	}
}

EXPORT void Native_rollDownWindows(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x85796B0549DDE156);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native rollDownWindows call failed" << Log::Endl;
	}
}

EXPORT void Native_rollDownWindow(int32_t _vehicle, int32_t _windowIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7AD9E6CE657D69E3);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_windowIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native rollDownWindow call failed" << Log::Endl;
	}
}

EXPORT void Native_rollUpWindow(int32_t _vehicle, int32_t _windowIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x602E548F46E24D59);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_windowIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native rollUpWindow call failed" << Log::Endl;
	}
}

EXPORT void Native_smashVehicleWindow(int32_t _vehicle, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9E5B5E4D2CCD2259);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native smashVehicleWindow call failed" << Log::Endl;
	}
}

EXPORT void Native_fixVehicleWindow(int32_t _vehicle, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x772282EBEB95E682);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native fixVehicleWindow call failed" << Log::Endl;
	}
}

EXPORT void Native_popOutVehicleWindscreen(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D645D59FB5F5AD3);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native popOutVehicleWindscreen call failed" << Log::Endl;
	}
}

EXPORT void Native_ejectJb700Roof(int32_t _vehicle, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE38CB9D7D39FDBCC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native ejectJb700Roof call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleLights(int32_t _vehicle, int32_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x34E710FF01247C5A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleLights call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleUsePlayerLightSettings(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC45C27EF50F36ADC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleUsePlayerLightSettings call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleLightsMode(int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1FD09E7390A74D54);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleLightsMode call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleAlarm(int32_t _vehicle, bool _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCDE5E70C1DDB954C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleAlarm call failed" << Log::Endl;
	}
}

EXPORT void Native_startVehicleAlarm(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8FF7AB45305C345);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startVehicleAlarm call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleAlarmActivated(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4319E335B71FFF34);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleAlarmActivated call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleInteriorlight(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC2042F090AF6AD3);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleInteriorlight call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8821196D91FA2DE5(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8821196D91FA2DE5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8821196D91FA2DE5 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleLightMultiplier(int32_t _vehicle, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB385454F8791F57C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleLightMultiplier call failed" << Log::Endl;
	}
}

EXPORT void Native_attachVehicleToTrailer(int32_t _vehicle, int32_t _trailer, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3C7D42D58F770B54);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_trailer);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachVehicleToTrailer call failed" << Log::Endl;
	}
}

EXPORT void Native_attachVehicleOnToTrailer(int32_t _vehicle, int32_t _trailer, float _offsetX, float _offsetY, float _offsetZ, float _coordsX, float _coordsY, float _coordsZ, float _rotationX, float _rotationY, float _rotationZ, float _disableCollisions) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16B5E274BDE402F8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_trailer);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	ctx->Push(_coordsX);
	ctx->Push(_coordsY);
	ctx->Push(_coordsZ);
	ctx->Push(_rotationX);
	ctx->Push(_rotationY);
	ctx->Push(_rotationZ);
	ctx->Push(_disableCollisions);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachVehicleOnToTrailer call failed" << Log::Endl;
	}
}

EXPORT void Native_stabiliseEntityAttachedToHeli(int32_t _vehicle, int32_t _entity, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x374706271354CB18);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_entity);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stabiliseEntityAttachedToHeli call failed" << Log::Endl;
	}
}

EXPORT void Native_detachVehicleFromTrailer(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90532EDF0D2BDD86);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native detachVehicleFromTrailer call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleAttachedToTrailer(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE7CF3C4F9F489F0C);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleAttachedToTrailer call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setTrailerInverseMassScale(int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A8F319B392E7B3F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTrailerInverseMassScale call failed" << Log::Endl;
	}
}

EXPORT void Native_setTrailerLegsRaised(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95CF53B3D687F9FA);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTrailerLegsRaised call failed" << Log::Endl;
	}
}

EXPORT void Native_setTrailerLegsLowered(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x878C75C09FBDB942);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTrailerLegsLowered call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleTyreFixed(int32_t _vehicle, int32_t _tyreIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E13FC662B882D1D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_tyreIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleTyreFixed call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleNumberPlateText(int32_t _vehicle, const char* _plateText) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x95A88F0B409CDA47);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_plateText);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleNumberPlateText call failed" << Log::Endl;
	}
}

EXPORT const char* Native_getVehicleNumberPlateText(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7CE1CCB9B293020E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleNumberPlateText call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT int32_t Native_getNumberOfVehicleNumberPlates() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C4D6B2644F458CB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumberOfVehicleNumberPlates call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setVehicleNumberPlateTextIndex(int32_t _vehicle, int32_t _plateIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9088EB5A43FFB0A1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_plateIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleNumberPlateTextIndex call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehicleNumberPlateTextIndex(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF11BC2DD9A3E7195);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleNumberPlateTextIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setRandomTrains(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80D9F74197EA47D9);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRandomTrains call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_createMissionTrain(int32_t _unkVariation, float _x, float _y, float _z, bool _direction, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x63C6CCA8E68AE8C8);
	ctx->Reset();
	ctx->Push(_unkVariation);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_direction);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createMissionTrain call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_switchTrainTrack(int32_t _trackId, bool _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD813BB7DB977F20);
	ctx->Reset();
	ctx->Push(_trackId);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native switchTrainTrack call failed" << Log::Endl;
	}
}

EXPORT void Native_setTrainTrackSpawnFrequency(int32_t _trackIndex, int32_t _frequency) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21973BBF8D17EDFA);
	ctx->Reset();
	ctx->Push(_trackIndex);
	ctx->Push(_frequency);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTrainTrackSpawnFrequency call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2310A8F9421EBF43(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2310A8F9421EBF43);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2310A8F9421EBF43 call failed" << Log::Endl;
	}
}

EXPORT void Native_deleteAllTrains() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x736A718577F39C7D);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native deleteAllTrains call failed" << Log::Endl;
	}
}

EXPORT void Native_setTrainSpeed(int32_t _train, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA0BC91BE0B796E3);
	ctx->Reset();
	ctx->Push(_train);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTrainSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native_setTrainCruiseSpeed(int32_t _train, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x16469284DB8C62B5);
	ctx->Reset();
	ctx->Push(_train);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTrainCruiseSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native_setRandomBoats(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84436EC293B1415F);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRandomBoats call failed" << Log::Endl;
	}
}

EXPORT void Native_setRandomBoatsInMp(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA5E12F728DB30CA);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRandomBoatsInMp call failed" << Log::Endl;
	}
}

EXPORT void Native_setGarbageTrucks(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2AFD795EEAC8D30D);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setGarbageTrucks call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesVehicleHaveStuckVehicleCheck(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57E4C39DE5EE8470);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesVehicleHaveStuckVehicleCheck call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getVehicleRecordingId(int32_t _recording, const char* _script) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21543C612379DB3C);
	ctx->Reset();
	ctx->Push(_recording);
	ctx->Push(_script);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleRecordingId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_requestVehicleRecording(int32_t _recording, const char* _script) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF514CABE74CBF15);
	ctx->Reset();
	ctx->Push(_recording);
	ctx->Push(_script);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestVehicleRecording call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasVehicleRecordingBeenLoaded(int32_t _recording, const char* _script) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x300D614A4C785FC4);
	ctx->Reset();
	ctx->Push(_recording);
	ctx->Push(_script);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasVehicleRecordingBeenLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeVehicleRecording(int32_t _recording, const char* _script) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1160ACCF98A3FC8);
	ctx->Reset();
	ctx->Push(_recording);
	ctx->Push(_script);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeVehicleRecording call failed" << Log::Endl;
	}
}

EXPORT vector3_t Native_getPositionOfVehicleRecordingIdAtTime(int32_t _id, float _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92523B76657A517D);
	ctx->Reset();
	ctx->Push(_id);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPositionOfVehicleRecordingIdAtTime call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native_getPositionOfVehicleRecordingAtTime(int32_t _recording, float _time, const char* _script) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD242728AA6F0FBA2);
	ctx->Reset();
	ctx->Push(_recording);
	ctx->Push(_time);
	ctx->Push(_script);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPositionOfVehicleRecordingAtTime call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native_getRotationOfVehicleRecordingIdAtTime(int32_t _id, float _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0F2103EFAF8CBA7);
	ctx->Reset();
	ctx->Push(_id);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRotationOfVehicleRecordingIdAtTime call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT vector3_t Native_getRotationOfVehicleRecordingAtTime(int32_t _recording, float _time, const char* _script) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2058206FBE79A8AD);
	ctx->Reset();
	ctx->Push(_recording);
	ctx->Push(_time);
	ctx->Push(_script);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRotationOfVehicleRecordingAtTime call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT float Native_getTotalDurationOfVehicleRecordingId(int32_t _id) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x102D125411A7B6E6);
	ctx->Reset();
	ctx->Push(_id);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTotalDurationOfVehicleRecordingId call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getTotalDurationOfVehicleRecording(int32_t _recording, const char* _script) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E48D1C262390950);
	ctx->Reset();
	ctx->Push(_recording);
	ctx->Push(_script);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTotalDurationOfVehicleRecording call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getPositionInRecording(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2DACD605FC681475);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPositionInRecording call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getTimePositionInRecording(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5746F3A7AB7FE544);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTimePositionInRecording call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_startPlaybackRecordedVehicle(int32_t _vehicle, int32_t _recording, const char* _script, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3F878F92B3A7A071);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_recording);
	ctx->Push(_script);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startPlaybackRecordedVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_startPlaybackRecordedVehicleWithFlags(int32_t _vehicle, int32_t _recording, const char* _script, int32_t _flags, int32_t _time, int32_t _drivingStyle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D80FD645D4DA346);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_recording);
	ctx->Push(_script);
	ctx->Push(_flags);
	ctx->Push(_time);
	ctx->Push(_drivingStyle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startPlaybackRecordedVehicleWithFlags call failed" << Log::Endl;
	}
}

EXPORT void Native_forcePlaybackRecordedVehicleUpdate(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F2E4E06DEA8992B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native forcePlaybackRecordedVehicleUpdate call failed" << Log::Endl;
	}
}

EXPORT void Native_stopPlaybackRecordedVehicle(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54833611C17ABDEA);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopPlaybackRecordedVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_pausePlaybackRecordedVehicle(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x632A689BF42301B1);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native pausePlaybackRecordedVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_unpausePlaybackRecordedVehicle(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8879EE09268305D5);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native unpausePlaybackRecordedVehicle call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPlaybackGoingOnForVehicle(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1C8A4C2C19E68EEC);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlaybackGoingOnForVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPlaybackUsingAiGoingOnForVehicle(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAEA8FD591FAD4106);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlaybackUsingAiGoingOnForVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getCurrentPlaybackForVehicle(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42BC05C27A946054);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCurrentPlaybackForVehicle call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_skipToEndAndStopPlaybackRecordedVehicle(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB8E2EDA0C0A5883);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native skipToEndAndStopPlaybackRecordedVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlaybackSpeed(int32_t _vehicle, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6683AB880E427778);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlaybackSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native_startPlaybackRecordedVehicleUsingAi(int32_t _vehicle, int32_t _recording, const char* _script, float _speed, int32_t _drivingStyle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29DE5FA52D00428C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_recording);
	ctx->Push(_script);
	ctx->Push(_speed);
	ctx->Push(_drivingStyle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startPlaybackRecordedVehicleUsingAi call failed" << Log::Endl;
	}
}

EXPORT void Native_skipTimeInPlaybackRecordedVehicle(int32_t _vehicle, float _time) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9438F7AD68771A20);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_time);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native skipTimeInPlaybackRecordedVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlaybackToUseAi(int32_t _vehicle, int32_t _drivingStyle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA549C3B37EA28131);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_drivingStyle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlaybackToUseAi call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlaybackToUseAiTryToRevertBackLater(int32_t _vehicle, int32_t _time, int32_t _drivingStyle, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E63860BBB190730);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_time);
	ctx->Push(_drivingStyle);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlaybackToUseAiTryToRevertBackLater call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5845066D8A1EA7F7(int32_t _vehicle, float _x, float _y, float _z, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5845066D8A1EA7F7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5845066D8A1EA7F7 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x796A877E459B99EA(int32_t _p0, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x796A877E459B99EA);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x796A877E459B99EA call failed" << Log::Endl;
	}
}

EXPORT void Native__0xFAF2A78061FD9EF4(int32_t _p0, float _p1, float _p2, float _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFAF2A78061FD9EF4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xFAF2A78061FD9EF4 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x063AE2B2CC273588(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x063AE2B2CC273588);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x063AE2B2CC273588 call failed" << Log::Endl;
	}
}

EXPORT void Native_explodeVehicleInCutscene(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x786A4EB67B01BF0B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native explodeVehicleInCutscene call failed" << Log::Endl;
	}
}

EXPORT void Native_addVehicleStuckCheckWithWarp(int32_t _p0, float _p1, int32_t _p2, bool _p3, bool _p4, bool _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FA9923062DD396C);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addVehicleStuckCheckWithWarp call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleModelIsSuppressed(int32_t _model, bool _suppressed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0FC2D89AC25A5814);
	ctx->Reset();
	ctx->Push(_model);
	ctx->Push(_suppressed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleModelIsSuppressed call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getRandomVehicleInSphere(float _x, float _y, float _z, float _radius, int32_t _modelHash, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x386F6CE5BAF6091C);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRandomVehicleInSphere call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getRandomVehicleFrontBumperInSphere(float _p0, float _p1, float _p2, float _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC5574E0AEB86BA68);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRandomVehicleFrontBumperInSphere call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getRandomVehicleBackBumperInSphere(float _p0, float _p1, float _p2, float _p3, int32_t _p4, int32_t _p5, int32_t _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB50807EABE20A8DC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRandomVehicleBackBumperInSphere call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getClosestVehicle(float _x, float _y, float _z, float _radius, int32_t _modelHash, int32_t _flags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF73EB622C4F1689B);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_modelHash);
	ctx->Push(_flags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getClosestVehicle call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getTrainCarriage(int32_t _train, int32_t _trailerNumber) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x08AAFD0814722BC3);
	ctx->Reset();
	ctx->Push(_train);
	ctx->Push(_trailerNumber);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTrainCarriage call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isMissionTrain(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD464F2E18836BFC);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isMissionTrain call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_deleteMissionTrain(int32_t& _train) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B76B14AE875C795);
	ctx->Reset();
	ctx->Push(_train);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native deleteMissionTrain call failed" << Log::Endl;
	}
}

EXPORT void Native_setMissionTrainAsNoLongerNeeded(int32_t& _train, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBBE7648349B49BE8);
	ctx->Reset();
	ctx->Push(_train);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMissionTrainAsNoLongerNeeded call failed" << Log::Endl;
	}
}

EXPORT void Native_setMissionTrainCoords(int32_t _train, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x591CA673AA6AB736);
	ctx->Reset();
	ctx->Push(_train);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setMissionTrainCoords call failed" << Log::Endl;
	}
}

EXPORT bool Native_isThisModelABoat(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45A9187928F4B9E3);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isThisModelABoat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isThisModelAJetski(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9537097412CF75FE);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isThisModelAJetski call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isThisModelAPlane(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA0948AB42D7BA0DE);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isThisModelAPlane call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isThisModelAHeli(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCE4334788AF94EA);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isThisModelAHeli call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isThisModelACar(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7F6DB52EEFC96DF8);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isThisModelACar call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isThisModelATrain(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB935175B22E822B);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isThisModelATrain call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isThisModelABike(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB50C0B0CEDC6CE84);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isThisModelABike call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isThisModelABicycle(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF94DD42F63BDED2);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isThisModelABicycle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isThisModelAQuadbike(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39DAC362EE65FA28);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isThisModelAQuadbike call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isThisModelAnAmphibiousCar(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x633F6F44A537EBB6);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isThisModelAnAmphibiousCar call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isThisModelAnAmphibiousQuadbike(int32_t _model) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1A9FC1C76A6730D);
	ctx->Reset();
	ctx->Push(_model);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isThisModelAnAmphibiousQuadbike call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setHeliBladesFullSpeed(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA178472EBB8AE60D);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHeliBladesFullSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native_setHeliBladesSpeed(int32_t _vehicle, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFD280B4D7F3ABC4D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHeliBladesSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native__0x99CAD8E7AFDB60FA(int32_t _vehicle, float _p1, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99CAD8E7AFDB60FA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x99CAD8E7AFDB60FA call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleCanBeTargetted(int32_t _vehicle, bool _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3750146A28097A82);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleCanBeTargetted call failed" << Log::Endl;
	}
}

EXPORT void Native__0xDBC631F109350B8C(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBC631F109350B8C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xDBC631F109350B8C call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleCanBeVisiblyDamaged(int32_t _vehicle, bool _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C7028F78FFD3681);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleCanBeVisiblyDamaged call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleHasUnbreakableLights(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1AA8A837D2169D94);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleHasUnbreakableLights call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2311DD7159F00582(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2311DD7159F00582);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2311DD7159F00582 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x065D03A9D6B2C6B5(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x065D03A9D6B2C6B5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x065D03A9D6B2C6B5 call failed" << Log::Endl;
	}
}

EXPORT float Native_getVehicleDirtLevel(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F17BC8BA08DA62B);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleDirtLevel call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setVehicleDirtLevel(int32_t _vehicle, float _dirtLevel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79D3B596FE44EE8B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_dirtLevel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDirtLevel call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleDamaged(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCDC5017D3CE1E9E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleDamaged call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isVehicleDoorFullyOpen(int32_t _vehicle, int32_t _doorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3E933CFF7B111C22);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleDoorFullyOpen call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleEngineOn(int32_t _vehicle, bool _value, bool _instantly, bool _disableAutoStart) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2497C4717C8B881E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	ctx->Push(_instantly);
	ctx->Push(_disableAutoStart);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleEngineOn call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleUndriveable(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8ABA6AF54B942B95);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleUndriveable call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleProvidesCover(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AFEEDD9BB2899D7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleProvidesCover call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleDoorControl(int32_t _vehicle, int32_t _doorId, int32_t _speed, float _angle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF2BFA0430F0A0FCB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	ctx->Push(_speed);
	ctx->Push(_angle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDoorControl call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleDoorLatched(int32_t _vehicle, int32_t _doorId, bool _p2, bool _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA5A9653A8D2CAF48);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDoorLatched call failed" << Log::Endl;
	}
}

EXPORT float Native_getVehicleDoorAngleRatio(int32_t _vehicle, int32_t _doorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE3F9C29F7B32BD5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleDoorAngleRatio call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native_getPedUsingVehicleDoor(int32_t _vehicle, int32_t _doord) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x218297BF0CFD853B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doord);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedUsingVehicleDoor call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setVehicleDoorShut(int32_t _vehicle, int32_t _doorId, bool _closeInstantly) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93D9BD300D7789E5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	ctx->Push(_closeInstantly);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDoorShut call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleDoorBroken(int32_t _vehicle, int32_t _doorId, bool _deleteDoor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4D4F6A4AB575A33);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	ctx->Push(_deleteDoor);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDoorBroken call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleCanBreak(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59BF8C3D52C92F66);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleCanBreak call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesVehicleHaveRoof(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8AC862B0B32C5B80);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesVehicleHaveRoof call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xC4B3347BD68BD609(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC4B3347BD68BD609);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC4B3347BD68BD609 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD3301660A57C9272(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3301660A57C9272);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD3301660A57C9272 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB9562064627FF9DB(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB9562064627FF9DB);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB9562064627FF9DB call failed" << Log::Endl;
	}
}

EXPORT bool Native_isBigVehicle(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F243D3919F442FE);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isBigVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getNumberOfVehicleColours(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B963160CD65D41E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumberOfVehicleColours call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setVehicleColourCombination(int32_t _vehicle, int32_t _colorCombination) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33E8CD3322E2FE31);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_colorCombination);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleColourCombination call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehicleColourCombination(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A842D197F845D56);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleColourCombination call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setVehicleXenonLightsColor(int32_t _vehicle, int32_t _colorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE41033B25D003A07);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_colorIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleXenonLightsColor call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehicleXenonLightsColor(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DFF319A831E0CDB);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleXenonLightsColor call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setVehicleIsConsideredByPlayer(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x31B927BBC44156CD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleIsConsideredByPlayer call failed" << Log::Endl;
	}
}

EXPORT void Native__0xBE5C1255A1830FF5(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE5C1255A1830FF5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBE5C1255A1830FF5 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9BECD4B9FEF3F8A6(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BECD4B9FEF3F8A6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9BECD4B9FEF3F8A6 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x88BC673CA9E0AE99(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x88BC673CA9E0AE99);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x88BC673CA9E0AE99 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE851E480B814D4BA(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE851E480B814D4BA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE851E480B814D4BA call failed" << Log::Endl;
	}
}

EXPORT void Native_getRandomVehicleModelInMemory(bool _p0, int32_t& _modelHash, int32_t& _successIndicator) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x055BF0AC0C34F4FD);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_modelHash);
	ctx->Push(_successIndicator);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getRandomVehicleModelInMemory call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehicleDoorLockStatus(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25BC98A59C2EA962);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleDoorLockStatus call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehicleDoorDestroyType(int32_t _vehicle, int32_t _doorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCA4AC3EAAE46EC7B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleDoorDestroyType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isVehicleDoorDamaged(int32_t _veh, int32_t _doorID) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8E181E559464527);
	ctx->Reset();
	ctx->Push(_veh);
	ctx->Push(_doorID);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleDoorDamaged call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleDoorCanBreak(int32_t _vehicle, int32_t _doorId, bool _isBreakable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FA133A4A9D37ED8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	ctx->Push(_isBreakable);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDoorCanBreak call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleBumperBouncing(int32_t _vehicle, bool _frontBumper) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27B926779DEB502D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_frontBumper);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleBumperBouncing call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isVehicleBumperBrokenOff(int32_t _vehicle, bool _front) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x468056A6BB6F3846);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_front);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleBumperBrokenOff call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isCopVehicleInArea3d(float _x1, float _x2, float _y1, float _y2, float _z1, float _z2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EEF65D5F153E26A);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_x2);
	ctx->Push(_y1);
	ctx->Push(_y2);
	ctx->Push(_z1);
	ctx->Push(_z2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isCopVehicleInArea3d call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isVehicleOnAllWheels(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB104CD1BABF302E2);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleOnAllWheels call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getVehicleModelMonetaryValue(int32_t _vehicleModel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5873C14A52D74236);
	ctx->Reset();
	ctx->Push(_vehicleModel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModelMonetaryValue call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehicleLayoutHash(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28D37D4F71AC5C58);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleLayoutHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xA01BC64DD4BFBBAC(int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA01BC64DD4BFBBAC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA01BC64DD4BFBBAC call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setRenderTrainAsDerailed(int32_t _train, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x317B11A312DF5534);
	ctx->Reset();
	ctx->Push(_train);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setRenderTrainAsDerailed call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleExtraColours(int32_t _vehicle, int32_t _pearlescentColor, int32_t _wheelColor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2036F561ADD12E33);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_pearlescentColor);
	ctx->Push(_wheelColor);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleExtraColours call failed" << Log::Endl;
	}
}

EXPORT void Native_getVehicleExtraColours(int32_t _vehicle, int32_t& _pearlescentColor, int32_t& _wheelColor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BC4245933A166F7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_pearlescentColor);
	ctx->Push(_wheelColor);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleExtraColours call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleInteriorColor(int32_t _vehicle, int32_t _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF40DD601A65F7F19);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleInteriorColor call failed" << Log::Endl;
	}
}

EXPORT void Native_getVehicleInteriorColor(int32_t _vehicle, int32_t& _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D1464D472D32136);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleInteriorColor call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleDashboardColor(int32_t _vehicle, int32_t _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6089CDF6A57F326C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDashboardColor call failed" << Log::Endl;
	}
}

EXPORT void Native_getVehicleDashboardColor(int32_t _vehicle, int32_t& _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB7635E80A5C31BFF);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleDashboardColor call failed" << Log::Endl;
	}
}

EXPORT void Native_stopAllGarageActivity() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F87E938BDF29D66);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native stopAllGarageActivity call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleFixed(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x115722B1B9C14C1C);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleFixed call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleDeformationFixed(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x953DA1E1B12C0491);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDeformationFixed call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleCanEngineOperateOnFire(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x206BC5DC9D1AC70A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleCanEngineOperateOnFire call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleCanLeakOil(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51BB2D88D31A914B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleCanLeakOil call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleCanLeakPetrol(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x192547247864DFDD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleCanLeakPetrol call failed" << Log::Endl;
	}
}

EXPORT void Native_setDisableVehiclePetrolTankFires(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x465BF26AB9684352);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDisableVehiclePetrolTankFires call failed" << Log::Endl;
	}
}

EXPORT void Native_setDisableVehiclePetrolTankDamage(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x37C8252A7C92D017);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDisableVehiclePetrolTankDamage call failed" << Log::Endl;
	}
}

EXPORT void Native_setDisableVehicleEngineFires(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x91A0BD635321F145);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDisableVehicleEngineFires call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC50CE861B55EAB8B(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC50CE861B55EAB8B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC50CE861B55EAB8B call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6EBFB22D646FFC18(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6EBFB22D646FFC18);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6EBFB22D646FFC18 call failed" << Log::Endl;
	}
}

EXPORT void Native_setDisablePretendOccupants(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25367DE49D64CF16);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDisablePretendOccupants call failed" << Log::Endl;
	}
}

EXPORT void Native_removeVehiclesFromGeneratorsInArea(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, int32_t _unk) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46A1E1A299EC4BBA);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	ctx->Push(_unk);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeVehiclesFromGeneratorsInArea call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleSteerBias(int32_t _vehicle, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42A8EC77D5150CBE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleSteerBias call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleExtraTurnedOn(int32_t _vehicle, int32_t _extraId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD2E6822DBFD6C8BD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_extraId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleExtraTurnedOn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleExtra(int32_t _vehicle, int32_t _extraId, bool _disable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EE3A3C5E4A40CC9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_extraId);
	ctx->Push(_disable);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleExtra call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesExtraExist(int32_t _vehicle, int32_t _extraId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1262D55792428154);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_extraId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesExtraExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_doesVehicleTyreExist(int32_t _vehicle, int32_t _tyreIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x534E36D4DB9ECC5D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_tyreIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesVehicleTyreExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setConvertibleRoof(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF39C4F538B5124C2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setConvertibleRoof call failed" << Log::Endl;
	}
}

EXPORT void Native_lowerConvertibleRoof(int32_t _vehicle, bool _instantlyLower) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDED51F703D0FA83D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_instantlyLower);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native lowerConvertibleRoof call failed" << Log::Endl;
	}
}

EXPORT void Native_raiseConvertibleRoof(int32_t _vehicle, bool _instantlyRaise) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F5FB35D7E88FC70);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_instantlyRaise);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native raiseConvertibleRoof call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getConvertibleRoofState(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8C397922FC03F41);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getConvertibleRoofState call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isVehicleAConvertible(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x52F357A30698BCCE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleAConvertible call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_transformVehicleToSubmarine(int32_t _vehicle, bool _noAnimation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBE4C854FFDB6EEBE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_noAnimation);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native transformVehicleToSubmarine call failed" << Log::Endl;
	}
}

EXPORT void Native_transformSubmarineToVehicle(int32_t _vehicle, bool _noAnimation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A69FFD1B42BFF9E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_noAnimation);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native transformSubmarineToVehicle call failed" << Log::Endl;
	}
}

EXPORT bool Native_getIsSubmarineVehicleTransformed(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA77DC70BD689A1E5);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsSubmarineVehicleTransformed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isVehicleStoppedAtTrafficLights(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2959F696AE390A99);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleStoppedAtTrafficLights call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleDamage(int32_t _vehicle, float _xOffset, float _yOffset, float _zOffset, float _damage, float _radius, bool _focusOnModel) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1DD317EA8FD4F29);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_damage);
	ctx->Push(_radius);
	ctx->Push(_focusOnModel);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDamage call failed" << Log::Endl;
	}
}

EXPORT void Native__0x35BB21DE06784373(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35BB21DE06784373);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x35BB21DE06784373 call failed" << Log::Endl;
	}
}

EXPORT float Native_getVehicleEngineHealth(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC45D23BAF168AAB8);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleEngineHealth call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setVehicleEngineHealth(int32_t _vehicle, float _health) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45F6D8EEF34ABEF1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_health);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleEngineHealth call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlaneEngineHealth(int32_t _vehicle, float _health) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A86A0475B6A1434);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_health);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlaneEngineHealth call failed" << Log::Endl;
	}
}

EXPORT float Native_getVehiclePetrolTankHealth(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7D5DABE888D2D074);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehiclePetrolTankHealth call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setVehiclePetrolTankHealth(int32_t _vehicle, float _health) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70DB57649FA8D0D8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_health);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehiclePetrolTankHealth call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleStuckTimerUp(int32_t _vehicle, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x679BE1DAF71DA874);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleStuckTimerUp call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_resetVehicleStuckTimer(int32_t _vehicle, int32_t _nullAttributes) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD7591B0065AFAA7A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_nullAttributes);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetVehicleStuckTimer call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleDriveable(int32_t _vehicle, bool _isOnFireCheck) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C241E39B23DF959);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_isOnFireCheck);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleDriveable call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleHasBeenOwnedByPlayer(int32_t _vehicle, bool _owned) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B5F9D2AF1F1722D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_owned);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleHasBeenOwnedByPlayer call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleNeedsToBeHotwired(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFBA550EA44404EE6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleNeedsToBeHotwired call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9F3F689B814F2599(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9F3F689B814F2599);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9F3F689B814F2599 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x4E74E62E0A97E901(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E74E62E0A97E901);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4E74E62E0A97E901 call failed" << Log::Endl;
	}
}

EXPORT void Native_startVehicleHorn(int32_t _vehicle, int32_t _duration, int32_t _mode, bool _forever) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9C8C6504B5B63D2C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_duration);
	ctx->Push(_mode);
	ctx->Push(_forever);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native startVehicleHorn call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleSilent(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D44FCCE98450843);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleSilent call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleHasStrongAxles(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92F0CF722BC4202F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleHasStrongAxles call failed" << Log::Endl;
	}
}

EXPORT const char* Native_getDisplayNameFromVehicleModel(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB215AAC32D25D019);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDisplayNameFromVehicleModel call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_getMakeNameFromVehicleModel(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7AF4F159FF99F97);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMakeNameFromVehicleModel call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT vector3_t Native_getVehicleDeformationAtPos(int32_t _vehicle, float _offsetX, float _offsetY, float _offsetZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4EC6CFBC7B2E9536);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_offsetX);
	ctx->Push(_offsetY);
	ctx->Push(_offsetZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleDeformationAtPos call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT void Native_setVehicleLivery(int32_t _vehicle, int32_t _livery) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60BF608F1B8CD1B6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_livery);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleLivery call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehicleLivery(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2BB9230590DA5E8A);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleLivery call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehicleLiveryCount(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87B63E25A529D526);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleLiveryCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setVehicleRoofLivery(int32_t _vehicle, int32_t _livery) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6D3A8750DC73270);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_livery);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleRoofLivery call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehicleRoofLivery(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x60190048C0764A26);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleRoofLivery call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehicleRoofLiveryCount(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5ECB40269053C0D4);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleRoofLiveryCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isVehicleWindowIntact(int32_t _vehicle, int32_t _windowIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x46E571A0E20D01F1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_windowIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleWindowIntact call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_areAllVehicleWindowsIntact(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x11D862A3E977A9EF);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native areAllVehicleWindowsIntact call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_areAnyVehicleSeatsFree(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D34FC3BC4ADB780);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native areAnyVehicleSeatsFree call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_resetVehicleWheels(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21D2E5662C1F6FED);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetVehicleWheels call failed" << Log::Endl;
	}
}

EXPORT bool Native_isHeliPartBroken(int32_t _vehicle, bool _p1, bool _p2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC74B4BE25EB6C8A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isHeliPartBroken call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT float Native_getHeliMainRotorHealth(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4CB7541F413D2C5);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHeliMainRotorHealth call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getHeliTailRotorHealth(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE8CE82A4219AC8C);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHeliTailRotorHealth call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getHeliTailBoomHealth(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC51915D27E4A5F7);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHeliTailBoomHealth call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setHeliMainRotorHealth(int32_t _vehicle, float _health) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4056EA1105F5ABD7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_health);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHeliMainRotorHealth call failed" << Log::Endl;
	}
}

EXPORT void Native_setHeliTailRotorHealth(int32_t _vehicle, float _health) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE205F38AAA58E5B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_health);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHeliTailRotorHealth call failed" << Log::Endl;
	}
}

EXPORT void Native_setHeliTailExplodeThrowDashboard(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3EC8BF18AA453FE9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHeliTailExplodeThrowDashboard call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleNameDebug(int32_t _vehicle, const char* _name) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFDF984E2C22B94F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_name);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleNameDebug call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleExplodesOnHighExplosionDamage(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71B0892EC081D60A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleExplodesOnHighExplosionDamage call failed" << Log::Endl;
	}
}

EXPORT void Native__0xD565F438137F0E10(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD565F438137F0E10);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD565F438137F0E10 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x3441CAD2F2231923(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3441CAD2F2231923);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3441CAD2F2231923 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleDisableTowing(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B6747FAA9DB9D6B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDisableTowing call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesVehicleHaveLandingGear(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE43701C36CAFF1A4);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesVehicleHaveLandingGear call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_controlLandingGear(int32_t _vehicle, int32_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFC8BE9A5E1FE575);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native controlLandingGear call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getLandingGearState(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B0F3DCA3DB0F4CD);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getLandingGearState call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isAnyVehicleNearPoint(float _x, float _y, float _z, float _radius) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x61E1DD6125A3EEE6);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAnyVehicleNearPoint call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_requestVehicleHighDetailModel(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA6E9FDCB2C76785E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestVehicleHighDetailModel call failed" << Log::Endl;
	}
}

EXPORT void Native_removeVehicleHighDetailModel(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x00689CDE5F7C6787);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeVehicleHighDetailModel call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleHighDetail(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F25887F3C104278);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleHighDetail call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_requestVehicleAsset(int32_t _vehicleHash, int32_t _vehicleAsset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81A15811460FAB3A);
	ctx->Reset();
	ctx->Push(_vehicleHash);
	ctx->Push(_vehicleAsset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestVehicleAsset call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasVehicleAssetLoaded(int32_t _vehicleAsset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1BBE0523B8DB9A21);
	ctx->Reset();
	ctx->Push(_vehicleAsset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasVehicleAssetLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeVehicleAsset(int32_t _vehicleAsset) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xACE699C71AB9DEB5);
	ctx->Reset();
	ctx->Push(_vehicleAsset);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeVehicleAsset call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleTowTruckArmPosition(int32_t _vehicle, float _position) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFE54B92A344583CA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_position);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleTowTruckArmPosition call failed" << Log::Endl;
	}
}

EXPORT void Native_attachVehicleToTowTruck(int32_t _towTruck, int32_t _vehicle, bool _rear, float _hookOffsetX, float _hookOffsetY, float _hookOffsetZ) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29A16F8D621C4508);
	ctx->Reset();
	ctx->Push(_towTruck);
	ctx->Push(_vehicle);
	ctx->Push(_rear);
	ctx->Push(_hookOffsetX);
	ctx->Push(_hookOffsetY);
	ctx->Push(_hookOffsetZ);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachVehicleToTowTruck call failed" << Log::Endl;
	}
}

EXPORT void Native_detachVehicleFromTowTruck(int32_t _towTruck, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC2DB6B6708350ED8);
	ctx->Reset();
	ctx->Push(_towTruck);
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native detachVehicleFromTowTruck call failed" << Log::Endl;
	}
}

EXPORT bool Native_detachVehicleFromAnyTowTruck(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0E9CE05A1E68CD8);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native detachVehicleFromAnyTowTruck call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isVehicleAttachedToTowTruck(int32_t _towTruck, int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x146DF9EC4C4B9FD4);
	ctx->Reset();
	ctx->Push(_towTruck);
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleAttachedToTowTruck call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getEntityAttachedToTowTruck(int32_t _towTruck) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFEA18DCF10F8F75);
	ctx->Reset();
	ctx->Push(_towTruck);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityAttachedToTowTruck call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_setVehicleAutomaticallyAttaches(int32_t _vehicle, bool _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8BA6F76BC53A1493);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleAutomaticallyAttaches call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setVehicleBulldozerArmPosition(int32_t _vehicle, float _position, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8EBCCC96ADB9FB7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_position);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleBulldozerArmPosition call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleTankTurretPosition(int32_t _vehicle, float _position, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56B94C6D7127DFBA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_position);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleTankTurretPosition call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0581730AB9380412(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0581730AB9380412);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0581730AB9380412 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x737E398138550FFF(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x737E398138550FFF);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x737E398138550FFF call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleTurretSpeedThisFrame(int32_t _vehicle, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1093408B4B9D1146);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleTurretSpeedThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_disableVehicleTurretMovementThisFrame(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x32CAEDF24A583345);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableVehicleTurretMovementThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleFlightNozzlePosition(int32_t _vehicle, float _angleRatio) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30D779DE7C4F6DD3);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_angleRatio);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleFlightNozzlePosition call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleFlightNozzlePositionImmediate(int32_t _vehicle, float _angle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9AA47FFF660CB932);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_angle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleFlightNozzlePositionImmediate call failed" << Log::Endl;
	}
}

EXPORT float Native_getVehicleFlightNozzlePosition(int32_t _plane) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDA62027C8BDB326E);
	ctx->Reset();
	ctx->Push(_plane);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleFlightNozzlePosition call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setDisableVehicleFlightNozzlePosition(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCE2B43770B655F8F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDisableVehicleFlightNozzlePosition call failed" << Log::Endl;
	}
}

EXPORT bool Native__0xA4822F1CF23F4810(vector3_t& _outVec, int32_t _p1, vector3_t& _outVec1, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4822F1CF23F4810);
	ctx->Reset();
	alt::INative::Vector3 converted_outVec { _outVec.x, 0, _outVec.y, 0, _outVec.z };
	ctx->Push(&converted_outVec);
	ctx->Push(_p1);
	alt::INative::Vector3 converted_outVec1 { _outVec1.x, 0, _outVec1.y, 0, _outVec1.z };
	ctx->Push(&converted_outVec1);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA4822F1CF23F4810 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_outVec.x = converted_outVec.x;
	_outVec.y = converted_outVec.y;
	_outVec.z = converted_outVec.z;
	_outVec1.x = converted_outVec1.x;
	_outVec1.y = converted_outVec1.y;
	_outVec1.z = converted_outVec1.z;
}

EXPORT void Native_setVehicleBurnout(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFB8794444A7D60FB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleBurnout call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleInBurnout(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1297A88E081430EB);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleInBurnout call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleReduceGrip(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x222FF6A823D122E2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleReduceGrip call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleReduceTraction(int32_t _vehicle, int32_t _val) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6DEE944E1EE90CFB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_val);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleReduceTraction call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleIndicatorLights(int32_t _vehicle, int32_t _turnSignal, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5D45264751B7DF0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_turnSignal);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleIndicatorLights call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleBrakeLights(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92B35082E0B42F66);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleBrakeLights call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleHandbrake(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x684785568EF26A22);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleHandbrake call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleBrake(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4E2FD323574965C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleBrake call failed" << Log::Endl;
	}
}

EXPORT void Native_instantlyFillVehiclePopulation() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48ADC8A773564670);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native instantlyFillVehiclePopulation call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasFilledVehiclePopulation() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x91D6DD290888CBAB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasFilledVehiclePopulation call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x51DB102F4A3BA5E0(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51DB102F4A3BA5E0);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x51DB102F4A3BA5E0 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA4A9A4C40E615885(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4A9A4C40E615885);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA4A9A4C40E615885 call failed" << Log::Endl;
	}
}

EXPORT bool Native_getVehicleTrailerVehicle(int32_t _vehicle, int32_t& _trailer) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CDD6BADC297830D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_trailer);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleTrailerVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleUsesLargeRearRamp(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCAC66558B944DA67);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleUsesLargeRearRamp call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleRudderBroken(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x09606148B6C71DEF);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleRudderBroken call failed" << Log::Endl;
	}
}

EXPORT void Native_setConvertibleRoofLatchState(int32_t _vehicle, bool _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1A78AD3D8240536F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setConvertibleRoofLatchState call failed" << Log::Endl;
	}
}

EXPORT float Native_getVehicleEstimatedMaxSpeed(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53AF99BAA671CA47);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleEstimatedMaxSpeed call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getVehicleMaxBraking(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD7E85FC227197C4);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleMaxBraking call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getVehicleMaxTraction(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA132FB5370554DB0);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleMaxTraction call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getVehicleAcceleration(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DD35C8D074E57AE);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleAcceleration call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getVehicleModelEstimatedMaxSpeed(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF417C2502FFFED43);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModelEstimatedMaxSpeed call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getVehicleModelMaxBraking(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC53FD41B4ED944C);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModelMaxBraking call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getVehicleModelMaxBrakingMaxMods(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBFBA3BA79CFF7EBF);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModelMaxBrakingMaxMods call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getVehicleModelMaxTraction(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x539DE94D44FDFD0D);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModelMaxTraction call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getVehicleModelAcceleration(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C044C5C84505B6A);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModelAcceleration call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getVehicleModelEstimatedAgility(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53409B5163D5B846);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModelEstimatedAgility call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getVehicleModelMaxKnots(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC6AD107DDC9054CC);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModelMaxKnots call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getVehicleModelMoveResistance(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AA3F878A178C4FC);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModelMoveResistance call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getVehicleClassEstimatedMaxSpeed(int32_t _vehicleClass) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x00C09F246ABEDD82);
	ctx->Reset();
	ctx->Push(_vehicleClass);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleClassEstimatedMaxSpeed call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getVehicleClassMaxTraction(int32_t _vehicleClass) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBC86D85C5059461);
	ctx->Reset();
	ctx->Push(_vehicleClass);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleClassMaxTraction call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getVehicleClassMaxAgility(int32_t _vehicleClass) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4F930AD022D6DE3B);
	ctx->Reset();
	ctx->Push(_vehicleClass);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleClassMaxAgility call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getVehicleClassMaxAcceleration(int32_t _vehicleClass) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F83E7E45D9EA7AE);
	ctx->Reset();
	ctx->Push(_vehicleClass);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleClassMaxAcceleration call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getVehicleClassMaxBraking(int32_t _vehicleClass) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4BF54C16EC8FEC03);
	ctx->Reset();
	ctx->Push(_vehicleClass);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleClassMaxBraking call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native_addRoadNodeSpeedZone(float _x, float _y, float _z, float _radius, float _speed, bool _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2CE544C68FB812A0);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_speed);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addRoadNodeSpeedZone call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_removeRoadNodeSpeedZone(int32_t _speedzone) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1033371FC8E842A7);
	ctx->Reset();
	ctx->Push(_speedzone);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeRoadNodeSpeedZone call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_openBombBayDoors(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x87E7F24270732CB1);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native openBombBayDoors call failed" << Log::Endl;
	}
}

EXPORT void Native_closeBombBayDoors(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3556041742A0DC74);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native closeBombBayDoors call failed" << Log::Endl;
	}
}

EXPORT bool Native_areBombBayDoorsOpen(int32_t _aircraft) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0917A423314BBA8);
	ctx->Reset();
	ctx->Push(_aircraft);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native areBombBayDoorsOpen call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isVehicleSearchlightOn(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0F97FCE55094987);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleSearchlightOn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleSearchlight(int32_t _heli, bool _toggle, bool _canBeUsedByAI) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14E85C5EE7A4D542);
	ctx->Reset();
	ctx->Push(_heli);
	ctx->Push(_toggle);
	ctx->Push(_canBeUsedByAI);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleSearchlight call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesVehicleHaveSearchlight(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99015ED7DBEA5113);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesVehicleHaveSearchlight call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isVehicleSeatAccessible(int32_t _ped, int32_t _vehicle, int32_t _seatIndex, bool _side, bool _onEnter) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x639431E895B9AA57);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	ctx->Push(_side);
	ctx->Push(_onEnter);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleSeatAccessible call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT vector3_t Native_getEntryPositionOfDoor(int32_t _vehicle, int32_t _doorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0572928C0ABFDA3);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntryPositionOfDoor call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT bool Native_canShuffleSeat(int32_t _vehicle, int32_t _seatIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x30785D90C956BF35);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_seatIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canShuffleSeat call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getNumModKits(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33F2E3FE70EAAE1D);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumModKits call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setVehicleModKit(int32_t _vehicle, int32_t _modKit) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F2AA07F00B3217A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modKit);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleModKit call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehicleModKit(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6325D1A044AE510D);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModKit call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehicleModKitType(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC058F5121E54C32);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModKitType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehicleWheelType(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3ED1BFB4BE636DC);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleWheelType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setVehicleWheelType(int32_t _vehicle, int32_t _WheelType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x487EB21CC7295BA1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_WheelType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleWheelType call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getNumModColors(int32_t _paintType, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA551BE18C11A476D);
	ctx->Reset();
	ctx->Push(_paintType);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumModColors call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setVehicleModColor1(int32_t _vehicle, int32_t _paintType, int32_t _color, int32_t _pearlescentColor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x43FEB945EE7F85B8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_paintType);
	ctx->Push(_color);
	ctx->Push(_pearlescentColor);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleModColor1 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleModColor2(int32_t _vehicle, int32_t _paintType, int32_t _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x816562BADFDEC83E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_paintType);
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleModColor2 call failed" << Log::Endl;
	}
}

EXPORT void Native_getVehicleModColor1(int32_t _vehicle, int32_t& _paintType, int32_t& _color, int32_t& _pearlescentColor) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8D65CA700C9A693);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_paintType);
	ctx->Push(_color);
	ctx->Push(_pearlescentColor);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModColor1 call failed" << Log::Endl;
	}
}

EXPORT void Native_getVehicleModColor2(int32_t _vehicle, int32_t& _paintType, int32_t& _color) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81592BE4E3878728);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_paintType);
	ctx->Push(_color);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModColor2 call failed" << Log::Endl;
	}
}

EXPORT const char* Native_getVehicleModColor1Name(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB45085B721EFD38C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModColor1Name call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_getVehicleModColor2Name(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4967A516ED23A5A1);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModColor2Name call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT bool Native_haveVehicleModsStreamedIn(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A83F5F9963775EF);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native haveVehicleModsStreamedIn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleMod(int32_t _vehicle, int32_t _modType, int32_t _modIndex, bool _customTires) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6AF0636DDEDCB6DD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	ctx->Push(_modIndex);
	ctx->Push(_customTires);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleMod call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehicleMod(int32_t _vehicle, int32_t _modType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x772960298DA26FDB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleMod call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getVehicleModVariation(int32_t _vehicle, int32_t _modType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3924ECD70E095DC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModVariation call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getNumVehicleMods(int32_t _vehicle, int32_t _modType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE38E9162A2500646);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumVehicleMods call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_removeVehicleMod(int32_t _vehicle, int32_t _modType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92D619E420858204);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeVehicleMod call failed" << Log::Endl;
	}
}

EXPORT void Native_toggleVehicleMod(int32_t _vehicle, int32_t _modType, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2A1F4F37F95BAD08);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native toggleVehicleMod call failed" << Log::Endl;
	}
}

EXPORT bool Native_isToggleModOn(int32_t _vehicle, int32_t _modType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84B233A8C8FC8AE7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isToggleModOn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT const char* Native_getModTextLabel(int32_t _vehicle, int32_t _modType, int32_t _modValue) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8935624F8C5592CC);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	ctx->Push(_modValue);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getModTextLabel call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_getModSlotName(int32_t _vehicle, int32_t _modType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51F0FEB9F6AE98C0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getModSlotName call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT const char* Native_getLiveryName(int32_t _vehicle, int32_t _liveryIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4C7A93837C91A1F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_liveryIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getLiveryName call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT int32_t Native_getVehicleModModifierValue(int32_t _vehicle, int32_t _modType, int32_t _modIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x90A38E9838E0A8C1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	ctx->Push(_modIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModModifierValue call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehicleModIdentifierHash(int32_t _vehicle, int32_t _modType, int32_t _modIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4593CF82AA179706);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modType);
	ctx->Push(_modIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleModIdentifierHash call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_preloadVehicleMod(int32_t _p0, int32_t _modType, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x758F49C24925568A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_modType);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native preloadVehicleMod call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasPreloadModsFinished(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06F43E5175EB6D96);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasPreloadModsFinished call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_releasePreloadMods(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x445D79F995508307);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native releasePreloadMods call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleTyreSmokeColor(int32_t _vehicle, int32_t _r, int32_t _g, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5BA80F839791C0F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleTyreSmokeColor call failed" << Log::Endl;
	}
}

EXPORT void Native_getVehicleTyreSmokeColor(int32_t _vehicle, int32_t& _r, int32_t& _g, int32_t& _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB635392A4938B3C3);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleTyreSmokeColor call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleWindowTint(int32_t _vehicle, int32_t _tint) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x57C51E6BAD752696);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_tint);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleWindowTint call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehicleWindowTint(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0EE21293DAD47C95);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleWindowTint call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getNumVehicleWindowTints() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D1224004B3A6707);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumVehicleWindowTints call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_getVehicleColor(int32_t _vehicle, int32_t& _r, int32_t& _g, int32_t& _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3CC740D36221548);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleColor call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xEEBFC7A7EFDC35B4(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEEBFC7A7EFDC35B4);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEEBFC7A7EFDC35B4 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehicleCauseOfDestruction(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE495D1EF4C91FD20);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleCauseOfDestruction call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x5EE5632F47AE9695(int32_t _vehicle, float _health) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EE5632F47AE9695);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_health);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5EE5632F47AE9695 call failed" << Log::Endl;
	}
}

EXPORT bool Native_getIsLeftVehicleHeadlightDamaged(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5EF77C9ADD3B11A3);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsLeftVehicleHeadlightDamaged call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getIsRightVehicleHeadlightDamaged(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7ECB73355EB2F20);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsRightVehicleHeadlightDamaged call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isVehicleEngineOnFire(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC69ADF931AAE0C3);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleEngineOnFire call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_modifyVehicleTopSpeed(int32_t _vehicle, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93A3996368C94158);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native modifyVehicleTopSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleMaxSpeed(int32_t _vehicle, float _speed) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBAA045B4E42F3C06);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_speed);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleMaxSpeed call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1CF38D529D7441D9(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1CF38D529D7441D9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1CF38D529D7441D9 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1F9FB66F3A3842D2(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F9FB66F3A3842D2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1F9FB66F3A3842D2 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x59C3757B3B7408E8(int32_t _vehicle, bool _toggle, float _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x59C3757B3B7408E8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x59C3757B3B7408E8 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_addVehicleCombatAngledAvoidanceArea(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x54B0F614960F4A5F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addVehicleCombatAngledAvoidanceArea call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_removeVehicleCombatAvoidanceArea(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE30524E1871F481D);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeVehicleCombatAvoidanceArea call failed" << Log::Endl;
	}
}

EXPORT bool Native_isAnyPedRappellingFromHeli(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x291E373D483E7EE7);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAnyPedRappellingFromHeli call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleCheatPowerIncrease(int32_t _vehicle, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB59E4BD37AE292DB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleCheatPowerIncrease call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0AD9E8F87FF7C16F(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0AD9E8F87FF7C16F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0AD9E8F87FF7C16F call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleIsWanted(int32_t _vehicle, bool _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7EC25A3EBEEC726);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleIsWanted call failed" << Log::Endl;
	}
}

EXPORT void Native_setBoatBoomPositionRatio(int32_t _vehicle, float _ratio) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF488C566413B4232);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_ratio);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBoatBoomPositionRatio call failed" << Log::Endl;
	}
}

EXPORT void Native_getBoatBoomPositionRatio2(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC1F981A6F74F0C23);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBoatBoomPositionRatio2 call failed" << Log::Endl;
	}
}

EXPORT void Native_getBoatBoomPositionRatio3(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0F3B4D4E43177236);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBoatBoomPositionRatio3 call failed" << Log::Endl;
	}
}

EXPORT float Native_getBoatBoomPositionRatio(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6636C535F6CC2725);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBoatBoomPositionRatio call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_disablePlaneAileron(int32_t _vehicle, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x23428FC53C60919C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disablePlaneAileron call failed" << Log::Endl;
	}
}

EXPORT bool Native_getIsVehicleEngineRunning(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE31E7DF9B5B132E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsVehicleEngineRunning call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleUseAlternateHandling(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1D97D1E3A70A649F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleUseAlternateHandling call failed" << Log::Endl;
	}
}

EXPORT void Native_setBikeOnStand(int32_t _vehicle, float _x, float _y) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9CFA4896C3A53CBB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setBikeOnStand call failed" << Log::Endl;
	}
}

EXPORT void Native__0xAB04325045427AAE(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAB04325045427AAE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAB04325045427AAE call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCFD778E7904C255E(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCFD778E7904C255E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCFD778E7904C255E call failed" << Log::Endl;
	}
}

EXPORT void Native_setLastDrivenVehicle(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xACFB2463CC22BED2);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setLastDrivenVehicle call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getLastDrivenVehicle() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2D06FAEDE65B577);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getLastDrivenVehicle call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_clearLastDrivenVehicle() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE01903C47C7AC89E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearLastDrivenVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleHasBeenDrivenFlag(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x02398B627547189C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleHasBeenDrivenFlag call failed" << Log::Endl;
	}
}

EXPORT void Native_setTaskVehicleGotoPlaneMinHeightAboveTerrain(int32_t _plane, int32_t _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB893215D8D4C015B);
	ctx->Reset();
	ctx->Push(_plane);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTaskVehicleGotoPlaneMinHeightAboveTerrain call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleLodMultiplier(int32_t _vehicle, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x93AE6A61BE015BF1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleLodMultiplier call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleCanSaveInGarage(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x428BACCDF5E26EAD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleCanSaveInGarage call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehicleNumberOfBrokenOffBones(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x42A4BEB35D372407);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleNumberOfBrokenOffBones call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehicleNumberOfBrokenBones(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C8CBFE1EA5FC631);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleNumberOfBrokenBones call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x4D9D109F63FEE1D4(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D9D109F63FEE1D4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4D9D109F63FEE1D4 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleGeneratesEngineShockingEvents(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x279D50DE5652D935);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleGeneratesEngineShockingEvents call failed" << Log::Endl;
	}
}

EXPORT void Native_copyVehicleDamages(int32_t _sourceVehicle, int32_t _targetVehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE44A982368A4AF23);
	ctx->Reset();
	ctx->Push(_sourceVehicle);
	ctx->Push(_targetVehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native copyVehicleDamages call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF25E02CB9C5818F8() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF25E02CB9C5818F8);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF25E02CB9C5818F8 call failed" << Log::Endl;
	}
}

EXPORT void Native_setLightsCutoffDistanceTweak(float _distance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC3CCA5844452B06);
	ctx->Reset();
	ctx->Push(_distance);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setLightsCutoffDistanceTweak call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleShootAtTarget(int32_t _driver, int32_t _entity, float _xTarget, float _yTarget, float _zTarget) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74CD9A9327A282EA);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_entity);
	ctx->Push(_xTarget);
	ctx->Push(_yTarget);
	ctx->Push(_zTarget);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleShootAtTarget call failed" << Log::Endl;
	}
}

EXPORT bool Native_getVehicleLockOnTarget(int32_t _vehicle, int32_t& _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F5EBAB1F260CFCE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleLockOnTarget call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setForceHdVehicle(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97CE68CB032583F0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setForceHdVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native__0x182F266C2D9E2BEB(int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x182F266C2D9E2BEB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x182F266C2D9E2BEB call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehiclePlateType(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9CCC9525BF2408E0);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehiclePlateType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_trackVehicleVisibility(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x64473AEFDCF47DCA);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native trackVehicleVisibility call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleVisible(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA0A52D24FB98293);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleVisible call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleGravity(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x89F149B6131E57DA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleGravity call failed" << Log::Endl;
	}
}

EXPORT void Native_setEnableVehicleSlipstreaming(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6C0C80B8C867537);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setEnableVehicleSlipstreaming call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF051D9BFB6BA39C0(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF051D9BFB6BA39C0);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF051D9BFB6BA39C0 call failed" << Log::Endl;
	}
}

EXPORT float Native_getVehicleCurrentSlipstreamDraft(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36492C2F0D134C56);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleCurrentSlipstreamDraft call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT bool Native_isVehicleSlipstreamLeader(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48C633E94A8142A7);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleSlipstreamLeader call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleInactiveDuringPlayback(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x06582AFF74894C75);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleInactiveDuringPlayback call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleActiveDuringPlayback(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDFFCEF48E511DB48);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleActiveDuringPlayback call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleSprayable(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8D474C8FAEFF6CDE);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleSprayable call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleEngineCanDegrade(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x983765856F2564F9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleEngineCanDegrade call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleShadowEffect(int32_t _vehicle, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0E4BA16D1DB546C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleShadowEffect call failed" << Log::Endl;
	}
}

EXPORT void Native_removeVehicleShadowEffect(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF87D9F2301F7D206);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeVehicleShadowEffect call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPlaneLandingGearIntact(int32_t _plane) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4198AB0022B15F87);
	ctx->Reset();
	ctx->Push(_plane);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPlaneLandingGearIntact call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_arePlanePropellersIntact(int32_t _plane) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x755D6D5267CBBD7E);
	ctx->Reset();
	ctx->Push(_plane);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native arePlanePropellersIntact call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setPlanePropellersHealth(int32_t _plane, float _health) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4C815EB175086F84);
	ctx->Reset();
	ctx->Push(_plane);
	ctx->Push(_health);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlanePropellersHealth call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleCanDeformWheels(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0CDDA42F9E360CA6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleCanDeformWheels call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleStolen(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AF9BD80EEBEB453);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleStolen call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleIsStolen(int32_t _vehicle, bool _isStolen) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x67B2C79AA7FF5738);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_isStolen);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleIsStolen call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlaneTurbulenceMultiplier(int32_t _vehicle, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAD2D28A1AFDFF131);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlaneTurbulenceMultiplier call failed" << Log::Endl;
	}
}

EXPORT bool Native_arePlaneWingsIntact(int32_t _plane) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5991A01434CE9677);
	ctx->Reset();
	ctx->Push(_plane);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native arePlaneWingsIntact call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xB264C4D2F2B0A78B(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB264C4D2F2B0A78B);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB264C4D2F2B0A78B call failed" << Log::Endl;
	}
}

EXPORT void Native_detachVehicleFromCargobob(int32_t _vehicle, int32_t _cargobob) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E21D3DF1051399D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_cargobob);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native detachVehicleFromCargobob call failed" << Log::Endl;
	}
}

EXPORT bool Native_detachVehicleFromAnyCargobob(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADF7BE450512C12F);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native detachVehicleFromAnyCargobob call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_detachEntityFromCargobob(int32_t _cargobob, int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF03011701811146);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native detachEntityFromCargobob call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_isVehicleAttachedToCargobob(int32_t _cargobob, int32_t _vehicleAttached) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD40148F22E81A1D9);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_vehicleAttached);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleAttachedToCargobob call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getVehicleAttachedToCargobob(int32_t _cargobob) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x873B82D42AC2B9E5);
	ctx->Reset();
	ctx->Push(_cargobob);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleAttachedToCargobob call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getEntityAttachedToCargobob(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99093F60746708CA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getEntityAttachedToCargobob call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_attachVehicleToCargobob(int32_t _vehicle, int32_t _cargobob, int32_t _p2, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4127F1D84E347769);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_cargobob);
	ctx->Push(_p2);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachVehicleToCargobob call failed" << Log::Endl;
	}
}

EXPORT void Native_attachEntityToCargobob(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA1DD82F3CCF9A01E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native attachEntityToCargobob call failed" << Log::Endl;
	}
}

EXPORT void Native_setCargobobHookCanDetach(int32_t _cargobob, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x571FEB383F629926);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCargobobHookCanDetach call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1F34B0626C594380(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1F34B0626C594380);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1F34B0626C594380 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x2C1D8B3B19E517CC(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C1D8B3B19E517CC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2C1D8B3B19E517CC call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT vector3_t Native_getCargobobHookPosition(int32_t _cargobob) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCBDB9B923CACC92D);
	ctx->Reset();
	ctx->Push(_cargobob);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCargobobHookPosition call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT bool Native_doesCargobobHavePickUpRope(int32_t _cargobob) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1821D91AD4B56108);
	ctx->Reset();
	ctx->Push(_cargobob);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesCargobobHavePickUpRope call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_createPickUpRopeForCargobob(int32_t _cargobob, int32_t _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7BEB0C7A235F6F3B);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createPickUpRopeForCargobob call failed" << Log::Endl;
	}
}

EXPORT void Native_removePickUpRopeForCargobob(int32_t _cargobob) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9768CF648F54C804);
	ctx->Reset();
	ctx->Push(_cargobob);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removePickUpRopeForCargobob call failed" << Log::Endl;
	}
}

EXPORT void Native_setPickupRopeLengthForCargobob(int32_t _cargobob, float _length1, float _length2, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x877C1EAEAC531023);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_length1);
	ctx->Push(_length2);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPickupRopeLengthForCargobob call failed" << Log::Endl;
	}
}

EXPORT void Native__0xC0ED6438E6D39BA8(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC0ED6438E6D39BA8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC0ED6438E6D39BA8 call failed" << Log::Endl;
	}
}

EXPORT void Native_setCargobobPickupRopeDampingMultiplier(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF1182F682F65307);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCargobobPickupRopeDampingMultiplier call failed" << Log::Endl;
	}
}

EXPORT void Native_setCargobobPickupRopeType(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D5F65A8F4EBDAB5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCargobobPickupRopeType call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesCargobobHavePickupMagnet(int32_t _cargobob) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E08BF5B3722BAC9);
	ctx->Reset();
	ctx->Push(_cargobob);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesCargobobHavePickupMagnet call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setCargobobPickupMagnetActive(int32_t _cargobob, bool _isActive) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9A665550F8DA349B);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_isActive);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCargobobPickupMagnetActive call failed" << Log::Endl;
	}
}

EXPORT void Native_setCargobobPickupMagnetStrength(int32_t _cargobob, float _strength) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCBFCD9D1DAC19E2);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_strength);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCargobobPickupMagnetStrength call failed" << Log::Endl;
	}
}

EXPORT void Native_setCargobobPickupMagnetEffectRadius(int32_t _cargobob, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA17BAD153B51547E);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCargobobPickupMagnetEffectRadius call failed" << Log::Endl;
	}
}

EXPORT void Native_setCargobobPickupMagnetReducedFalloff(int32_t _cargobob, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66979ACF5102FD2F);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCargobobPickupMagnetReducedFalloff call failed" << Log::Endl;
	}
}

EXPORT void Native_setCargobobPickupMagnetPullRopeLength(int32_t _cargobob, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D8EAC07506291FB);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCargobobPickupMagnetPullRopeLength call failed" << Log::Endl;
	}
}

EXPORT void Native_setCargobobPickupMagnetPullStrength(int32_t _cargobob, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xED8286F71A819BAA);
	ctx->Reset();
	ctx->Push(_cargobob);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCargobobPickupMagnetPullStrength call failed" << Log::Endl;
	}
}

EXPORT void Native_setCargobobPickupMagnetFalloff(int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x685D5561680D088B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCargobobPickupMagnetFalloff call failed" << Log::Endl;
	}
}

EXPORT void Native_setCargobobPickupMagnetReducedStrength(int32_t _vehicle, int32_t _cargobob) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE301BD63E9E13CF0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_cargobob);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCargobobPickupMagnetReducedStrength call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9BDDC73CC6A115D4(int32_t _vehicle, bool _p1, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BDDC73CC6A115D4);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9BDDC73CC6A115D4 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x56EB5E94318D3FB6(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x56EB5E94318D3FB6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x56EB5E94318D3FB6 call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesVehicleHaveWeapons(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x25ECB9F8017D98E0);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesVehicleHaveWeapons call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x2C4A1590ABF43E8B(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2C4A1590ABF43E8B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2C4A1590ABF43E8B call failed" << Log::Endl;
	}
}

EXPORT void Native_disableVehicleWeapon(bool _disabled, int32_t _weaponHash, int32_t _vehicle, int32_t _owner) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4FC6A6F67D8D856);
	ctx->Reset();
	ctx->Push(_disabled);
	ctx->Push(_weaponHash);
	ctx->Push(_vehicle);
	ctx->Push(_owner);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableVehicleWeapon call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleWeaponDisabled(int32_t _weaponHash, int32_t _vehicle, int32_t _owner) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x563B65A643ED072E);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_vehicle);
	ctx->Push(_owner);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleWeaponDisabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xE05DD0E9707003A3(int32_t _p0, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE05DD0E9707003A3);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE05DD0E9707003A3 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleActiveForPedNavigation(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x21115BCD6E44656A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleActiveForPedNavigation call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehicleClass(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x29439776AAA00A62);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleClass call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getVehicleClassFromName(int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDEDF1C8BD47C2200);
	ctx->Reset();
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleClassFromName call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPlayersLastVehicle(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBCDF8BAF56C87B6A);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayersLastVehicle call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleCanBeUsedByFleeingPeds(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x300504B23BD3B711);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleCanBeUsedByFleeingPeds call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE5810AC70602F2F5(int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE5810AC70602F2F5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE5810AC70602F2F5 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleDropsMoneyWhenBlownUp(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x068F64F2470F9656);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDropsMoneyWhenBlownUp call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleJetEngineOn(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8FBC8B1330CA9B4);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleJetEngineOn call failed" << Log::Endl;
	}
}

EXPORT void Native__0x6A973569BA094650(int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6A973569BA094650);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x6A973569BA094650 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleHandlingHashForAi(int32_t _vehicle, int32_t _hash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x10655FAB9915623D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_hash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleHandlingHashForAi call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleExtendedRemovalRange(int32_t _vehicle, int32_t _range) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x79DF7E806202CE01);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_range);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleExtendedRemovalRange call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleSteeringBiasScalar(int32_t _p0, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9007A2F21DC108D4);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleSteeringBiasScalar call failed" << Log::Endl;
	}
}

EXPORT void Native_setHelicopterRollPitchYawMult(int32_t _helicopter, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E0859B530A365CC);
	ctx->Reset();
	ctx->Push(_helicopter);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHelicopterRollPitchYawMult call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleFrictionOverride(int32_t _vehicle, float _friction) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1837AF7C627009BA);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_friction);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleFrictionOverride call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleWheelsCanBreakOffWhenBlowUp(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA37B9A517B133349);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleWheelsCanBreakOffWhenBlowUp call failed" << Log::Endl;
	}
}

EXPORT bool Native__0xF78F94D60248C737(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF78F94D60248C737);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF78F94D60248C737 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleCeilingHeight(int32_t _vehicle, float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA46413066687A328);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleCeilingHeight call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5E569EC46EC21CAE(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E569EC46EC21CAE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5E569EC46EC21CAE call failed" << Log::Endl;
	}
}

EXPORT void Native_clearVehicleRouteHistory(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6D6AF961B72728AE);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearVehicleRouteHistory call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesVehicleExistWithDecorator(const char* _decorator) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x956B409B984D9BF7);
	ctx->Reset();
	ctx->Push(_decorator);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesVehicleExistWithDecorator call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x41062318F23ED854(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41062318F23ED854);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x41062318F23ED854 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleExclusiveDriver(int32_t _vehicle, int32_t _ped, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB5C51B5502E85E83);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_ped);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleExclusiveDriver call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedExclusiveDriverOfVehicle(int32_t _ped, int32_t _vehicle, int32_t& _outIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB09D25E77C33EB3F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_vehicle);
	ctx->Push(_outIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedExclusiveDriverOfVehicle call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_disableIndividualPlanePropeller(int32_t _vehicle, int32_t _propeller) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x500873A45724C863);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_propeller);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableIndividualPlanePropeller call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleForceAfterburner(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB055A34527CB8FD7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleForceAfterburner call failed" << Log::Endl;
	}
}

EXPORT void Native_setDisableVehicleWindowCollisions(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1087BC8EC540DAEB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDisableVehicleWindowCollisions call failed" << Log::Endl;
	}
}

EXPORT void Native__0x4AD280EB48B2D8E6(int32_t _vehicle, bool _togle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AD280EB48B2D8E6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_togle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4AD280EB48B2D8E6 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB68CFAF83A02768D(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB68CFAF83A02768D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB68CFAF83A02768D call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0205F5365292D2EB(int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0205F5365292D2EB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0205F5365292D2EB call failed" << Log::Endl;
	}
}

EXPORT void Native__0xCF9159024555488C(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCF9159024555488C);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xCF9159024555488C call failed" << Log::Endl;
	}
}

EXPORT void Native_setDistantCarsEnabled(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF796359A959DF65D);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDistantCarsEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleNeonLightsColour(int32_t _vehicle, int32_t _r, int32_t _g, int32_t _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8E0A582209A62695);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleNeonLightsColour call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB93B2867F7B479D1(int32_t _vehicle, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB93B2867F7B479D1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB93B2867F7B479D1 call failed" << Log::Endl;
	}
}

EXPORT void Native_getVehicleNeonLightsColour(int32_t _vehicle, int32_t& _r, int32_t& _g, int32_t& _b) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7619EEE8C886757F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_r);
	ctx->Push(_g);
	ctx->Push(_b);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleNeonLightsColour call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleNeonLightEnabled(int32_t _vehicle, int32_t _index, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2AA720E4287BF269);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_index);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleNeonLightEnabled call failed" << Log::Endl;
	}
}

EXPORT bool Native_isVehicleNeonLightEnabled(int32_t _vehicle, int32_t _index) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C4B92553E4766A5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_index);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleNeonLightEnabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x35E0654F4BAD7971(bool _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x35E0654F4BAD7971);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x35E0654F4BAD7971 call failed" << Log::Endl;
	}
}

EXPORT void Native_disableVehicleNeonLights(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x83F813570FF519DE);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableVehicleNeonLights call failed" << Log::Endl;
	}
}

EXPORT void Native_setDisableSuperdummyMode(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB088E9A47AE6EDD5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDisableSuperdummyMode call failed" << Log::Endl;
	}
}

EXPORT void Native_requestVehicleDashboardScaleformMovie(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDBA3C090E3D74690);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestVehicleDashboardScaleformMovie call failed" << Log::Endl;
	}
}

EXPORT float Native_getVehicleBodyHealth(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF271147EB7B40F12);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleBodyHealth call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setVehicleBodyHealth(int32_t _vehicle, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB77D05AC8C78AADB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleBodyHealth call failed" << Log::Endl;
	}
}

EXPORT void Native_getVehicleSuspensionBounds(int32_t _vehicle, vector3_t& _out1, vector3_t& _out2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDF7E3EEB29642C38);
	ctx->Reset();
	ctx->Push(_vehicle);
	alt::INative::Vector3 converted_out1 { _out1.x, 0, _out1.y, 0, _out1.z };
	ctx->Push(&converted_out1);
	alt::INative::Vector3 converted_out2 { _out2.x, 0, _out2.y, 0, _out2.z };
	ctx->Push(&converted_out2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleSuspensionBounds call failed" << Log::Endl;
	}
	_out1.x = converted_out1.x;
	_out1.y = converted_out1.y;
	_out1.z = converted_out1.z;
	_out2.x = converted_out2.x;
	_out2.y = converted_out2.y;
	_out2.z = converted_out2.z;
}

EXPORT float Native_getVehicleSuspensionHeight(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x53952FD2BAA19F17);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleSuspensionHeight call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setCarHighSpeedBumpSeverityMultiplier(float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84FD40F56075E816);
	ctx->Reset();
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCarHighSpeedBumpSeverityMultiplier call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getNumberOfVehicleDoors(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x92922A607497B14D);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNumberOfVehicleDoors call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setHydraulicRaised(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28B18377EB6E25F6);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHydraulicRaised call failed" << Log::Endl;
	}
}

EXPORT void Native__0xA7DCDF4DED40A8F4(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA7DCDF4DED40A8F4);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA7DCDF4DED40A8F4 call failed" << Log::Endl;
	}
}

EXPORT float Native_getVehicleBodyHealth2(int32_t _vehicle, float _maxEngineHealth, float _maxPetrolTankHealth, float _maxBodyHealth, float _maxMainRotorHealth, float _maxTailRotorHealth, float _maxUnkHealth) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB8EF61207C2393A9);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_maxEngineHealth);
	ctx->Push(_maxPetrolTankHealth);
	ctx->Push(_maxBodyHealth);
	ctx->Push(_maxMainRotorHealth);
	ctx->Push(_maxTailRotorHealth);
	ctx->Push(_maxUnkHealth);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleBodyHealth2 call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT bool Native__0xD4C4642CB7F50B5D(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4C4642CB7F50B5D);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD4C4642CB7F50B5D call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xC361AA040D6637A8(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC361AA040D6637A8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xC361AA040D6637A8 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleKersAllowed(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99C82F8A139F3E4E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleKersAllowed call failed" << Log::Endl;
	}
}

EXPORT bool Native_getVehicleHasKers(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50634E348C8D44EF);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleHasKers call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xE16142B94664DEFD(int32_t _vehicle, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE16142B94664DEFD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE16142B94664DEFD call failed" << Log::Endl;
	}
}

EXPORT void Native__0x26D99D5A82FD18E8(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26D99D5A82FD18E8);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x26D99D5A82FD18E8 call failed" << Log::Endl;
	}
}

EXPORT void Native_setHydraulicWheelValue(int32_t _vehicle, int32_t _wheelId, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x84EA99C62CB3EF0C);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelId);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHydraulicWheelValue call failed" << Log::Endl;
	}
}

EXPORT float Native_getHydraulicWheelValue(int32_t _vehicle, int32_t _wheelId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BB5CBDDD0F25AE3);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHydraulicWheelValue call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setCamberedWheelsDisabled(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1201E8A3290A3B98);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCamberedWheelsDisabled call failed" << Log::Endl;
	}
}

EXPORT void Native_setHydraulicWheelState(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EA86DF356801C7D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHydraulicWheelState call failed" << Log::Endl;
	}
}

EXPORT void Native_setHydraulicWheelStateTransition(int32_t _vehicle, int32_t _wheelId, int32_t _state, float _value, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC24075310A8B9CD1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelId);
	ctx->Push(_state);
	ctx->Push(_value);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setHydraulicWheelStateTransition call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x5BA68A0840D546AC(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BA68A0840D546AC);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5BA68A0840D546AC call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x4419966C9936071A(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4419966C9936071A);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x4419966C9936071A call failed" << Log::Endl;
	}
}

EXPORT void Native__0x870B8B7A766615C8(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x870B8B7A766615C8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x870B8B7A766615C8 call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x8533CAFDE1F0F336(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8533CAFDE1F0F336);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8533CAFDE1F0F336 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_setVehicleDamageModifier(int32_t _vehicle, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4E20D2A627011E8E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleDamageModifier call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setVehicleUnkDamageMultiplier(int32_t _vehicle, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x45A561A9421AB6AD);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleUnkDamageMultiplier call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0xD4196117AF7BB974(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD4196117AF7BB974);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD4196117AF7BB974 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0xBB2333BB87DDD87F(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBB2333BB87DDD87F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBB2333BB87DDD87F call failed" << Log::Endl;
	}
}

EXPORT void Native__0x73561D4425A021A2(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x73561D4425A021A2);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x73561D4425A021A2 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleControlsInverted(int32_t _vehicle, bool _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5B91B229243351A8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleControlsInverted call failed" << Log::Endl;
	}
}

EXPORT void Native__0x7BBE7FF626A591FE(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7BBE7FF626A591FE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x7BBE7FF626A591FE call failed" << Log::Endl;
	}
}

EXPORT void Native__0x65B080555EA48149(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65B080555EA48149);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x65B080555EA48149 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x428AD3E26C8D9EB0(int32_t _vehicle, float _x, float _y, float _z, float _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x428AD3E26C8D9EB0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x428AD3E26C8D9EB0 call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE2F53F172B45EDE1() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE2F53F172B45EDE1);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE2F53F172B45EDE1 call failed" << Log::Endl;
	}
}

EXPORT bool Native__0xBA91D045575699AD(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA91D045575699AD);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xBA91D045575699AD call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x80E3357FDEF45C21(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x80E3357FDEF45C21);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x80E3357FDEF45C21 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleRampLaunchModifier(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFC13B1CE30D755D);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleRampLaunchModifier call failed" << Log::Endl;
	}
}

EXPORT bool Native_getIsDoorValid(int32_t _vehicle, int32_t _doorId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x645F4B6E8499F632);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_doorId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsDoorValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleRocketBoostRefillTime(int32_t _vehicle, float _seconds) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE00F2AB100B76E89);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_seconds);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleRocketBoostRefillTime call failed" << Log::Endl;
	}
}

EXPORT bool Native_getHasRocketBoost(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36D782F68B309BDA);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHasRocketBoost call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isVehicleRocketBoostActive(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3D34E80EED4AE3BE);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isVehicleRocketBoostActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleRocketBoostActive(int32_t _vehicle, bool _active) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x81E1552E35DC3839);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_active);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleRocketBoostActive call failed" << Log::Endl;
	}
}

EXPORT bool Native_getHasRetractableWheels(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCA174A42133F08C);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHasRetractableWheels call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getIsWheelsLoweredStateActive(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1DA0DA9CB3F0C8BF);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsWheelsLoweredStateActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_raiseRetractableWheels(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF660602546D27BA8);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native raiseRetractableWheels call failed" << Log::Endl;
	}
}

EXPORT void Native_lowerRetractableWheels(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5335BE58C083E74E);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native lowerRetractableWheels call failed" << Log::Endl;
	}
}

EXPORT bool Native_getCanVehicleJump(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9078C0C5EF8C19E9);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCanVehicleJump call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setUseHigherVehicleJumpForce(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF06A16CA55D138D8);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setUseHigherVehicleJumpForce call failed" << Log::Endl;
	}
}

EXPORT void Native__0xB2E0C0D6922D31F2(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB2E0C0D6922D31F2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xB2E0C0D6922D31F2 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleWeaponCapacity(int32_t _vehicle, int32_t _weaponIndex, int32_t _capacity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44CD1F493DB2A0A6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_weaponIndex);
	ctx->Push(_capacity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleWeaponCapacity call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehicleWeaponCapacity(int32_t _vehicle, int32_t _weaponIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8181CE2F25CB9BB7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_weaponIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleWeaponCapacity call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getVehicleHasParachute(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC9CFF381338CB4F);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleHasParachute call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getVehicleCanActivateParachute(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA916396DF4154EE3);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleCanActivateParachute call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setVehicleParachuteActive(int32_t _vehicle, bool _active) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BFFB028B3DD0A97);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_active);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleParachuteActive call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x3DE51E9C80B116CF(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3DE51E9C80B116CF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3DE51E9C80B116CF call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setVehicleReceivesRampDamage(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x28D034A93FE31BF5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleReceivesRampDamage call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleRampSidewaysLaunchMotion(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1BBAC99C0BC53656);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleRampSidewaysLaunchMotion call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleRampUpwardsLaunchMotion(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x756AE6E962168A04);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleRampUpwardsLaunchMotion call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9D30687C57BAA0BB(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9D30687C57BAA0BB);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9D30687C57BAA0BB call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleWeaponsDisabled(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x86B4B6212CB8B627);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleWeaponsDisabled call failed" << Log::Endl;
	}
}

EXPORT void Native__0x41290B40FA63E6DA(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41290B40FA63E6DA);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x41290B40FA63E6DA call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleParachuteModel(int32_t _vehicle, int32_t _modelHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D610C6B56031351);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_modelHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleParachuteModel call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleParachuteTextureVariation(int32_t _vehicle, int32_t _textureVariation) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA74AD2439468C883);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_textureVariation);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleParachuteTextureVariation call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x0419B167EE128F33(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0419B167EE128F33);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0419B167EE128F33 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xF3B0E0AED097A3F5(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF3B0E0AED097A3F5);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF3B0E0AED097A3F5 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xD3E51C0AB8C26EEE(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD3E51C0AB8C26EEE);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xD3E51C0AB8C26EEE call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getAllVehicles(int32_t& _vehsStruct) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9B8E1BF04B51F2E8);
	ctx->Reset();
	ctx->Push(_vehsStruct);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getAllVehicles call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x72BECCF4B829522E(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x72BECCF4B829522E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x72BECCF4B829522E call failed" << Log::Endl;
	}
}

EXPORT void Native__0x66E3AAFACE2D1EB8(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x66E3AAFACE2D1EB8);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x66E3AAFACE2D1EB8 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x1312DDD8385AEE4E(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1312DDD8385AEE4E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x1312DDD8385AEE4E call failed" << Log::Endl;
	}
}

EXPORT void Native__0xEDBC8405B3895CC9(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEDBC8405B3895CC9);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xEDBC8405B3895CC9 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x26E13D440E7F6064(int32_t _vehicle, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x26E13D440E7F6064);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x26E13D440E7F6064 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x2FA2494B47FDD009(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2FA2494B47FDD009);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x2FA2494B47FDD009 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleRocketBoostPercentage(int32_t _vehicle, float _percentage) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFEB2DDED3509562E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_percentage);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleRocketBoostPercentage call failed" << Log::Endl;
	}
}

EXPORT void Native_setOppressorTransformState(int32_t _vehicle, bool _state) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x544996C0081ABDEB);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_state);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setOppressorTransformState call failed" << Log::Endl;
	}
}

EXPORT void Native__0x78CEEE41F49F421F(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78CEEE41F49F421F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x78CEEE41F49F421F call failed" << Log::Endl;
	}
}

EXPORT void Native__0xAF60E6A2936F982A(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAF60E6A2936F982A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAF60E6A2936F982A call failed" << Log::Endl;
	}
}

EXPORT void Native__0x430A7631A84C9BE7(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x430A7631A84C9BE7);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x430A7631A84C9BE7 call failed" << Log::Endl;
	}
}

EXPORT void Native_disableVehicleWorldCollision(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75627043C6AA90AD);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native disableVehicleWorldCollision call failed" << Log::Endl;
	}
}

EXPORT void Native__0x8235F1BEAD557629(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8235F1BEAD557629);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8235F1BEAD557629 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x9640E30A7F395E4B(int32_t _vehicle, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9640E30A7F395E4B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x9640E30A7F395E4B call failed" << Log::Endl;
	}
}

EXPORT void Native__0x0BBB9A7A8FFE931B(int32_t _p0, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0BBB9A7A8FFE931B);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0BBB9A7A8FFE931B call failed" << Log::Endl;
	}
}

EXPORT void Native_setCargobobHookCanAttach(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x94A68DA412C4007D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCargobobHookCanAttach call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleBombCount(int32_t _vehicle, int32_t _bombCount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF4B2ED59DEB5D774);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_bombCount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleBombCount call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehicleBombCount(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEA12BD130D7569A1);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleBombCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setVehicleCountermeasureCount(int32_t _vehicle, int32_t _counterMeasureCount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9BDA23BF666F0855);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_counterMeasureCount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleCountermeasureCount call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getVehicleCountermeasureCount(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF846AA63DF56B804);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getVehicleCountermeasureCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x0A3F820A9A9A9AC5(int32_t _vehicle, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A3F820A9A9A9AC5);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x0A3F820A9A9A9AC5 call failed" << Log::Endl;
	}
}

EXPORT bool Native__0x51F30DB60626A20E(int32_t _vehicle, float _x, float _y, float _z, float _rotX, float _rotY, float _rotZ, int32_t _p7, int32_t _p8) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x51F30DB60626A20E);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_rotX);
	ctx->Push(_rotY);
	ctx->Push(_rotZ);
	ctx->Push(_p7);
	ctx->Push(_p8);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x51F30DB60626A20E call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x97841634EF7DF1D6(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x97841634EF7DF1D6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x97841634EF7DF1D6 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleHoverTransformRatio(int32_t _vehicle, float _ratio) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD138FA15C9776837);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_ratio);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleHoverTransformRatio call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleHoverTransformPercentage(int32_t _vehicle, float _percentage) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x438B3D7CA026FE91);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_percentage);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleHoverTransformPercentage call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleHoverTransformEnabled(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF1211889DF15A763);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleHoverTransformEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleHoverTransformActive(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D55FE374D5FDB91);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleHoverTransformActive call failed" << Log::Endl;
	}
}

EXPORT int32_t Native__0x3A9128352EAC9E85(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A9128352EAC9E85);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x3A9128352EAC9E85 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT vector3_t Native_findRandomPointInSpace(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DC9675797123522);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native findRandomPointInSpace call failed" << Log::Endl;
	}
	auto resultVec = ctx->ResultVector3();
	return { resultVec.x, resultVec.y, resultVec.z };
}

EXPORT void Native_setDeployHeliStubWings(int32_t _vehicle, bool _deploy, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB251E0B33E58B424);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_deploy);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDeployHeliStubWings call failed" << Log::Endl;
	}
}

EXPORT bool Native_areHeliStubWingsDeployed(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAEF12960FA943792);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native areHeliStubWingsDeployed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0xAA653AE61924B0A0(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA653AE61924B0A0);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xAA653AE61924B0A0 call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleTurretUnk(int32_t _vehicle, int32_t _index, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC60060EB0D8AC7B1);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_index);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleTurretUnk call failed" << Log::Endl;
	}
}

EXPORT void Native_setSpecialflightWingRatio(int32_t _vehicle, float _ratio) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x70A252F60A3E036B);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_ratio);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setSpecialflightWingRatio call failed" << Log::Endl;
	}
}

EXPORT void Native_setDisableTurretMovementThisFrame(int32_t _vehicle, int32_t _turretId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE615BB7A7752C76A);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_turretId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDisableTurretMovementThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native__0x887FA38787DE8C72(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x887FA38787DE8C72);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x887FA38787DE8C72 call failed" << Log::Endl;
	}
}

EXPORT void Native_setUnkFloat0x104ForSubmarineVehicleTask(int32_t _vehicle, float _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x498218259FB7C72D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setUnkFloat0x104ForSubmarineVehicleTask call failed" << Log::Endl;
	}
}

EXPORT void Native_setUnkBool0x102ForSubmarineVehicleTask(int32_t _vehicle, bool _value) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x41B9FB92EDED32A6);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_value);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setUnkBool0x102ForSubmarineVehicleTask call failed" << Log::Endl;
	}
}

EXPORT void Native__0x36DE109527A2C0C4(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36DE109527A2C0C4);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x36DE109527A2C0C4 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x82E0AC411E41A5B4(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x82E0AC411E41A5B4);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x82E0AC411E41A5B4 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x99A05839C46CE316(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x99A05839C46CE316);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x99A05839C46CE316 call failed" << Log::Endl;
	}
}

EXPORT bool Native_getIsVehicleShuntBoostActive(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2459F72C14E2E8D);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsVehicleShuntBoostActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native__0xE8718FAF591FD224(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE8718FAF591FD224);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE8718FAF591FD224 call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getLastRammedVehicle(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x04F2FA6E234162F7);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getLastRammedVehicle call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setDisableVehicleUnk(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x143921E45EC44D62);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDisableVehicleUnk call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleNitroEnabled(int32_t _vehicle, bool _toggle, float _level, float _power, float _rechargeTime, bool _disableSound) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8E9B6B71B8E660D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	ctx->Push(_level);
	ctx->Push(_power);
	ctx->Push(_rechargeTime);
	ctx->Push(_disableSound);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleNitroEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native_setVehicleWheelsDealDamage(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2970EAA18FD5E42F);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setVehicleWheelsDealDamage call failed" << Log::Endl;
	}
}

EXPORT void Native_setDisableVehicleUnk2(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x211E95CE9903940C);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDisableVehicleUnk2 call failed" << Log::Endl;
	}
}

EXPORT void Native__0x5BBCF35BF6E456F7(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5BBCF35BF6E456F7);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x5BBCF35BF6E456F7 call failed" << Log::Endl;
	}
}

EXPORT bool Native_getDoesVehicleHaveTombstone(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x71AFB258CCED3A27);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDoesVehicleHaveTombstone call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_hideVehicleTombstone(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAE71FB656C600587);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hideVehicleTombstone call failed" << Log::Endl;
	}
}

EXPORT bool Native_getIsVehicleEmpDisabled(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0506ED94363AD905);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsVehicleEmpDisabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x8F0D5BA1C2CC91D7(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8F0D5BA1C2CC91D7);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x8F0D5BA1C2CC91D7 call failed" << Log::Endl;
	}
}

EXPORT float Native_getTyreHealth(int32_t _vehicle, int32_t _wheelIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x55EAB010FAEE9380);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTyreHealth call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setTyreHealth(int32_t _vehicle, int32_t _wheelIndex, float _health) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x74C68EF97645E79D);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelIndex);
	ctx->Push(_health);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTyreHealth call failed" << Log::Endl;
	}
}

EXPORT float Native_getTyreWearMultiplier(int32_t _vehicle, int32_t _wheelIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6E387895952F4F71);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getTyreWearMultiplier call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setTyreWearMultiplier(int32_t _vehicle, int32_t _wheelIndex, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x01894E2EDE923CA2);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelIndex);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTyreWearMultiplier call failed" << Log::Endl;
	}
}

EXPORT void Native_setTyreTractionLossMultiplier(int32_t _vehicle, int32_t _wheelIndex, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC970D0E0FC31D768);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_wheelIndex);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setTyreTractionLossMultiplier call failed" << Log::Endl;
	}
}

EXPORT void Native__0xF8B49F5BA7F850E7(int32_t _vehicle, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF8B49F5BA7F850E7);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xF8B49F5BA7F850E7 call failed" << Log::Endl;
	}
}

EXPORT void Native_setReduceDriftVehicleSuspension(int32_t _vehicle, bool _enable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A375167F5782A65);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_enable);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setReduceDriftVehicleSuspension call failed" << Log::Endl;
	}
}

EXPORT void Native_setDriftTyresEnabled(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5AC79C98C5C17F05);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDriftTyresEnabled call failed" << Log::Endl;
	}
}

EXPORT bool Native_getDriftTyresEnabled(int32_t _vehicle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2F5A72430E78C8D3);
	ctx->Reset();
	ctx->Push(_vehicle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDriftTyresEnabled call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_networkUseHighPrecisionVehicleBlending(int32_t _vehicle, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEC0C1D4922AF9754);
	ctx->Reset();
	ctx->Push(_vehicle);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native networkUseHighPrecisionVehicleBlending call failed" << Log::Endl;
	}
}

EXPORT bool Native_getWaterHeight(float _x, float _y, float _z, float& _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF6829842C06AE524);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWaterHeight call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getWaterHeightNoWaves(float _x, float _y, float _z, float& _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8EE6B53CE13A9794);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWaterHeightNoWaves call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_testProbeAgainstWater(float _x1, float _y1, float _z1, float _x2, float _y2, float _z2, vector3_t& _result) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFFA5D878809819DB);
	ctx->Reset();
	ctx->Push(_x1);
	ctx->Push(_y1);
	ctx->Push(_z1);
	ctx->Push(_x2);
	ctx->Push(_y2);
	ctx->Push(_z2);
	alt::INative::Vector3 converted_result { _result.x, 0, _result.y, 0, _result.z };
	ctx->Push(&converted_result);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native testProbeAgainstWater call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_result.x = converted_result.x;
	_result.y = converted_result.y;
	_result.z = converted_result.z;
}

EXPORT bool Native_testProbeAgainstAllWater(int32_t _p0, int32_t _p1, int32_t _p2, int32_t _p3, int32_t _p4, int32_t _p5, int32_t _p6, int32_t _p7) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8974647ED222EA5F);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native testProbeAgainstAllWater call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_testVerticalProbeAgainstAllWater(float _x, float _y, float _z, int32_t _p3, float& _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B3451FA1E3142E2);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_p3);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native testVerticalProbeAgainstAllWater call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_modifyWater(float _x, float _y, float _radius, float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC443FD757C3BA637);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_radius);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native modifyWater call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_addCurrentRise(float _xLow, float _yLow, float _xHigh, float _yHigh, float _height) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFDBF4CDBC07E1706);
	ctx->Reset();
	ctx->Push(_xLow);
	ctx->Push(_yLow);
	ctx->Push(_xHigh);
	ctx->Push(_yHigh);
	ctx->Push(_height);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addCurrentRise call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_removeCurrentRise(int32_t _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1252E3E59A82AAF);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeCurrentRise call failed" << Log::Endl;
	}
}

EXPORT void Native_setDeepOceanScaler(float _intensity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB96B00E976BE977F);
	ctx->Reset();
	ctx->Push(_intensity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setDeepOceanScaler call failed" << Log::Endl;
	}
}

EXPORT float Native_getDeepOceanScaler() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B2A2CC86778B619);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getDeepOceanScaler call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native__0x547237AA71AB44DE(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x547237AA71AB44DE);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x547237AA71AB44DE call failed" << Log::Endl;
	}
}

EXPORT void Native_resetDeepOceanScaler() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5E5E99285AE812DB);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native resetDeepOceanScaler call failed" << Log::Endl;
	}
}

EXPORT void Native_enableLaserSightRendering(bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC8B46D7727D864AA);
	ctx->Reset();
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native enableLaserSightRendering call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getWeaponComponentTypeModel(int32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0DB57B41EC1DB083);
	ctx->Reset();
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeaponComponentTypeModel call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getWeapontypeModel(int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF46CDC33180FDA94);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeapontypeModel call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getWeapontypeSlot(int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4215460B9B8B7FA0);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeapontypeSlot call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getWeapontypeGroup(int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC3287EE3050FB74C);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeapontypeGroup call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getWeaponComponentVariantExtraComponentCount(int32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6558AC7C17BFEF58);
	ctx->Reset();
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeaponComponentVariantExtraComponentCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getWeaponComponentVariantExtraComponentModel(int32_t _componentHash, int32_t _extraComponentIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4D1CB8DC40208A17);
	ctx->Reset();
	ctx->Push(_componentHash);
	ctx->Push(_extraComponentIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeaponComponentVariantExtraComponentModel call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setCurrentPedWeapon(int32_t _ped, int32_t _weaponHash, bool _bForceInHand) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xADF692B254977C0C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_bForceInHand);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCurrentPedWeapon call failed" << Log::Endl;
	}
}

EXPORT bool Native_getCurrentPedWeapon(int32_t _ped, int32_t& _weaponHash, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3A87E44BB9A01D54);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCurrentPedWeapon call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getCurrentPedWeaponEntityIndex(int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3B390A939AF0B5FC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCurrentPedWeaponEntityIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getBestPedWeapon(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8483E98E8B888AE2);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getBestPedWeapon call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_setCurrentPedVehicleWeapon(int32_t _ped, int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x75C55983C2C39DAA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCurrentPedVehicleWeapon call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getCurrentPedVehicleWeapon(int32_t _ped, int32_t& _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1017582BCD3832DC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getCurrentPedVehicleWeapon call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native__0x50276EF8172F5F12(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50276EF8172F5F12);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x50276EF8172F5F12 call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedArmed(int32_t _ped, int32_t _typeFlags) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x475768A975D5AD17);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_typeFlags);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedArmed call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isWeaponValid(int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x937C71165CF334B3);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isWeaponValid call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_hasPedGotWeapon(int32_t _ped, int32_t _weaponHash, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8DECB02F88F428BC);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasPedGotWeapon call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedWeaponReadyToShoot(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB80CA294F2F26749);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedWeaponReadyToShoot call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getPedWeapontypeInSlot(int32_t _ped, int32_t _weaponSlot) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFFED78E9011134D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponSlot);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedWeapontypeInSlot call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getAmmoInPedWeapon(int32_t _ped, int32_t _weaponhash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x015A522136D7F951);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponhash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getAmmoInPedWeapon call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_addAmmoToPed(int32_t _ped, int32_t _weaponHash, int32_t _ammo) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x78F0424C34306220);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_ammo);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addAmmoToPed call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedAmmo(int32_t _ped, int32_t _weaponHash, int32_t _ammo, bool _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x14E56BC5B5DB6A19);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_ammo);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAmmo call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedInfiniteAmmo(int32_t _ped, bool _toggle, int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3EDCB0505123623B);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedInfiniteAmmo call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedInfiniteAmmoClip(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x183DADC6AA953186);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedInfiniteAmmoClip call failed" << Log::Endl;
	}
}

EXPORT void Native__0x24C024BA8379A70A(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x24C024BA8379A70A);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x24C024BA8379A70A call failed" << Log::Endl;
	}
}

EXPORT void Native_giveWeaponToPed(int32_t _ped, int32_t _weaponHash, int32_t _ammoCount, bool _isHidden, bool _bForceInHand) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBF0FD6E56C964FCB);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_ammoCount);
	ctx->Push(_isHidden);
	ctx->Push(_bForceInHand);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native giveWeaponToPed call failed" << Log::Endl;
	}
}

EXPORT void Native_giveDelayedWeaponToPed(int32_t _ped, int32_t _weaponHash, int32_t _ammoCount, bool _bForceInHand) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB282DC6EBD803C75);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_ammoCount);
	ctx->Push(_bForceInHand);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native giveDelayedWeaponToPed call failed" << Log::Endl;
	}
}

EXPORT void Native_removeAllPedWeapons(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF25DF915FA38C5F3);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeAllPedWeapons call failed" << Log::Endl;
	}
}

EXPORT void Native_removeWeaponFromPed(int32_t _ped, int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4899CB088EDF59B8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeWeaponFromPed call failed" << Log::Endl;
	}
}

EXPORT void Native_hidePedWeaponForScriptedCutscene(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6F6981D2253C208F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hidePedWeaponForScriptedCutscene call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedCurrentWeaponVisible(int32_t _ped, bool _visible, bool _deselectWeapon, bool _p3, bool _p4) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0725A4CCFDED9A70);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_visible);
	ctx->Push(_deselectWeapon);
	ctx->Push(_p3);
	ctx->Push(_p4);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedCurrentWeaponVisible call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedDropsWeaponsWhenDead(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x476AE72C1D19D1A8);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDropsWeaponsWhenDead call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasPedBeenDamagedByWeapon(int32_t _ped, int32_t _weaponHash, int32_t _weaponType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2D343D2219CD027A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_weaponType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasPedBeenDamagedByWeapon call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_clearPedLastWeaponDamage(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0E98F88A24C5F4B8);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPedLastWeaponDamage call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasEntityBeenDamagedByWeapon(int32_t _entity, int32_t _weaponHash, int32_t _weaponType) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x131D401334815E94);
	ctx->Reset();
	ctx->Push(_entity);
	ctx->Push(_weaponHash);
	ctx->Push(_weaponType);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasEntityBeenDamagedByWeapon call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_clearEntityLastWeaponDamage(int32_t _entity) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAC678E40BE7C74D2);
	ctx->Reset();
	ctx->Push(_entity);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearEntityLastWeaponDamage call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedDropsWeapon(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6B7513D9966FBEC0);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDropsWeapon call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedDropsInventoryWeapon(int32_t _ped, int32_t _weaponHash, float _xOffset, float _yOffset, float _zOffset, int32_t _ammoCount) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x208A1888007FC0E6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_xOffset);
	ctx->Push(_yOffset);
	ctx->Push(_zOffset);
	ctx->Push(_ammoCount);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedDropsInventoryWeapon call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getMaxAmmoInClip(int32_t _ped, int32_t _weaponHash, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA38DCFFCEA8962FA);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMaxAmmoInClip call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getAmmoInClip(int32_t _ped, int32_t _weaponHash, int32_t& _ammo) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2E1202248937775C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_ammo);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getAmmoInClip call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_setAmmoInClip(int32_t _ped, int32_t _weaponHash, int32_t _ammo) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDCD2A934D65CB497);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_ammo);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setAmmoInClip call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getMaxAmmo(int32_t _ped, int32_t _weaponHash, int32_t& _ammo) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDC16122C7A20C933);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_ammo);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMaxAmmo call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getMaxAmmoByType(int32_t _ped, int32_t _ammoTypeHash, int32_t& _ammo) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x585847C5E4E11709);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ammoTypeHash);
	ctx->Push(_ammo);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMaxAmmoByType call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_addAmmoToPedByType(int32_t _ped, int32_t _ammoTypeHash, int32_t _ammo) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2472622CE1F2D45F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ammoTypeHash);
	ctx->Push(_ammo);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native addAmmoToPedByType call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedAmmoByType(int32_t _ped, int32_t _ammoTypeHash, int32_t _ammo) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5FD1E1F011E76D7E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ammoTypeHash);
	ctx->Push(_ammo);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAmmoByType call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedAmmoByType(int32_t _ped, int32_t _ammoTypeHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x39D22031557946C1);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_ammoTypeHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedAmmoByType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedAmmoToDrop(int32_t _ped, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA4EFEF9440A5B0EF);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedAmmoToDrop call failed" << Log::Endl;
	}
}

EXPORT void Native_setPickupAmmoAmountScaler(float _p0) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE620FD3512A04F18);
	ctx->Reset();
	ctx->Push(_p0);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPickupAmmoAmountScaler call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedAmmoTypeFromWeapon(int32_t _ped, int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7FEAD38B326B9F74);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedAmmoTypeFromWeapon call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getPedAmmoTypeFromWeapon2(int32_t _ped, int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF489B44DD5AF4BD9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedAmmoTypeFromWeapon2 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_getPedLastWeaponImpactCoord(int32_t _ped, vector3_t& _coords) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x6C4D0409BA1A2BC2);
	ctx->Reset();
	ctx->Push(_ped);
	alt::INative::Vector3 converted_coords { _coords.x, 0, _coords.y, 0, _coords.z };
	ctx->Push(&converted_coords);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedLastWeaponImpactCoord call failed" << Log::Endl;
	}
	return ctx->ResultBool();
	_coords.x = converted_coords.x;
	_coords.y = converted_coords.y;
	_coords.z = converted_coords.z;
}

EXPORT void Native_setPedGadget(int32_t _ped, int32_t _gadgetHash, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD0D7B1E680ED4A1A);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_gadgetHash);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedGadget call failed" << Log::Endl;
	}
}

EXPORT bool Native_getIsPedGadgetEquipped(int32_t _ped, int32_t _gadgetHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF731332072F5156C);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_gadgetHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getIsPedGadgetEquipped call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getSelectedPedWeapon(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0A6DB4965674D243);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getSelectedPedWeapon call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_explodeProjectiles(int32_t _ped, int32_t _weaponHash, bool _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC4BD125DE7611E4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native explodeProjectiles call failed" << Log::Endl;
	}
}

EXPORT void Native_removeAllProjectilesOfType(int32_t _weaponHash, bool _explode) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xFC52E0F37E446528);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_explode);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeAllProjectilesOfType call failed" << Log::Endl;
	}
}

EXPORT float Native_getLockonDistanceOfCurrentPedWeapon(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x840F03E9041E2C9C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getLockonDistanceOfCurrentPedWeapon call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT float Native_getMaxRangeOfCurrentPedWeapon(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x814C9D19DFD69679);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getMaxRangeOfCurrentPedWeapon call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT bool Native_hasVehicleGotProjectileAttached(int32_t _driver, int32_t _vehicle, int32_t _weaponHash, int32_t _p3) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x717C8481234E3B88);
	ctx->Reset();
	ctx->Push(_driver);
	ctx->Push(_vehicle);
	ctx->Push(_weaponHash);
	ctx->Push(_p3);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasVehicleGotProjectileAttached call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_giveWeaponComponentToPed(int32_t _ped, int32_t _weaponHash, int32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD966D51AA5B28BB9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native giveWeaponComponentToPed call failed" << Log::Endl;
	}
}

EXPORT void Native_removeWeaponComponentFromPed(int32_t _ped, int32_t _weaponHash, int32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E8BE90C74FB4C09);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeWeaponComponentFromPed call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasPedGotWeaponComponent(int32_t _ped, int32_t _weaponHash, int32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xC593212475FAE340);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasPedGotWeaponComponent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isPedWeaponComponentActive(int32_t _ped, int32_t _weaponHash, int32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0D78DE0572D3969E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedWeaponComponentActive call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_refillAmmoInstantly(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8C0D57EA686FAD87);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native refillAmmoInstantly call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_makePedReload(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x20AE33F3AC9C0033);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native makePedReload call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_requestWeaponAsset(int32_t _weaponHash, int32_t _p1, int32_t _p2) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5443438F033E29C3);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_p1);
	ctx->Push(_p2);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestWeaponAsset call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasWeaponAssetLoaded(int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x36E353271F0E90EE);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasWeaponAssetLoaded call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeWeaponAsset(int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xAA08EF13F341C8FC);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeWeaponAsset call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_createWeaponObject(int32_t _weaponHash, int32_t _ammoCount, float _x, float _y, float _z, bool _showWorldModel, float _scale, int32_t _p7, int32_t _p8, int32_t _p9) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9541D3CF0D398F36);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_ammoCount);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_showWorldModel);
	ctx->Push(_scale);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createWeaponObject call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_giveWeaponComponentToWeaponObject(int32_t _weaponObject, int32_t _addonHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x33E179436C0B31DB);
	ctx->Reset();
	ctx->Push(_weaponObject);
	ctx->Push(_addonHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native giveWeaponComponentToWeaponObject call failed" << Log::Endl;
	}
}

EXPORT void Native_removeWeaponComponentFromWeaponObject(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF7D82B0D66777611);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeWeaponComponentFromWeaponObject call failed" << Log::Endl;
	}
}

EXPORT bool Native_hasWeaponGotWeaponComponent(int32_t _weapon, int32_t _addonHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x76A18844E743BF91);
	ctx->Reset();
	ctx->Push(_weapon);
	ctx->Push(_addonHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native hasWeaponGotWeaponComponent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_giveWeaponObjectToPed(int32_t _weaponObject, int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB1FA61371AF7C4B7);
	ctx->Reset();
	ctx->Push(_weaponObject);
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native giveWeaponObjectToPed call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesWeaponTakeWeaponComponent(int32_t _weaponHash, int32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5CEE3DF569CECAB0);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesWeaponTakeWeaponComponent call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_getWeaponObjectFromPed(int32_t _ped, bool _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCAE1DC9A0E22A16D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeaponObjectFromPed call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_giveLoadoutToPed(int32_t _ped, int32_t _loadoutHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x68F8BE6AF5CDF8A6);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_loadoutHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native giveLoadoutToPed call failed" << Log::Endl;
	}
}

EXPORT void Native_setPedWeaponTintIndex(int32_t _ped, int32_t _weaponHash, int32_t _tintIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x50969B9B89ED5738);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_tintIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedWeaponTintIndex call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedWeaponTintIndex(int32_t _ped, int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x2B9EEDC07BD06B9F);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedWeaponTintIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setWeaponObjectTintIndex(int32_t _weapon, int32_t _tintIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF827589017D4E4A9);
	ctx->Reset();
	ctx->Push(_weapon);
	ctx->Push(_tintIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWeaponObjectTintIndex call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getWeaponObjectTintIndex(int32_t _weapon) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD183314F7CD2E57);
	ctx->Reset();
	ctx->Push(_weapon);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeaponObjectTintIndex call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getWeaponTintCount(int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DCF6C5CAB2E9BF7);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeaponTintCount call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setPedWeaponLiveryColor(int32_t _ped, int32_t _weaponHash, int32_t _camoComponentHash, int32_t _colorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9FE5633880ECD8ED);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_camoComponentHash);
	ctx->Push(_colorIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedWeaponLiveryColor call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getPedWeaponLiveryColor(int32_t _ped, int32_t _weaponHash, int32_t _camoComponentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xF0A60040BE558F2D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_camoComponentHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getPedWeaponLiveryColor call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setWeaponObjectLiveryColor(int32_t _weaponObject, int32_t _camoComponentHash, int32_t _colorIndex) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5DA825A85D0EA6E6);
	ctx->Reset();
	ctx->Push(_weaponObject);
	ctx->Push(_camoComponentHash);
	ctx->Push(_colorIndex);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWeaponObjectLiveryColor call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getWeaponObjectLiveryColor(int32_t _weaponObject, int32_t _camoComponentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3EA4FEABF41464B);
	ctx->Reset();
	ctx->Push(_weaponObject);
	ctx->Push(_camoComponentHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeaponObjectLiveryColor call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native__0xA2C9AC24B4061285(int32_t _ped, int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xA2C9AC24B4061285);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xA2C9AC24B4061285 call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0x977CA98939E82E4B(int32_t _weaponObject, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x977CA98939E82E4B);
	ctx->Reset();
	ctx->Push(_weaponObject);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0x977CA98939E82E4B call failed" << Log::Endl;
	}
}

EXPORT bool Native_getWeaponHudStats(int32_t _weaponHash, int32_t& _outData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xD92C739EE34C9EBA);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_outData);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeaponHudStats call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_getWeaponComponentHudStats(int32_t _componentHash, int32_t& _outData) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB3CAF387AE12E9F8);
	ctx->Reset();
	ctx->Push(_componentHash);
	ctx->Push(_outData);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeaponComponentHudStats call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT float Native_getWeaponDamage(int32_t _weaponHash, int32_t _componentHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3133B907D8B32053);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_componentHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeaponDamage call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT int32_t Native_getWeaponClipSize(int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x583BE370B1EC6EB4);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeaponClipSize call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT float Native_getWeaponTimeBetweenShots(int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x065D2AACAD8CF7A4);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeaponTimeBetweenShots call failed" << Log::Endl;
	}
	return ctx->ResultFloat();
}

EXPORT void Native_setPedChanceOfFiringBlanks(int32_t _ped, float _xBias, float _yBias) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x8378627201D5497D);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_xBias);
	ctx->Push(_yBias);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedChanceOfFiringBlanks call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_setPedShootOrdnanceWeapon(int32_t _ped, float _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4C8D77C80C0421E);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPedShootOrdnanceWeapon call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_requestWeaponHighDetailModel(int32_t _weaponObject) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x48164DBB970AC3F0);
	ctx->Reset();
	ctx->Push(_weaponObject);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native requestWeaponHighDetailModel call failed" << Log::Endl;
	}
}

EXPORT void Native_setWeaponDamageModifierThisFrame(int32_t _weaponHash, float _damageMultiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4757F00BC6323CFE);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_damageMultiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWeaponDamageModifierThisFrame call failed" << Log::Endl;
	}
}

EXPORT void Native_setWeaponExplosionRadiusMultiplier(int32_t _weaponHash, float _multiplier) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4AE5AC8B852D642C);
	ctx->Reset();
	ctx->Push(_weaponHash);
	ctx->Push(_multiplier);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWeaponExplosionRadiusMultiplier call failed" << Log::Endl;
	}
}

EXPORT void Native__0xE6D2CEDD370FF98E(int32_t _p0, int32_t _p1) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE6D2CEDD370FF98E);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE6D2CEDD370FF98E call failed" << Log::Endl;
	}
}

EXPORT bool Native_isPedCurrentWeaponSilenced(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x65F0C5AE05943EC7);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isPedCurrentWeaponSilenced call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT bool Native_isFlashLightOn(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4B7620C47217126C);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isFlashLightOn call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_setFlashLightFadeDistance(float _distance) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCEA66DAD478CD39B);
	ctx->Reset();
	ctx->Push(_distance);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFlashLightFadeDistance call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_setFlashLightEnabled(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x988DB6FE9B3AC000);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setFlashLightEnabled call failed" << Log::Endl;
	}
}

EXPORT void Native_setWeaponAnimationOverride(int32_t _ped, int32_t _animStyle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1055AC3A667F09D9);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_animStyle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setWeaponAnimationOverride call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getWeaponDamageType(int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x3BE0BB12D25FB305);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getWeaponDamageType call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native__0xE4DCEC7FD5B739A5(int32_t _ped) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xE4DCEC7FD5B739A5);
	ctx->Reset();
	ctx->Push(_ped);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native _0xE4DCEC7FD5B739A5 call failed" << Log::Endl;
	}
}

EXPORT bool Native_canUseWeaponOnParachute(int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBC7BE5ABC0879F74);
	ctx->Reset();
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native canUseWeaponOnParachute call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT int32_t Native_createAirDefenseSphere(float _x, float _y, float _z, float _radius, float _p4, float _p5, float _p6, int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x91EF34584710BE99);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createAirDefenseSphere call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_createAirDefenseArea(float _p0, float _p1, float _p2, float _p3, float _p4, float _p5, float _p6, float _p7, float _p8, float _p9, int32_t _weaponHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x9DA58CDBF6BDBC08);
	ctx->Reset();
	ctx->Push(_p0);
	ctx->Push(_p1);
	ctx->Push(_p2);
	ctx->Push(_p3);
	ctx->Push(_p4);
	ctx->Push(_p5);
	ctx->Push(_p6);
	ctx->Push(_p7);
	ctx->Push(_p8);
	ctx->Push(_p9);
	ctx->Push(_weaponHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native createAirDefenseArea call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT bool Native_removeAirDefenseZone(int32_t _zoneId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x0ABF535877897560);
	ctx->Reset();
	ctx->Push(_zoneId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeAirDefenseZone call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_removeAllAirDefenseZones() {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x1E45B34ADEBEE48E);
	ctx->Reset();
	if (!native->Invoke(ctx)) {
		Log::Error << "Native removeAllAirDefenseZones call failed" << Log::Endl;
	}
}

EXPORT void Native_setPlayerAirDefenseZoneFlag(int32_t _player, int32_t _zoneId, bool _enable) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xECDC202B25E5CF48);
	ctx->Reset();
	ctx->Push(_player);
	ctx->Push(_zoneId);
	ctx->Push(_enable);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setPlayerAirDefenseZoneFlag call failed" << Log::Endl;
	}
}

EXPORT bool Native_isAnyAirDefenseZoneInsideSphere(float _x, float _y, float _z, float _radius, int32_t& _outZoneId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xDAB963831DBFD3F4);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	ctx->Push(_radius);
	ctx->Push(_outZoneId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native isAnyAirDefenseZoneInsideSphere call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_fireAirDefenseWeapon(int32_t _zoneId, float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x44F1012B69313374);
	ctx->Reset();
	ctx->Push(_zoneId);
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native fireAirDefenseWeapon call failed" << Log::Endl;
	}
}

EXPORT bool Native_doesAirDefenseZoneExist(int32_t _zoneId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD79A550999D7D4F);
	ctx->Reset();
	ctx->Push(_zoneId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native doesAirDefenseZoneExist call failed" << Log::Endl;
	}
	return ctx->ResultBool();
}

EXPORT void Native_setCanPedEquipWeapon(int32_t _ped, int32_t _weaponHash, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xB4771B9AAF4E68E4);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_weaponHash);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCanPedEquipWeapon call failed" << Log::Endl;
	}
}

EXPORT void Native_setCanPedEquipAllWeapons(int32_t _ped, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xEFF296097FF1E509);
	ctx->Reset();
	ctx->Push(_ped);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setCanPedEquipAllWeapons call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getZoneAtCoords(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x27040C25DE6CB2F4);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getZoneAtCoords call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getZoneFromNameId(const char* _zoneName) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x98CD1D2934B76CC1);
	ctx->Reset();
	ctx->Push(_zoneName);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getZoneFromNameId call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT int32_t Native_getZonePopschedule(int32_t _zoneId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x4334BC40AA0CB4BB);
	ctx->Reset();
	ctx->Push(_zoneId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getZonePopschedule call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT const char* Native_getNameOfZone(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xCD90657D4C30E1CA);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getNameOfZone call failed" << Log::Endl;
	}
	return ctx->ResultString();
}

EXPORT void Native_setZoneEnabled(int32_t _zoneId, bool _toggle) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0xBA5ECEEA120E5611);
	ctx->Reset();
	ctx->Push(_zoneId);
	ctx->Push(_toggle);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native setZoneEnabled call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getZoneScumminess(int32_t _zoneId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F7B268D15BA0739);
	ctx->Reset();
	ctx->Push(_zoneId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getZoneScumminess call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}

EXPORT void Native_overridePopscheduleVehicleModel(int32_t _scheduleId, int32_t _vehicleHash) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5F7D596BAC2E7777);
	ctx->Reset();
	ctx->Push(_scheduleId);
	ctx->Push(_vehicleHash);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native overridePopscheduleVehicleModel call failed" << Log::Endl;
	}
}

EXPORT void Native_clearPopscheduleOverrideVehicleModel(int32_t _scheduleId) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x5C0DE367AA0D911C);
	ctx->Reset();
	ctx->Push(_scheduleId);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native clearPopscheduleOverrideVehicleModel call failed" << Log::Endl;
	}
}

EXPORT int32_t Native_getHashOfMapAreaAtCoords(float _x, float _y, float _z) {
	static auto native = alt::ICore::Instance().GetNativeByHash(0x7EE64D51E8498728);
	ctx->Reset();
	ctx->Push(_x);
	ctx->Push(_y);
	ctx->Push(_z);
	if (!native->Invoke(ctx)) {
		Log::Error << "Native getHashOfMapAreaAtCoords call failed" << Log::Endl;
	}
	return ctx->ResultInt();
}



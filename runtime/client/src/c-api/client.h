#pragma once
#include "../thirdparty/altv-cpp-api/SDK.h"

using namespace alt;

extern "C"
{
//    EXPORT IDiscordManager* GetDiscordManager();
//    EXPORT IStatData* GetStatData(StringView statname);
//    EXPORT alt::Ref<alt::IHandlingData> GetHandlingData(uint32_t modelHash);
//    EXPORT alt::IPackage::PathInfo Resolve(IResource* resource, alt::StringView path, StringView currentModulePath);
//    EXPORT void TriggerServerEvent(StringView ev, MValueArgs args);
//    EXPORT Ref<ILocalPlayer> GetLocalPlayer();
//    EXPORT bool IsSandbox();
//    EXPORT KeyState GetKeyState(uint32_t keyCode);
//    EXPORT bool AreControlsEnabled();
//    EXPORT Vector2i GetCursorPosition();
//    EXPORT void SetCursorPosition(Vector2i pos);
//    EXPORT bool SetConfigFlag(StringView flag, bool state);
//    EXPORT bool GetConfigFlag(StringView flag);
//    EXPORT bool DoesConfigFlagExist(StringView flag);
//    EXPORT void SetVoiceInputMuted(bool state);
//    EXPORT bool IsVoiceInputMuted();
//    EXPORT bool IsVoiceActivationEnabled();
//    EXPORT void ToggleVoiceControls(bool state);
//    EXPORT uint32_t GetVoiceActivationKey();
//    EXPORT String GetLicenseHash();
//    EXPORT String GetLocale();
//    EXPORT bool IsInStreamerMode();
//    EXPORT bool IsMenuOpen();
//    EXPORT bool IsConsoleOpen();
//    EXPORT const Array<INative*> GetAllNatives();
//    EXPORT Ref<INative::Context> CreateNativesContext();
//    EXPORT Ref<IEntity> GetEntityByScriptGuid(int32_t scriptGuid);
//    EXPORT void* GetTextureFromDrawable(uint32_t modelHash, StringView targetTextureName);
//    EXPORT void RequestIPL(StringView ipl);
//    EXPORT void RemoveIPL(StringView ipl);
//    EXPORT bool BeginScaleformMovieMethodMinimap(StringView methodName);
//    EXPORT int32_t GetMsPerGameMinute();
//    EXPORT void SetMsPerGameMinute(int32_t val);
//    EXPORT void SetWeatherCycle(alt::Array<uint8_t> weathers, alt::Array<uint8_t> multipliers);
//    EXPORT void SetWeatherSyncActive(bool active);
//    EXPORT void SetCamFrozen(bool frozen);
//    EXPORT alt::Ref<alt::IMapData> GetMapData(uint8_t zoomDataId);
//    EXPORT alt::Ref<alt::IMapData> GetMapData(StringView alias);
//    EXPORT uint8_t GetMapDataIDFromAlias(StringView alias);
//    EXPORT void ResetMapData(uint8_t zoomDataId);
//    EXPORT void ResetMapData(StringView alias);
//    EXPORT void ResetAllMapData();
//    EXPORT PermissionState GetPermissionState(Permission permission);
//    EXPORT TakeScreenshotCallback = void(*)(StringView base64, const void* userData);
//    EXPORT PermissionState TakeScreenshot(TakeScreenshotCallback callback, const void* userData);
//    EXPORT PermissionState TakeScreenshotGameOnly(TakeScreenshotCallback callback, const void* userData);
//    EXPORT Ref<IWebView> CreateWebView(IResource* res, StringView url, uint32_t drawableHash, StringView targetTexture);
//    EXPORT Ref<IWebView> CreateWebView(IResource* res, StringView url, Vector2i position, Vector2i size, bool isVisible, bool isOverlay);
//    EXPORT Ref<IWebSocketClient> CreateWebSocketClient(StringView url, IResource* res);
//    EXPORT Ref<IHttpClient> CreateHttpClient(IResource* res);
//    EXPORT Ref<IBlip> CreateBlip(IBlip::BlipType type, Vector3f position);
//    EXPORT Ref<IBlip> CreateBlip(IBlip::BlipType type, uint32_t entityID);
//    EXPORT Ref<IBlip> CreateBlip(Vector3f position, float radius);
//    EXPORT Ref<IBlip> CreateBlip(Vector3f position, float width, float height);
//    EXPORT Ref<ICheckpoint> CreateCheckpoint(uint8_t type, Vector3f pos, Vector3f next, float radius, float height, alt::RGBA color);
//    EXPORT Ref<IAudio> CreateAudio(StringView source, float volume, uint32_t category, bool frontend, IResource* res);
//    EXPORT void SetAngularVelocity(uint32_t entityId, alt::Vector4f velocity);
//    EXPORT bool IsGameFocused();
//    EXPORT void LoadModel(uint32_t hash);
//    EXPORT void LoadModelAsync(uint32_t hash);
//    EXPORT bool LoadYtyp(const std::string& path);
//    EXPORT bool UnloadYtyp(const std::string& path);
//    EXPORT alt::String HeadshotToBase64(uint8_t id);
//    EXPORT void SetDlcClothes(int32_t scriptID, uint8_t component, uint16_t drawable, uint8_t texture, uint8_t palette, uint32_t dlc);
//    EXPORT void SetDlcProps(int32_t scriptID, uint8_t component, uint8_t drawable, uint8_t texture, uint32_t dlc);
//    EXPORT void ClearProps(int32_t scriptID, uint8_t component);
//    EXPORT void SetWatermarkPosition(uint8_t pos);
//    EXPORT uint16_t GetFps();
//    EXPORT uint16_t GetPing();
//    EXPORT uint64_t GetTotalPacketsSent();
//    EXPORT uint32_t GetTotalPacketsLost();
//    EXPORT alt::String GetClientPath();
};
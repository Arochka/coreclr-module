on:
  push:
    tags: v*
jobs:
  build-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 5.0.101
      - name: Build
        working-directory: ./api
        run: |
          dotnet build AltV.Net.Host -c Release
          dotnet build AltV.Net -c Release
          dotnet build AltV.Net.Async -c Release
      - run: |
          mkdir -p ./modules/linux
          mkdir -p ./modules/windows
          mkdir ./apis
          cp ./api/AltV.Net.Host/bin/Release/netcoreapp3.1/AltV.Net.Host.dll ./modules/linux
          cp ./api/AltV.Net.Host/bin/Release/netcoreapp3.1/AltV.Net.Host.runtimeconfig.json ./modules/linux
          cp ./api/AltV.Net.Host/bin/Release/netcoreapp3.1/AltV.Net.Host.dll ./modules/windows
          cp ./api/AltV.Net.Host/bin/Release/netcoreapp3.1/AltV.Net.Host.runtimeconfig.json ./modules/windows
          cp ./api/AltV.Net/bin/Release/netcoreapp3.1/AltV.Net.dll ./apis
          cp ./api/AltV.Net/bin/Release/netcoreapp3.1/AltV.Net.pdb ./apis
          cp ./api/AltV.Net.Async/bin/Release/netcoreapp3.1/AltV.Net.Async.dll ./apis
          cp ./api/AltV.Net.Async/bin/Release/netcoreapp3.1/AltV.Net.Async.pdb ./apis
      - name: Pack files
        run: |
          tar -cvf ./apis.tar modules apis
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Typings
          path: ./apis.tar
  build-module:
    runs-on: ${{ matrix.config.os }}
    needs: build-api
    strategy:
      matrix:
        config:
          - {
              name: Linux,
              os: ubuntu-18.04,
              cc: gcc-8,
              cxx: g++-8,
              args: -DCMAKE_BUILD_TYPE=RelWithDebInfo
            }
          - {
              name: Windows,
              os: windows-2016,
              cc: cl,
              cxx: cl,
              # args: -DCMAKE_BUILD_TYPE=RelWithDebInfo -G "Visual Studio 15 2017" -A x64 -T host=x64
              args: -DCMAKE_BUILD_TYPE=RelWithDebInfo -A x64 -T host=x64
            }
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      # - working-directory: ./runtime
      #   run: |
      #     mkdir build
      #     cd build
      #     cmake ${{ matrix.config.args }} ..
      - working-directory: ./runtime
        shell: cmake -P {0}
        run: |
          set(ENV{CC} ${{ matrix.config.cc }})
          set(ENV{CXX} ${{ matrix.config.cxx }})
          file(MAKE_DIRECTORY build)
          execute_process(
            COMMAND cmake .. ${{ matrix.config.args }}
            RESULT_VARIABLE result
            WORKING_DIRECTORY build
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()
      - working-directory: ./runtime
        run: cmake --build build --config Release
      - working-directory: ./runtime
        shell: bash
        run: ls -l -R ./build
      - if: ${{ runner.os == 'Linux' }}
        run: |
          mkdir -p modules/linux/modules/
          cp ./runtime/build/src/libcsharp-module.so ./modules/linux/modules
      - if: ${{ runner.os == 'Windows' }}
        run: |
          mkdir -p modules/windows/modules/
          cp ./runtime/build/src/Release/csharp-module.dll ./modules/windows/modules
      - id: create_archive
        shell: bash
        run: |
          filename=$(echo "${{ matrix.config.name }}" | sed -e 's/\(.*\)/\L\1/')
          tar -cvf ./$filename.tar modules/$filename/modules
          echo "::set-output name=art_name::$filename"
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.config.name }}
          path: ./${{ steps.create_archive.outputs.art_name }}.tar
      - if: ${{ failure() }}
        uses: c-hive/gha-remove-artifacts@v1.2.0
        with:
          age: '0'
  build-nuget:
    runs-on: ubuntu-latest
    needs: build-module
    steps:
      - uses: actions/checkout@v1
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 5.0.101
      - working-directory: ./api
        run: |
          dotnet build AltV.Net -c Release
          dotnet build AltV.Net.Async -c Release
      - uses: rohith/publish-nuget@v2
        with:
          PROJECT_FILE_PATH: ./api/AltV.Net/AltV.Net.csproj
          VERSION_REGEX: <PackageVersion>(.*)<\/PackageVersion>
          # NUGET_KEY: ${{secrets.NUGET_API_KEY}}
          INCLUDE_SYMBOLS: true
          TAG_COMMIT: false
      - uses: rohith/publish-nuget@v2
        with:
          PROJECT_FILE_PATH: ./api/AltV.Net.Async/AltV.Net.Async.csproj
          VERSION_REGEX: <PackageVersion>(.*)<\/PackageVersion>
          # NUGET_KEY: ${{secrets.NUGET_API_KEY}}
          INCLUDE_SYMBOLS: true
          TAG_COMMIT: false
  build-cdn:
    runs-on: ubuntu-latest
    needs: build-nuget
    steps:
      - run: echo "Not implemented yet"
      - if: ${{ failure() }}
        uses: c-hive/gha-remove-artifacts@v1.2.0
        with:
          age: '0'
  build-dummy:
    runs-on: ubuntu-latest
    needs: build-cdn
    steps:
      - uses: actions/checkout@v1
      - uses: actions/download-artifact@v2
        with:
          name: Typings
          path: ./
      - uses: actions/download-artifact@v2
        with:
          name: Linux
          path: ./
      - uses: actions/download-artifact@v2
        with:
          name: Windows
          path: ./
      - run: |
          tar -xvf ./apis.tar
          tar -xvf ./linux.tar
          tar -xvf ./windows.tar
      - run: |
          (cd ./modules/linux && zip -r ../../csharp-module-linux.zip *)
          (cd ./modules/windows && zip -r ../../csharp-module-win.zip *)
          (cd ./apis && zip -r ../csharp-module-api.zip *)
      - run: ls -l -R ./
      - shell: bash
        run: echo "##[set-output name=branch;]$(git ls-remote --heads origin | grep $GITHUB_SHA | sed "s/.*\///")"
        id: extract_branch
      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: ${{ steps.extract_branch.outputs.branch != 'master' }}
      - id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./csharp-module-linux.zip
          asset_name: csharp-module-linux.zip
          asset_content_type: application/zip
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./csharp-module-win.zip
          asset_name: csharp-module-win.zip
          asset_content_type: application/zip
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./csharp-module-api.zip
          asset_name: csharp-module-api.zip
          asset_content_type: application/zip
      - if: ${{ always() }}
        uses: c-hive/gha-remove-artifacts@v1.2.0
        with:
          age: '0'
